/**
 * \file
 *
 * \brief SAM LPMCU_MISC_REGS
 *
 * Copyright (C) 2016 Atmel Corporation. All rights reserved.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * 4. This software may only be redistributed and used in connection with an
 *    Atmel microcontroller product.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \asf_license_stop
 */

#ifdef _SAMB11_LPMCU_MISC_REGS_COMPONENT_
#ifndef _HRI_LPMCU_MISC_REGS_B11_H_INCLUDED_
#define _HRI_LPMCU_MISC_REGS_B11_H_INCLUDED_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <hal_atomic.h>

#if defined(ENABLE_LPMCU_MISC_REGS_CRITICAL_SECTIONS)
#define LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER() CRITICAL_SECTION_ENTER()
#define LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE() CRITICAL_SECTION_LEAVE()
#else
#define LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER()
#define LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE()
#endif

typedef uint16_t hri_lpmcu_misc_regs_fp_comp_enable_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_irq_ctrl_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_quad_dec0_status_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_quad_dec1_status_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_quad_dec2_status_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t;
typedef uint16_t hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_arm_irq_status_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_arm_irq_status_1_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_efuse_1_status_3_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp0_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp0_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp10_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp10_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp11_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp11_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp12_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp12_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp13_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp13_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp14_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp14_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp15_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp15_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp1_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp1_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp2_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp2_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp3_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp3_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp4_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp4_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp5_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp5_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp6_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp6_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp7_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp7_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp8_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp8_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp9_comp_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_fp_comp9_replace_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_invert_output_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_ishape_pad_3_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mbist_bg_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mbist_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mbist_dual_status_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mbist_status_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pinmux_sel_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pinmux_sel_1_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pinmux_sel_2_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pinmux_sel_3_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pmu_read_regs_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pull_enable_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pwm0_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pwm1_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pwm2_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_pwm3_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_rtype_pad_0_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t;
typedef uint32_t hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_ble_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_btmcu_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_irq_sts_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_lpmcu_mbist_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_ms_gpio_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_quad_dec_irqs_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_spiflash_bypass_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t;
typedef uint8_t  hri_lpmcu_misc_regs_test_bus_ctrl_reg_t;

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_bit(const void *const hw,
                                                                                        bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GLOBAL_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_CPU_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_CPU_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_CPU_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_CPU_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_CPU_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_bit(const void *const hw,
                                                                                                bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_bit(const void *const hw,
                                                                                        bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_bit(const void *const hw,
                                                                                          bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_bit(const void *const hw,
                                                                                          bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_bit(const void *const hw,
                                                                                                bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_0_reg(const void *const                              hw,
                                                       hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_0_reg(const void *const                              hw,
                                                       hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_0_reg(const void *const                              hw,
                                                         hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_0_reg(const void *const                              hw,
                                                         hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_0_reg(const void *const                              hw,
                                                          hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_global_reset_0_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_GLOBAL_RESET_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_0.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_bit(const void *const hw,
                                                                                                   bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_bit(const void *const hw,
                                                                                                   bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg
	    |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool
hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg
	    ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg
	    |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool
hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg
	    ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_bit(const void *const hw,
                                                                                                bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_GLOBAL_RESET_1_reg(const void *const                              hw,
                                                       hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_GLOBAL_RESET_1_reg(const void *const                              hw,
                                                       hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_GLOBAL_RESET_1_reg(const void *const                              hw,
                                                         hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_GLOBAL_RESET_1_reg(const void *const                              hw,
                                                         hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_GLOBAL_RESET_1_reg(const void *const                              hw,
                                                          hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_global_reset_1_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_GLOBAL_RESET_1_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_GLOBAL_RESET_1.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_bit(const void *const hw,
                                                                                                   bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_bit(const void *const hw,
                                                                                                   bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_bit(const void *const hw,
                                                                                                   bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_bit(const void *const hw,
                                                                                                bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_bit(const void *const hw,
                                                                                          bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_bit(const void *const hw,
                                                                                              bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_bit(const void *const hw,
                                                                                          bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_0_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_0_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_0_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_0_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_0_reg(const void *const                               hw,
                                                           hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_clock_enables_0_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CLOCK_ENABLES_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_0.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg
	    |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool
hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg
	    ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg
	    |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool
hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg
	    &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg
	    ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_bit(const void *const hw,
                                                                                          bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_bit(const void *const hw,
                                                                                             bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_bit(const void *const hw,
                                                                                            bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CLOCK_ENABLES_1_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CLOCK_ENABLES_1_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CLOCK_ENABLES_1_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CLOCK_ENABLES_1_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CLOCK_ENABLES_1_reg(const void *const                               hw,
                                                           hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_clock_enables_1_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CLOCK_ENABLES_1_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_CLOCK_ENABLES_1.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_BTMCU_CTRL_RXTX_SEQ_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg |= LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BTMCU_CTRL_RXTX_SEQ_CLK_EN_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Msk) >> LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BTMCU_CTRL_RXTX_SEQ_CLK_EN_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BTMCU_CTRL_RXTX_SEQ_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg &= ~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BTMCU_CTRL_RXTX_SEQ_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg ^= LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_BTMCU_CTRL_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg |= LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BTMCU_CTRL_AHB_CLK_EN_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Msk) >> LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BTMCU_CTRL_AHB_CLK_EN_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BTMCU_CTRL_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg &= ~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BTMCU_CTRL_AHB_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg ^= LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_BTMCU_CTRL_PERIPH_REGS_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg |= LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BTMCU_CTRL_PERIPH_REGS_CLK_EN_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Msk)
	      >> LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BTMCU_CTRL_PERIPH_REGS_CLK_EN_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BTMCU_CTRL_PERIPH_REGS_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg &= ~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BTMCU_CTRL_PERIPH_REGS_CLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg ^= LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_BTMCU_CTRL_reg(const void *const                    hw,
                                                                hri_lpmcu_misc_regs_btmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_btmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_BTMCU_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_btmcu_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BTMCU_CTRL_reg(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_btmcu_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BTMCU_CTRL_reg(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_btmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BTMCU_CTRL_reg(const void *const                    hw,
                                                                   hri_lpmcu_misc_regs_btmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_btmcu_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_BTMCU_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->BTMCU_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_BT26M_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_USE_BT26M_CLK_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Msk) >> LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_USE_BT26M_CLK_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_USE_BT26M_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_USE_BT26M_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_ARM_LP_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_USE_ARM_LP_CLK_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Msk) >> LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_USE_ARM_LP_CLK_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_USE_ARM_LP_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_USE_ARM_LP_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_BYPASS_WIC_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_BYPASS_WIC_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Msk) >> LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_BYPASS_WIC_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_BYPASS_WIC_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_BYPASS_WIC_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_BYPASS_WIC_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_bit(const void *const hw,
                                                                                        bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_USE_XO_FOR_LP_CAL_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_DIV_CLK_SEL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_bit(const void *const hw,
                                                                                        bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_IDRAM_1_MEM_IQ_BYP_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_INVERT_UART0_IF_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_INVERT_UART0_IF_CLK_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_INVERT_UART0_IF_CLK_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_INVERT_UART0_IF_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_INVERT_UART0_IF_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART0_IF_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_INVERT_UART1_IF_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_INVERT_UART1_IF_CLK_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_INVERT_UART1_IF_CLK_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_INVERT_UART1_IF_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_INVERT_UART1_IF_CLK_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_INVERT_UART1_IF_CLK_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_LPMCU_CLK_SEL_bf(const void *const                    hw,
                                                                             hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_LPMCU_CLK_SEL_bf(const void *const                    hw,
                                                          hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(mask)) >> LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_LPMCU_CLK_SEL_bf(const void *const                    hw,
                                                            hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(data);
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_LPMCU_CLK_SEL_bf(const void *const                    hw,
                                                            hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_LPMCU_CLK_SEL_bf(const void *const                    hw,
                                                             hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_LPMCU_CLK_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk) >> LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_DUALTIMER0_CLK_SEL_bf(const void *const                    hw,
                                                               hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_DUALTIMER0_CLK_SEL_bf(const void *const                    hw,
                                                               hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL(mask))
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_DUALTIMER0_CLK_SEL_bf(const void *const                    hw,
                                                                 hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL(data);
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_DUALTIMER0_CLK_SEL_bf(const void *const                    hw,
                                                                 hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_DUALTIMER0_CLK_SEL_bf(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_DUALTIMER0_CLK_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_SPI_FLASH0_CLKSEL_bf(const void *const                    hw,
                                                              hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_SPI_FLASH0_CLKSEL_bf(const void *const                    hw,
                                                              hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL(mask))
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_SPI_FLASH0_CLKSEL_bf(const void *const                    hw,
                                                                hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL_Msk;
	tmp |= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL(data);
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_SPI_FLASH0_CLKSEL_bf(const void *const                    hw,
                                                                hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_SPI_FLASH0_CLKSEL_bf(const void *const                    hw,
                                                                 hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_SPI_FLASH0_CLKSEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL_Msk) >> LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_bf(const void *const                    hw,
                                                                       hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_bf(const void *const                    hw,
                                                                       hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE(mask))
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_bf(const void *const                    hw,
                                                                         hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_Msk;
	tmp |= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE(data);
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_bf(const void *const                    hw,
                                                                         hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_bf(const void *const                    hw,
                                                                          hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLOCK_DIV_VALUE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_reg(const void *const                    hw,
                                                                hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_reg(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_reg(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_reg(const void *const                    hw,
                                                                   hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_MBIST_MBIST_MODE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg |= LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_MBIST_MBIST_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Msk) >> LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_MBIST_MBIST_MODE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_MBIST_MBIST_MODE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg &= ~LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_MBIST_MBIST_MODE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg ^= LPMCU_MISC_REGS_LPMCU_MBIST_MBIST_MODE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_MBIST_reg(const void *const                     hw,
                                                                 hri_lpmcu_misc_regs_lpmcu_mbist_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_mbist_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_MBIST_reg(const void *const hw, hri_lpmcu_misc_regs_lpmcu_mbist_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_MBIST_reg(const void *const                     hw,
                                                                   hri_lpmcu_misc_regs_lpmcu_mbist_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_MBIST_reg(const void *const                     hw,
                                                                   hri_lpmcu_misc_regs_lpmcu_mbist_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_MBIST_reg(const void *const                     hw,
                                                                    hri_lpmcu_misc_regs_lpmcu_mbist_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_mbist_reg_t hri_lpmcumiscregsmiscregs_read_LPMCU_MBIST_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_MBIST.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_BLE_CTRL_BLE_WAKEUP_REQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg |= LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BLE_CTRL_BLE_WAKEUP_REQ_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BLE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Msk) >> LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BLE_CTRL_BLE_WAKEUP_REQ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BLE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Msk;
	tmp |= value << LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Pos;
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BLE_CTRL_BLE_WAKEUP_REQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg &= ~LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BLE_CTRL_BLE_WAKEUP_REQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg ^= LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_BLE_CTRL_BLE_WAKEUP_REQ_CORE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg |= LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BLE_CTRL_BLE_WAKEUP_REQ_CORE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BLE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Msk) >> LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BLE_CTRL_BLE_WAKEUP_REQ_CORE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BLE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Msk;
	tmp |= value << LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Pos;
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BLE_CTRL_BLE_WAKEUP_REQ_CORE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg &= ~LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BLE_CTRL_BLE_WAKEUP_REQ_CORE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg ^= LPMCU_MISC_REGS_BLE_CTRL_BLE_WAKEUP_REQ_CORE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_BLE_CTRL_reg(const void *const                  hw,
                                                              hri_lpmcu_misc_regs_ble_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ble_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_BLE_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_ble_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BLE_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BLE_CTRL_reg(const void *const                  hw,
                                                                hri_lpmcu_misc_regs_ble_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BLE_CTRL_reg(const void *const                  hw,
                                                                hri_lpmcu_misc_regs_ble_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BLE_CTRL_reg(const void *const                  hw,
                                                                 hri_lpmcu_misc_regs_ble_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ble_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_BLE_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->BLE_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_CTRL_MBIST_CONTROL_bf(const void *const                    hw,
                                                                             hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg |= LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_CTRL_MBIST_CONTROL_bf(const void *const                    hw,
                                                          hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL(mask)) >> LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MBIST_CTRL_MBIST_CONTROL_bf(const void *const                    hw,
                                                            hri_lpmcu_misc_regs_mbist_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL_Msk;
	tmp |= LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL(data);
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MBIST_CTRL_MBIST_CONTROL_bf(const void *const                    hw,
                                                            hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg &= ~LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MBIST_CTRL_MBIST_CONTROL_bf(const void *const                    hw,
                                                             hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg ^= LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_CTRL_MBIST_CONTROL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL_Msk) >> LPMCU_MISC_REGS_MBIST_CTRL_MBIST_CONTROL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_CTRL_reg(const void *const                    hw,
                                                                hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_CTRL_reg(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_mbist_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_CTRL_reg(const void *const                    hw,
                                                                  hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_CTRL_reg(const void *const                    hw,
                                                                   hri_lpmcu_misc_regs_mbist_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_MBIST_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MBIST_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_bit(const void *const hw,
                                                                                        bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_MARCH2_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_bit(const void *const hw,
                                                                                        bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_UNIQUE_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_bit(const void *const hw,
                                                                                              bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_CHECKERBOARD_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_bit(const void *const hw,
                                                                                          bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_DIAGONAL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_bit(const void *const hw,
                                                                                          bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC0_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_bit(const void *const hw,
                                                                                          bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_ADDRDEC1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_bit(const void *const hw,
                                                                                           bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_COLMARCH1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_bit(const void *const hw,
                                                                                           bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_FILLWITH0_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_bit(const void *const hw,
                                                                                                bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ZEROS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_bit(const void *const hw,
                                                                                                 bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ZEROS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_bit(const void *const hw,
                                                                                               bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_ONES_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_bit(const void *const hw,
                                                                                                bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_ONES_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_bit(const void *const hw,
                                                                                             bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_CB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_bit(const void *const hw,
                                                                                              bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_CB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_bit(const void *const hw,
                                                                                                bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_READ_INVCB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_bit(const void *const hw,
                                                                                                 bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= LPMCU_MISC_REGS_MBIST_SRAM_ALG_SEL_RET_WRITE_INVCB_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_MBIST_SRAM_ALG_SEL_reg(const void *const                            hw,
                                                     hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_SRAM_ALG_SEL_reg(const void *const                            hw,
                                                     hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MBIST_SRAM_ALG_SEL_reg(const void *const                            hw,
                                                       hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MBIST_SRAM_ALG_SEL_reg(const void *const                            hw,
                                                       hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MBIST_SRAM_ALG_SEL_reg(const void *const                            hw,
                                                        hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_sram_alg_sel_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_SRAM_ALG_SEL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MBIST_SRAM_ALG_SEL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_BG_MBIST_BG_bf(const void *const                  hw,
                                                                      hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg |= LPMCU_MISC_REGS_MBIST_BG_MBIST_BG(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_bg_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_BG_MBIST_BG_bf(const void *const hw, hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_BG.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_BG_MBIST_BG(mask)) >> LPMCU_MISC_REGS_MBIST_BG_MBIST_BG_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_BG_MBIST_BG_bf(const void *const                  hw,
                                                                        hri_lpmcu_misc_regs_mbist_bg_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_BG.reg;
	tmp &= ~LPMCU_MISC_REGS_MBIST_BG_MBIST_BG_Msk;
	tmp |= LPMCU_MISC_REGS_MBIST_BG_MBIST_BG(data);
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_BG_MBIST_BG_bf(const void *const                  hw,
                                                                        hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg &= ~LPMCU_MISC_REGS_MBIST_BG_MBIST_BG(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_BG_MBIST_BG_bf(const void *const                  hw,
                                                                         hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg ^= LPMCU_MISC_REGS_MBIST_BG_MBIST_BG(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_bg_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_BG_MBIST_BG_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_BG.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MBIST_BG_MBIST_BG_Msk) >> LPMCU_MISC_REGS_MBIST_BG_MBIST_BG_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MBIST_BG_reg(const void *const                  hw,
                                                              hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_bg_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_BG_reg(const void *const hw, hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_BG.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MBIST_BG_reg(const void *const                  hw,
                                                                hri_lpmcu_misc_regs_mbist_bg_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MBIST_BG_reg(const void *const                  hw,
                                                                hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MBIST_BG_reg(const void *const                  hw,
                                                                 hri_lpmcu_misc_regs_mbist_bg_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MBIST_BG.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mbist_bg_reg_t hri_lpmcumiscregsmiscregs_read_MBIST_BG_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MBIST_BG.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_TEST_BUS_CTRL_TEST_ENABLE_ARM_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg |= LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_TEST_BUS_CTRL_TEST_ENABLE_ARM_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Msk)
	      >> LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_TEST_BUS_CTRL_TEST_ENABLE_ARM_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Msk;
	tmp |= value << LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Pos;
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_TEST_BUS_CTRL_TEST_ENABLE_ARM_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg &= ~LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_TEST_BUS_CTRL_TEST_ENABLE_ARM_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg ^= LPMCU_MISC_REGS_TEST_BUS_CTRL_TEST_ENABLE_ARM_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_TEST_BUS_CTRL_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_test_bus_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_test_bus_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_TEST_BUS_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_test_bus_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_TEST_BUS_CTRL_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_test_bus_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_TEST_BUS_CTRL_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_test_bus_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_TEST_BUS_CTRL_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_test_bus_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_test_bus_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_TEST_BUS_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->TEST_BUS_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_0_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_0_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_1_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_1_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_2_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_2_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_3_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_3_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_4_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_4_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_5_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_5_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_6_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_6_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_7_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_7_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_8_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_8_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_9_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_9_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_10_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_10_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_11_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_11_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_12_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_12_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_13_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_13_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_14_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_14_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_15_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_15_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_16_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_16_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_17_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_17_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_18_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_18_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_19_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_19_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_20_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_20_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_21_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_21_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_22_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_22_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_GPIO_23_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Msk)
	      >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_GPIO_23_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_SIP_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_SIP_0_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_SIP_0_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_SIP_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_SIP_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_SIP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_SIP_1_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_SIP_1_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_SIP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_SIP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_SIP_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_SIP_2_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_SIP_2_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_SIP_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_SIP_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_SIP_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_SIP_3_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_SIP_3_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_SIP_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_SIP_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_LP_SIP_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_LP_SIP_4_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Msk) >> LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_LP_SIP_4_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Msk;
	tmp |= value << LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Pos;
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_LP_SIP_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_LP_SIP_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= LPMCU_MISC_REGS_INVERT_OUTPUT_CTRL_LP_SIP_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_INVERT_OUTPUT_CTRL_reg(const void *const                            hw,
                                                     hri_lpmcu_misc_regs_invert_output_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_invert_output_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_INVERT_OUTPUT_CTRL_reg(const void *const                            hw,
                                                     hri_lpmcu_misc_regs_invert_output_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_INVERT_OUTPUT_CTRL_reg(const void *const                            hw,
                                                       hri_lpmcu_misc_regs_invert_output_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_INVERT_OUTPUT_CTRL_reg(const void *const                            hw,
                                                       hri_lpmcu_misc_regs_invert_output_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_INVERT_OUTPUT_CTRL_reg(const void *const                            hw,
                                                        hri_lpmcu_misc_regs_invert_output_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_invert_output_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_INVERT_OUTPUT_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->INVERT_OUTPUT_CTRL.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_0_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_0_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_0_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_0_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_0_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_0_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_0_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_1_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_1_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_1_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_1_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_1_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_1_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_1_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_2_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_2_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_2_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_2_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_2_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_2_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_2_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_3_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_3_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_3_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_3_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_3_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_3_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_3_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_4_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_4_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_4_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_4_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_4_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_4_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_4_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_5_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_5_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_5_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_5_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_5_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_5_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_5_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_6_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_6_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_6_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_6_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_6_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_6_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_6_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_LP_GPIO_7_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_LP_GPIO_7_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_LP_GPIO_7_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_LP_GPIO_7_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_LP_GPIO_7_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_LP_GPIO_7_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_0_LP_GPIO_7_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_0_reg(const void *const hw, hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_0_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_0_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_0_reg(const void *const                      hw,
                                                                     hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_8_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_8_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_8_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_8_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_8_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_8_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_8_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_9_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_9_SEL_bf(const void *const                      hw,
                                                            hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_9_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_9_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_9_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_9_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_9_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_10_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_10_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_10_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_10_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_10_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_10_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_10_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_11_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_11_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_11_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_11_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_11_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_11_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_11_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_12_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_12_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_12_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_12_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_12_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_12_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_12_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_13_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_13_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_13_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_13_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_13_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_13_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_13_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_14_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_14_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_14_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_14_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_14_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_14_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_14_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_LP_GPIO_15_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_LP_GPIO_15_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_LP_GPIO_15_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_LP_GPIO_15_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_LP_GPIO_15_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_LP_GPIO_15_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_1_LP_GPIO_15_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_1_reg(const void *const hw, hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_1_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_1_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_1_reg(const void *const                      hw,
                                                                     hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_1_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_16_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_16_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_16_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_16_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_16_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_16_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_16_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_17_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_17_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_17_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_17_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_17_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_17_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_17_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_18_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_18_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_18_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_18_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_18_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_18_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_18_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_19_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_19_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_19_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_19_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_19_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_19_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_19_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_20_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_20_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_20_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_20_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_20_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_20_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_20_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_21_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_21_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_21_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_21_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_21_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_21_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_21_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_22_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_22_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_22_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_22_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_22_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_22_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_22_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_LP_GPIO_23_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_LP_GPIO_23_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_LP_GPIO_23_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_LP_GPIO_23_SEL_bf(const void *const                      hw,
                                                               hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_LP_GPIO_23_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_LP_GPIO_23_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_2_LP_GPIO_23_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_2_reg(const void *const hw, hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_2_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_2_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_2_reg(const void *const                      hw,
                                                                     hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_2_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_0_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_0_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_1_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_1_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_2_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_2_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_3_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_3_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_4_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_4_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_5_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_5_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_6_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_6_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_7_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_7_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_8_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_8_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_9_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_9_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_10_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_10_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_11_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_11_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_12_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_12_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_13_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_13_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_14_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_14_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_15_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_15_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_16_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_16_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_17_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_17_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_18_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_18_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_19_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_19_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_20_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_20_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_21_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_21_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_22_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_22_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_GPIO_23_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_GPIO_23_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_SIP_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_SIP_0_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_SIP_0_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_SIP_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_SIP_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_SIP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_SIP_1_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_SIP_1_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_SIP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_SIP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_SIP_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_SIP_2_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_SIP_2_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_SIP_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_SIP_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_SIP_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_SIP_3_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_SIP_3_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_SIP_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_SIP_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_LP_SIP_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_LP_SIP_4_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Msk) >> LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_LP_SIP_4_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Msk;
	tmp |= value << LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Pos;
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_LP_SIP_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_LP_SIP_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= LPMCU_MISC_REGS_PULL_ENABLE_LP_SIP_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PULL_ENABLE_reg(const void *const                     hw,
                                                                 hri_lpmcu_misc_regs_pull_enable_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pull_enable_reg_t
hri_lpmcumiscregsmiscregs_get_PULL_ENABLE_reg(const void *const hw, hri_lpmcu_misc_regs_pull_enable_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PULL_ENABLE_reg(const void *const                     hw,
                                                                   hri_lpmcu_misc_regs_pull_enable_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PULL_ENABLE_reg(const void *const                     hw,
                                                                   hri_lpmcu_misc_regs_pull_enable_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PULL_ENABLE_reg(const void *const                     hw,
                                                                    hri_lpmcu_misc_regs_pull_enable_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pull_enable_reg_t hri_lpmcumiscregsmiscregs_read_PULL_ENABLE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PULL_ENABLE.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_0_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_0_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_0_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_0_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_1_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_1_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_2_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_2_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_2_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_2_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_3_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_3_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_3_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_3_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_4_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_4_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_4_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_4_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_5_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_5_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_5_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_5_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_6_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_6_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_6_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_6_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_7_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_7_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_7_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_7_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_8_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_8_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_8_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_8_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_9_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_9_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_9_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_9_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_10_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_10_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_10_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_10_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_11_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_11_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_11_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_11_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_12_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_12_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_12_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_12_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_13_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_13_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_13_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_13_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_14_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_14_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_14_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_14_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_15_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_15_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_15_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_15_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_16_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_16_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_16_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_16_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_17_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_17_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_17_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_17_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_18_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_18_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_18_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_18_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_19_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_19_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_19_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_19_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_20_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_20_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_20_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_20_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_21_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_21_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_21_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_21_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_22_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_22_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_22_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_22_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_LP_GPIO_23_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Msk) >> LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_LP_GPIO_23_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Msk;
	tmp |= value << LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Pos;
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_LP_GPIO_23_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= LPMCU_MISC_REGS_RTYPE_PAD_0_LP_GPIO_23_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_RTYPE_PAD_0_reg(const void *const                     hw,
                                                                 hri_lpmcu_misc_regs_rtype_pad_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_rtype_pad_0_reg_t
hri_lpmcumiscregsmiscregs_get_RTYPE_PAD_0_reg(const void *const hw, hri_lpmcu_misc_regs_rtype_pad_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_RTYPE_PAD_0_reg(const void *const                     hw,
                                                                   hri_lpmcu_misc_regs_rtype_pad_0_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_RTYPE_PAD_0_reg(const void *const                     hw,
                                                                   hri_lpmcu_misc_regs_rtype_pad_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_RTYPE_PAD_0_reg(const void *const                     hw,
                                                                    hri_lpmcu_misc_regs_rtype_pad_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_rtype_pad_0_reg_t hri_lpmcumiscregsmiscregs_read_RTYPE_PAD_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->RTYPE_PAD_0.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_3_LP_SIP_0_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_3_LP_SIP_0_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_3_LP_SIP_0_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_3_LP_SIP_0_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_3_LP_SIP_0_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_3_LP_SIP_0_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_3_LP_SIP_1_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_3_LP_SIP_1_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_3_LP_SIP_1_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_3_LP_SIP_1_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_3_LP_SIP_1_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_3_LP_SIP_1_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_3_LP_SIP_2_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_3_LP_SIP_2_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_3_LP_SIP_2_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_3_LP_SIP_2_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_3_LP_SIP_2_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_3_LP_SIP_2_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_3_LP_SIP_3_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_3_LP_SIP_3_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_3_LP_SIP_3_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_3_LP_SIP_3_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_3_LP_SIP_3_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_3_LP_SIP_3_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_3_LP_SIP_4_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_3_LP_SIP_4_SEL_bf(const void *const                      hw,
                                                           hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL(mask)) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_3_LP_SIP_4_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL(data);
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_3_LP_SIP_4_SEL_bf(const void *const                      hw,
                                                             hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg &= ~LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_3_LP_SIP_4_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg ^= LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_3_LP_SIP_4_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL_Msk) >> LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_4_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_3_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_PINMUX_SEL_3_reg(const void *const hw, hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PINMUX_SEL_3_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_3_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_3_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PINMUX_SEL_3_reg(const void *const                      hw,
                                                                     hri_lpmcu_misc_regs_pinmux_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pinmux_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_PINMUX_SEL_3_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PINMUX_SEL_3.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_ISHAPE_PAD_3_LP_SIP_0_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_get_ISHAPE_PAD_3_LP_SIP_0_bf(const void *const                      hw,
                                                       hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0(mask)) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ISHAPE_PAD_3_LP_SIP_0_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0_Msk;
	tmp |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0(data);
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ISHAPE_PAD_3_LP_SIP_0_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_ISHAPE_PAD_3_LP_SIP_0_bf(const void *const                      hw,
                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg ^= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_read_ISHAPE_PAD_3_LP_SIP_0_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0_Msk) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_0_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_ISHAPE_PAD_3_LP_SIP_1_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_get_ISHAPE_PAD_3_LP_SIP_1_bf(const void *const                      hw,
                                                       hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1(mask)) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ISHAPE_PAD_3_LP_SIP_1_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1_Msk;
	tmp |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1(data);
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ISHAPE_PAD_3_LP_SIP_1_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_ISHAPE_PAD_3_LP_SIP_1_bf(const void *const                      hw,
                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg ^= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_read_ISHAPE_PAD_3_LP_SIP_1_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1_Msk) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_1_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_ISHAPE_PAD_3_LP_SIP_2_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_get_ISHAPE_PAD_3_LP_SIP_2_bf(const void *const                      hw,
                                                       hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2(mask)) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ISHAPE_PAD_3_LP_SIP_2_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2_Msk;
	tmp |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2(data);
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ISHAPE_PAD_3_LP_SIP_2_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_ISHAPE_PAD_3_LP_SIP_2_bf(const void *const                      hw,
                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg ^= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_read_ISHAPE_PAD_3_LP_SIP_2_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2_Msk) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_2_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_ISHAPE_PAD_3_LP_SIP_3_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_get_ISHAPE_PAD_3_LP_SIP_3_bf(const void *const                      hw,
                                                       hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3(mask)) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ISHAPE_PAD_3_LP_SIP_3_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3_Msk;
	tmp |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3(data);
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ISHAPE_PAD_3_LP_SIP_3_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_ISHAPE_PAD_3_LP_SIP_3_bf(const void *const                      hw,
                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg ^= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_read_ISHAPE_PAD_3_LP_SIP_3_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3_Msk) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_3_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_ISHAPE_PAD_3_LP_SIP_4_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_get_ISHAPE_PAD_3_LP_SIP_4_bf(const void *const                      hw,
                                                       hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4(mask)) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ISHAPE_PAD_3_LP_SIP_4_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4_Msk;
	tmp |= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4(data);
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ISHAPE_PAD_3_LP_SIP_4_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg &= ~LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_ISHAPE_PAD_3_LP_SIP_4_bf(const void *const                      hw,
                                                          hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg ^= LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_read_ISHAPE_PAD_3_LP_SIP_4_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4_Msk) >> LPMCU_MISC_REGS_ISHAPE_PAD_3_LP_SIP_4_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_ISHAPE_PAD_3_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_get_ISHAPE_PAD_3_reg(const void *const hw, hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ISHAPE_PAD_3_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_ishape_pad_3_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ISHAPE_PAD_3_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_ISHAPE_PAD_3_reg(const void *const                      hw,
                                                                     hri_lpmcu_misc_regs_ishape_pad_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ishape_pad_3_reg_t
hri_lpmcumiscregsmiscregs_read_ISHAPE_PAD_3_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->ISHAPE_PAD_3.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_bf(const void *const                      hw,
                                                                          hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE(mask))
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t data)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_Msk;
	tmp |= LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE(data);
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_bf(const void *const                      hw,
                                                                            hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg &= ~LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_bf(
    const void *const hw, hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg ^= LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_CTRL_2_SPI_FLASH0_CLOCK_FRAC_VALUE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_2_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CTRL_2_reg(const void *const hw, hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_2_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_CTRL_2_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_CTRL_2_reg(const void *const                      hw,
                                                                     hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_ctrl_2_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CTRL_2_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_CTRL_2.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_SPIFLASH_VDDIO_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg |= LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_SPIFLASH_VDDIO_CTRL_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Msk) >> LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_SPIFLASH_VDDIO_CTRL_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_SPIFLASH_VDDIO_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg &= ~LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_SPIFLASH_VDDIO_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg ^= LPMCU_MISC_REGS_SPIFLASH_VDDIO_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_SPIFLASH_VDDIO_CTRL_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_SPIFLASH_VDDIO_CTRL_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_SPIFLASH_VDDIO_CTRL_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_SPIFLASH_VDDIO_CTRL_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_SPIFLASH_VDDIO_CTRL_reg(const void *const                             hw,
                                                         hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_spiflash_vddio_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_SPIFLASH_VDDIO_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SPIFLASH_VDDIO_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_SPIFLASH_BYPASS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg |= LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_SPIFLASH_BYPASS_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Msk) >> LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_SPIFLASH_BYPASS_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg;
	tmp &= ~LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_SPIFLASH_BYPASS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg &= ~LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_SPIFLASH_BYPASS_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg ^= LPMCU_MISC_REGS_SPIFLASH_BYPASS_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_SPIFLASH_BYPASS_reg(const void *const                         hw,
                                                                     hri_lpmcu_misc_regs_spiflash_bypass_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_spiflash_bypass_reg_t
hri_lpmcumiscregsmiscregs_get_SPIFLASH_BYPASS_reg(const void *const hw, hri_lpmcu_misc_regs_spiflash_bypass_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_SPIFLASH_BYPASS_reg(const void *const                         hw,
                                                                       hri_lpmcu_misc_regs_spiflash_bypass_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_SPIFLASH_BYPASS_reg(const void *const                         hw,
                                                                       hri_lpmcu_misc_regs_spiflash_bypass_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_SPIFLASH_BYPASS_reg(const void *const                         hw,
                                                                        hri_lpmcu_misc_regs_spiflash_bypass_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_spiflash_bypass_reg_t
hri_lpmcumiscregsmiscregs_read_SPIFLASH_BYPASS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SPIFLASH_BYPASS.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_0_MUX_0_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_0_MUX_0_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_0_MUX_0_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_0_MUX_0_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_0_MUX_0_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_0_MUX_0_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_0_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_0_MUX_1_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_0_MUX_1_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_0_MUX_1_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_0_MUX_1_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_0_MUX_1_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_0_MUX_1_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_1_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_0_MUX_2_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_0_MUX_2_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_0_MUX_2_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_0_MUX_2_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_0_MUX_2_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_0_MUX_2_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_2_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_0_MUX_3_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_0_MUX_3_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_0_MUX_3_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_0_MUX_3_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_0_MUX_3_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_0_MUX_3_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_0_MUX_3_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_0_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_0_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_0_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_0_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_0_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_0.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_1_MUX_4_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_1_MUX_4_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_1_MUX_4_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_1_MUX_4_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_1_MUX_4_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_1_MUX_4_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_4_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_1_MUX_5_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_1_MUX_5_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_1_MUX_5_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_1_MUX_5_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_1_MUX_5_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_1_MUX_5_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_5_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_1_MUX_6_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_1_MUX_6_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_1_MUX_6_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_1_MUX_6_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_1_MUX_6_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_1_MUX_6_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_6_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_1_MUX_7_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_1_MUX_7_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_1_MUX_7_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_1_MUX_7_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_1_MUX_7_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_1_MUX_7_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_1_MUX_7_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_1_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_1_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_1_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_1_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_1_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_1_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_1.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_2_MUX_8_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_2_MUX_8_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_2_MUX_8_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_2_MUX_8_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_2_MUX_8_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_2_MUX_8_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_8_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_2_MUX_9_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_2_MUX_9_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_2_MUX_9_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_2_MUX_9_bf(const void *const                          hw,
                                                          hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_2_MUX_9_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_2_MUX_9_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_9_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_2_MUX_10_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_2_MUX_10_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_2_MUX_10_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_2_MUX_10_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_2_MUX_10_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_2_MUX_10_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_10_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_2_MUX_11_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_2_MUX_11_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_2_MUX_11_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_2_MUX_11_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_2_MUX_11_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_2_MUX_11_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_2_MUX_11_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_2_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_2_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_2_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_2_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_2_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_2_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_2.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_3_MUX_12_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_3_MUX_12_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_3_MUX_12_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_3_MUX_12_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_3_MUX_12_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_3_MUX_12_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_12_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_3_MUX_13_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_3_MUX_13_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_3_MUX_13_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_3_MUX_13_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_3_MUX_13_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_3_MUX_13_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_13_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_3_MUX_14_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_3_MUX_14_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_3_MUX_14_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_3_MUX_14_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_3_MUX_14_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_3_MUX_14_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_14_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_3_MUX_15_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_3_MUX_15_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_3_MUX_15_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_3_MUX_15_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_3_MUX_15_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_3_MUX_15_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_3_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_3_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_3_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_3_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_3_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_3_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_3.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_4_MUX_16_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_4_MUX_16_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_4_MUX_16_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_4_MUX_16_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_4_MUX_16_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_4_MUX_16_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_16_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_4_MUX_17_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_4_MUX_17_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_4_MUX_17_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_4_MUX_17_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_4_MUX_17_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_4_MUX_17_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_17_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_4_MUX_18_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_4_MUX_18_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_4_MUX_18_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_4_MUX_18_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_4_MUX_18_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_4_MUX_18_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_18_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_4_MUX_19_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_4_MUX_19_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_4_MUX_19_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_4_MUX_19_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_4_MUX_19_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_4_MUX_19_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_4_MUX_19_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_4_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_4_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_4_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_4_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_4_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_4_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_4.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_5_MUX_20_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_5_MUX_20_bf(const void *const                          hw,
                                                         hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20(mask)) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_5_MUX_20_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t data)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20_Msk;
	tmp |= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20(data);
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_5_MUX_20_bf(const void *const                          hw,
                                                           hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg &= ~LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_5_MUX_20_bf(const void *const                          hw,
                                                            hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg ^= LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_5_MUX_20_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20_Msk) >> LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_5_MUX_20_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_MUX_IO_SEL_5_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_MUX_IO_SEL_5_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_MUX_IO_SEL_5_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_MUX_IO_SEL_5_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_MUX_IO_SEL_5_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_IRQ_MUX_IO_SEL_5_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_MUX_IO_SEL_5.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_PWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_PWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_OUTPUT_POLARITY_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Pos;
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_AGCDATA_FMT_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Pos;
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_SAMPLE_METHOD_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Pos;
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_PWM_PERIOD_bf(const void *const hw, hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD(mask)) >> LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm0_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD_Msk;
	tmp |= LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD(data);
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM0_CTRL_PWM_PERIOD_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_AGCDATA_IN_bf(const void *const hw, hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN(mask)) >> LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm0_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN_Msk;
	tmp |= LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN(data);
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM0_CTRL_AGCDATA_IN_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                        hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_CLOCK_SEL_bf(const void *const hw, hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm0_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM0_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM0_CTRL_reg(const void *const                   hw,
                                                               hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM0_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM0_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm0_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM0_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM0_CTRL_reg(const void *const                   hw,
                                                                  hri_lpmcu_misc_regs_pwm0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm0_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_PWM0_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PWM0_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_PWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_PWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_OUTPUT_POLARITY_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Pos;
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_AGCDATA_FMT_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Pos;
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_SAMPLE_METHOD_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Pos;
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_PWM_PERIOD_bf(const void *const hw, hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD(mask)) >> LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm1_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD_Msk;
	tmp |= LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD(data);
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM1_CTRL_PWM_PERIOD_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_AGCDATA_IN_bf(const void *const hw, hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN(mask)) >> LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm1_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN_Msk;
	tmp |= LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN(data);
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM1_CTRL_AGCDATA_IN_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                        hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_CLOCK_SEL_bf(const void *const hw, hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm1_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM1_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM1_CTRL_reg(const void *const                   hw,
                                                               hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM1_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM1_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm1_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM1_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM1_CTRL_reg(const void *const                   hw,
                                                                  hri_lpmcu_misc_regs_pwm1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm1_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_PWM1_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PWM1_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_PWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_PWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_OUTPUT_POLARITY_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Pos;
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_AGCDATA_FMT_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Pos;
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_SAMPLE_METHOD_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Pos;
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_PWM_PERIOD_bf(const void *const hw, hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD(mask)) >> LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm2_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD_Msk;
	tmp |= LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD(data);
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM2_CTRL_PWM_PERIOD_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_AGCDATA_IN_bf(const void *const hw, hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN(mask)) >> LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm2_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN_Msk;
	tmp |= LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN(data);
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM2_CTRL_AGCDATA_IN_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                        hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_CLOCK_SEL_bf(const void *const hw, hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm2_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM2_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM2_CTRL_reg(const void *const                   hw,
                                                               hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM2_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM2_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm2_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM2_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM2_CTRL_reg(const void *const                   hw,
                                                                  hri_lpmcu_misc_regs_pwm2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm2_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_PWM2_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PWM2_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_PWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_PWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_PWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_PWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_OUTPUT_POLARITY_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Pos;
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_OUTPUT_POLARITY_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_OUTPUT_POLARITY_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_AGCDATA_FMT_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Pos;
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_AGCDATA_FMT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_FMT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_SAMPLE_METHOD_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Msk;
	tmp |= value << LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Pos;
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_SAMPLE_METHOD_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_SAMPLE_METHOD_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_PWM_PERIOD_bf(const void *const hw, hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD(mask)) >> LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm3_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD_Msk;
	tmp |= LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD(data);
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_PWM_PERIOD_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM3_CTRL_PWM_PERIOD_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_PWM_PERIOD_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                         hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_AGCDATA_IN_bf(const void *const hw, hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN(mask)) >> LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm3_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN_Msk;
	tmp |= LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN(data);
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_AGCDATA_IN_bf(const void *const                   hw,
                                                                            hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM3_CTRL_AGCDATA_IN_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_AGCDATA_IN_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                        hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_CLOCK_SEL_bf(const void *const hw, hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm3_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                          hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_CLOCK_SEL_bf(const void *const                   hw,
                                                                           hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_PWM3_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PWM3_CTRL_reg(const void *const                   hw,
                                                               hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_PWM3_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_PWM3_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm3_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PWM3_CTRL_reg(const void *const                   hw,
                                                                 hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_PWM3_CTRL_reg(const void *const                   hw,
                                                                  hri_lpmcu_misc_regs_pwm3_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_pwm3_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_PWM3_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PWM3_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_DUALTIMER0_CTRL_CNTR_1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_DUALTIMER0_CTRL_CNTR_1_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_DUALTIMER0_CTRL_CNTR_1_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_DUALTIMER0_CTRL_CNTR_1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg &= ~LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_DUALTIMER0_CTRL_CNTR_1_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg ^= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_DUALTIMER0_CTRL_CNTR_2_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_DUALTIMER0_CTRL_CNTR_2_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Msk)
	      >> LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_DUALTIMER0_CTRL_CNTR_2_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_DUALTIMER0_CTRL_CNTR_2_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg &= ~LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_DUALTIMER0_CTRL_CNTR_2_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg ^= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_DUALTIMER0_CTRL_reg(const void *const                         hw,
                                                                     hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_DUALTIMER0_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_DUALTIMER0_CTRL_reg(const void *const                         hw,
                                                                       hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_DUALTIMER0_CTRL_reg(const void *const                         hw,
                                                                       hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_DUALTIMER0_CTRL_reg(const void *const                         hw,
                                                                        hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_dualtimer0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_DUALTIMER0_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->DUALTIMER0_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg |= LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Msk)
	      >> LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Msk;
	tmp |= value << LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Pos;
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg &= ~LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg ^= LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_SLEEP_1_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg |= LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Msk) >> LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Msk;
	tmp |= value << LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Pos;
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg &= ~LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg ^= LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_WAKEUP_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg |= LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Msk)
	      >> LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_bit(const void *const hw,
                                                                                         bool              value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Msk;
	tmp |= value << LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Pos;
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg &= ~LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg ^= LPMCU_MISC_REGS_ARM_SLEEP_WAKEUP_CTRL_RXTX_WAKEUP_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_ARM_SLEEP_WAKEUP_CTRL_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_ARM_SLEEP_WAKEUP_CTRL_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_ARM_SLEEP_WAKEUP_CTRL_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_ARM_SLEEP_WAKEUP_CTRL_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_ARM_SLEEP_WAKEUP_CTRL_reg(const void *const                               hw,
                                                           hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_arm_sleep_wakeup_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_ARM_SLEEP_WAKEUP_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->ARM_SLEEP_WAKEUP_CTRL.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_LP_GPIO_0_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_0_LP_GPIO_0_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_0_LP_GPIO_0_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_LP_GPIO_0_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_0_LP_GPIO_0_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_0_LP_GPIO_0_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_0_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_LP_GPIO_1_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_0_LP_GPIO_1_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_0_LP_GPIO_1_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_LP_GPIO_1_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_0_LP_GPIO_1_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_0_LP_GPIO_1_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_1_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_LP_GPIO_2_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_0_LP_GPIO_2_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_0_LP_GPIO_2_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_LP_GPIO_2_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_0_LP_GPIO_2_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_0_LP_GPIO_2_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_2_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_LP_GPIO_3_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_0_LP_GPIO_3_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_0_LP_GPIO_3_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_LP_GPIO_3_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_0_LP_GPIO_3_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_0_LP_GPIO_3_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_0_LP_GPIO_3_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_LP_GPIO_4_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_1_LP_GPIO_4_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_1_LP_GPIO_4_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_LP_GPIO_4_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_1_LP_GPIO_4_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_1_LP_GPIO_4_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_4_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_LP_GPIO_5_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_1_LP_GPIO_5_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_1_LP_GPIO_5_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_LP_GPIO_5_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_1_LP_GPIO_5_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_1_LP_GPIO_5_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_5_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_LP_GPIO_6_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_1_LP_GPIO_6_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_1_LP_GPIO_6_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_LP_GPIO_6_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_1_LP_GPIO_6_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_1_LP_GPIO_6_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_6_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_LP_GPIO_7_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_1_LP_GPIO_7_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_1_LP_GPIO_7_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_LP_GPIO_7_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_1_LP_GPIO_7_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_1_LP_GPIO_7_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_1_LP_GPIO_7_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_1_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_LP_GPIO_8_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_2_LP_GPIO_8_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_2_LP_GPIO_8_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_LP_GPIO_8_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_2_LP_GPIO_8_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_2_LP_GPIO_8_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_8_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_LP_GPIO_9_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_2_LP_GPIO_9_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9(mask)) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_2_LP_GPIO_9_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_LP_GPIO_9_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_2_LP_GPIO_9_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_2_LP_GPIO_9_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_9_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_LP_GPIO_10_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_2_LP_GPIO_10_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_2_LP_GPIO_10_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_LP_GPIO_10_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_2_LP_GPIO_10_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_2_LP_GPIO_10_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_10_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_LP_GPIO_11_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_2_LP_GPIO_11_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_2_LP_GPIO_11_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_LP_GPIO_11_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_2_LP_GPIO_11_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_2_LP_GPIO_11_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_2_LP_GPIO_11_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_2_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_LP_GPIO_12_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_3_LP_GPIO_12_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_3_LP_GPIO_12_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_LP_GPIO_12_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_3_LP_GPIO_12_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_3_LP_GPIO_12_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_12_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_LP_GPIO_13_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_3_LP_GPIO_13_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_3_LP_GPIO_13_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_LP_GPIO_13_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_3_LP_GPIO_13_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_3_LP_GPIO_13_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_13_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_LP_GPIO_14_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_3_LP_GPIO_14_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_3_LP_GPIO_14_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_LP_GPIO_14_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_3_LP_GPIO_14_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_3_LP_GPIO_14_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_14_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_LP_GPIO_15_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_3_LP_GPIO_15_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_3_LP_GPIO_15_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_LP_GPIO_15_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_3_LP_GPIO_15_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_3_LP_GPIO_15_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_3_LP_GPIO_15_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_3_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_LP_GPIO_16_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_4_LP_GPIO_16_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_4_LP_GPIO_16_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_LP_GPIO_16_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_4_LP_GPIO_16_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_4_LP_GPIO_16_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_16_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_LP_GPIO_17_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_4_LP_GPIO_17_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_4_LP_GPIO_17_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_LP_GPIO_17_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_4_LP_GPIO_17_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_4_LP_GPIO_17_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_17_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_LP_GPIO_18_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_4_LP_GPIO_18_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_4_LP_GPIO_18_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_LP_GPIO_18_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_4_LP_GPIO_18_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_4_LP_GPIO_18_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_18_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_LP_GPIO_19_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_4_LP_GPIO_19_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_4_LP_GPIO_19_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_LP_GPIO_19_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_4_LP_GPIO_19_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_4_LP_GPIO_19_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_4_LP_GPIO_19_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_4_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_LP_GPIO_20_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_5_LP_GPIO_20_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_5_LP_GPIO_20_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_LP_GPIO_20_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_5_LP_GPIO_20_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_5_LP_GPIO_20_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_20_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_LP_GPIO_21_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_5_LP_GPIO_21_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_5_LP_GPIO_21_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_LP_GPIO_21_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_5_LP_GPIO_21_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_5_LP_GPIO_21_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_21_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_LP_GPIO_22_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_5_LP_GPIO_22_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_5_LP_GPIO_22_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_LP_GPIO_22_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_5_LP_GPIO_22_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_5_LP_GPIO_22_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_22_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_LP_GPIO_23_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_5_LP_GPIO_23_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23(mask))
	      >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_5_LP_GPIO_23_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23_Msk;
	tmp |= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23(data);
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_LP_GPIO_23_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg &= ~LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_5_LP_GPIO_23_bf(const void *const                           hw,
                                                                 hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg ^= LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_5_LP_GPIO_23_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23_Msk) >> LPMCU_MISC_REGS_MEGA_MUX_IO_SEL_5_LP_GPIO_23_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_get_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t
hri_lpmcumiscregsmiscregs_read_MEGA_MUX_IO_SEL_5_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_SENS_ADC_CLK_CTRL_INVERT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg |= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_SENS_ADC_CLK_CTRL_INVERT_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Msk) >> LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_SENS_ADC_CLK_CTRL_INVERT_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Msk;
	tmp |= value << LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Pos;
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_SENS_ADC_CLK_CTRL_INVERT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg &= ~LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_SENS_ADC_CLK_CTRL_INVERT_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg ^= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INVERT_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_SENS_ADC_CLK_CTRL_FRAC_PART_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg |= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CLK_CTRL_FRAC_PART_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART(mask)) >> LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_SENS_ADC_CLK_CTRL_FRAC_PART_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART_Msk;
	tmp |= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART(data);
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_SENS_ADC_CLK_CTRL_FRAC_PART_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg &= ~LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_SENS_ADC_CLK_CTRL_FRAC_PART_bf(const void *const                           hw,
                                                                hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg ^= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CLK_CTRL_FRAC_PART_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART_Msk) >> LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_FRAC_PART_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_SENS_ADC_CLK_CTRL_INT_PART_bf(const void *const                           hw,
                                                            hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg |= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CLK_CTRL_INT_PART_bf(const void *const                           hw,
                                                            hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART(mask)) >> LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_SENS_ADC_CLK_CTRL_INT_PART_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART_Msk;
	tmp |= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART(data);
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_SENS_ADC_CLK_CTRL_INT_PART_bf(const void *const                           hw,
                                                              hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg &= ~LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_SENS_ADC_CLK_CTRL_INT_PART_bf(const void *const                           hw,
                                                               hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg ^= LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CLK_CTRL_INT_PART_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART_Msk) >> LPMCU_MISC_REGS_SENS_ADC_CLK_CTRL_INT_PART_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_SENS_ADC_CLK_CTRL_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CLK_CTRL_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_SENS_ADC_CLK_CTRL_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_SENS_ADC_CLK_CTRL_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_SENS_ADC_CLK_CTRL_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_sens_adc_clk_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CLK_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SENS_ADC_CLK_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_OSC_EN_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_bit(const void *const hw,
                                                                                          bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_WAKEUP_LP_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_bit(const void *const hw,
                                                                                                   bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_LP_OUT_OF_RESET_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool
hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Pos;
	return (bool)tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_BLE_LVL_BLE_CORE_OUT_OF_RESET_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_bit(const void *const hw,
                                                                                                  bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Msk)
	      >> LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_bit(const void *const hw,
                                                                                                   bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Msk;
	tmp |= value << LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Pos;
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= LPMCU_MISC_REGS_IRQ_CTRL_RXTX_LVL_RXTX_SEQ_IN_SLEEP_IRQ_CLR_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_IRQ_CTRL_reg(const void *const                  hw,
                                                              hri_lpmcu_misc_regs_irq_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_irq_ctrl_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_IRQ_CTRL_reg(const void *const                  hw,
                                                                hri_lpmcu_misc_regs_irq_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_IRQ_CTRL_reg(const void *const                  hw,
                                                                hri_lpmcu_misc_regs_irq_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_IRQ_CTRL_reg(const void *const                  hw,
                                                                 hri_lpmcu_misc_regs_irq_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_irq_ctrl_reg_t hri_lpmcumiscregsmiscregs_read_IRQ_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2A_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD2B_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3A_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3B_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD3C_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Msk) >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Msk) >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD5_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Msk)
	      >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RWM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Msk) >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_WM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_bit(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Msk) >> LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Pos;
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= LPMCU_MISC_REGS_MSEMI_MEM_CTRL_PD8_MEM_RM_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MSEMI_MEM_CTRL_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_MSEMI_MEM_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MSEMI_MEM_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MSEMI_MEM_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MSEMI_MEM_CTRL_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_msemi_mem_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_MSEMI_MEM_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MSEMI_MEM_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_SCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_SCLK_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_SCLK_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_SCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_SCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_SCLK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_SCLK_VAL_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_SCLK_VAL_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_SCLK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_SCLK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_SCLK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_DCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_DCLK_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_DCLK_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_DCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_DCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_DCLK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_DCLK_VAL_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_DCLK_VAL_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_DCLK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_DCLK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DCLK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_PCLKG_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_PCLKG_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_PCLKG_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_PCLKG_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_PCLKG_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_PCLKG_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_PCLKG_VAL_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_PCLKG_VAL_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_PCLKG_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_PCLKG_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_PCLKG_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_WICENREQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_WICENREQ_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_WICENREQ_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_WICENREQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_WICENREQ_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_WICENREQ_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_WICENREQ_VAL_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_WICENREQ_VAL_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_WICENREQ_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_WICENREQ_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENREQ_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_GPIO_GCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_bit(const void *const hw,
                                                                                         bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_COUNTER_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_bit(const void *const hw,
                                                                                           bool              value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_DUALTIMER_PGCLK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_WICENACK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_WICENACK_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Msk) >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_WICENACK_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_WICENACK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_WICENACK_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_WICENACK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_WICENACK_VAL_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Msk)
	      >> LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_WICENACK_VAL_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Msk;
	tmp |= value << LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Pos;
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_WICENACK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_WICENACK_VAL_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= LPMCU_MISC_REGS_LPMCU_FORCE_CTRL_WICENACK_VAL_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_LPMCU_FORCE_CTRL_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_FORCE_CTRL_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_LPMCU_FORCE_CTRL_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_LPMCU_FORCE_CTRL_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_LPMCU_FORCE_CTRL_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_lpmcu_force_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_FORCE_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_FORCE_CTRL.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg |= LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Msk)
	      >> LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg;
	tmp &= ~LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Pos;
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg &= ~LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg ^= LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_FW_TIMER_CORR_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg |= LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg;
	tmp = (tmp & LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Msk)
	      >> LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_bit(const void *const hw,
                                                                                               bool              value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg;
	tmp &= ~LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Pos;
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg &= ~LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg ^= LPMCU_MISC_REGS_BLE_DEEP_SLEEP_ENABLES_HW_TIMER_CORR_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_BLE_DEEP_SLEEP_ENABLES_reg(const void *const                                hw,
                                                         hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t
hri_lpmcumiscregsmiscregs_get_BLE_DEEP_SLEEP_ENABLES_reg(const void *const                                hw,
                                                         hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_BLE_DEEP_SLEEP_ENABLES_reg(const void *const                                hw,
                                                           hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_BLE_DEEP_SLEEP_ENABLES_reg(const void *const                                hw,
                                                           hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_BLE_DEEP_SLEEP_ENABLES_reg(const void *const                                hw,
                                                            hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ble_deep_sleep_enables_reg_t
hri_lpmcumiscregsmiscregs_read_BLE_DEEP_SLEEP_ENABLES_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->BLE_DEEP_SLEEP_ENABLES.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_DEEP_SLEEP_HW_TIMER_CORR_WAIT_bf(const void *const                                  hw,
                                                               hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg |= LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t
hri_lpmcumiscregsmiscregs_get_DEEP_SLEEP_HW_TIMER_CORR_WAIT_bf(const void *const                                  hw,
                                                               hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT(mask))
	      >> LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_DEEP_SLEEP_HW_TIMER_CORR_WAIT_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp &= ~LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT_Msk;
	tmp |= LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT(data);
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_DEEP_SLEEP_HW_TIMER_CORR_WAIT_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg &= ~LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_DEEP_SLEEP_HW_TIMER_CORR_WAIT_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg ^= LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t
hri_lpmcumiscregsmiscregs_read_DEEP_SLEEP_HW_TIMER_CORR_WAIT_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT_Msk)
	      >> LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_WAIT_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg |= LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t
hri_lpmcumiscregsmiscregs_get_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC(mask))
	      >> LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp &= ~LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_Msk;
	tmp |= LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC(data);
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg &= ~LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_bf(
    const void *const hw, hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg ^= LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t
hri_lpmcumiscregsmiscregs_read_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_Msk)
	      >> LPMCU_MISC_REGS_DEEP_SLEEP_HW_TIMER_CORR_RTC_TOSC_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_DEEP_SLEEP_HW_TIMER_CORR_reg(const void *const                                  hw,
                                                           hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t
hri_lpmcumiscregsmiscregs_get_DEEP_SLEEP_HW_TIMER_CORR_reg(const void *const                                  hw,
                                                           hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_DEEP_SLEEP_HW_TIMER_CORR_reg(const void *const                                  hw,
                                                             hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_DEEP_SLEEP_HW_TIMER_CORR_reg(const void *const                                  hw,
                                                             hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_DEEP_SLEEP_HW_TIMER_CORR_reg(const void *const                                  hw,
                                                              hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_deep_sleep_hw_timer_corr_reg_t
hri_lpmcumiscregsmiscregs_read_DEEP_SLEEP_HW_TIMER_CORR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->DEEP_SLEEP_HW_TIMER_CORR.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg
	    |= LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR(mask))
	      >> LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg;
	tmp &= ~LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_Msk;
	tmp |= LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR(data);
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg
	    &= ~LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg
	    ^= LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_Msk)
	      >> LPMCU_MISC_REGS_REMAP_IDRAM1_BASE_ADDR_REMAP_IDRAM1_BASE_ADDR_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM1_BASE_ADDR_reg(const void *const                                hw,
                                                         hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM1_BASE_ADDR_reg(const void *const                                hw,
                                                         hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM1_BASE_ADDR_reg(const void *const                                hw,
                                                           hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM1_BASE_ADDR_reg(const void *const                                hw,
                                                           hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM1_BASE_ADDR_reg(const void *const                                hw,
                                                            hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_base_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM1_BASE_ADDR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_BASE_ADDR.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg
	    |= LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR(mask))
	      >> LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg;
	tmp &= ~LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_Msk;
	tmp |= LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR(data);
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg
	    &= ~LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg
	    ^= LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_Msk)
	      >> LPMCU_MISC_REGS_REMAP_IDRAM1_END_ADDR_REMAP_IDRAM1_END_ADDR_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM1_END_ADDR_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM1_END_ADDR_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM1_END_ADDR_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM1_END_ADDR_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM1_END_ADDR_reg(const void *const                               hw,
                                                           hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram1_end_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM1_END_ADDR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->REMAP_IDRAM1_END_ADDR.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg
	    |= LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR(mask))
	      >> LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg;
	tmp &= ~LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_Msk;
	tmp |= LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR(data);
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg
	    &= ~LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg
	    ^= LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_Msk)
	      >> LPMCU_MISC_REGS_REMAP_IDRAM2_BASE_ADDR_REMAP_IDRAM2_BASE_ADDR_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM2_BASE_ADDR_reg(const void *const                                hw,
                                                         hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM2_BASE_ADDR_reg(const void *const                                hw,
                                                         hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM2_BASE_ADDR_reg(const void *const                                hw,
                                                           hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM2_BASE_ADDR_reg(const void *const                                hw,
                                                           hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM2_BASE_ADDR_reg(const void *const                                hw,
                                                            hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_base_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM2_BASE_ADDR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_BASE_ADDR.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg
	    |= LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR(mask))
	      >> LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg;
	tmp &= ~LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_Msk;
	tmp |= LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR(data);
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg
	    &= ~LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg
	    ^= LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_Msk)
	      >> LPMCU_MISC_REGS_REMAP_IDRAM2_END_ADDR_REMAP_IDRAM2_END_ADDR_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_REMAP_IDRAM2_END_ADDR_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_IDRAM2_END_ADDR_reg(const void *const                               hw,
                                                        hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_REMAP_IDRAM2_END_ADDR_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_REMAP_IDRAM2_END_ADDR_reg(const void *const                               hw,
                                                          hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_REMAP_IDRAM2_END_ADDR_reg(const void *const                               hw,
                                                           hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_idram2_end_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_IDRAM2_END_ADDR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->REMAP_IDRAM2_END_ADDR.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg |= LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR(mask))
	      >> LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg;
	tmp &= ~LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_Msk;
	tmp |= LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR(data);
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg &= ~LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg ^= LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_Msk)
	      >> LPMCU_MISC_REGS_REMAP_BOOT_BASE_ADDR_REMAP_BOOT_BASE_ADDR_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_REMAP_BOOT_BASE_ADDR_reg(const void *const                              hw,
                                                       hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_BOOT_BASE_ADDR_reg(const void *const                              hw,
                                                       hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_REMAP_BOOT_BASE_ADDR_reg(const void *const                              hw,
                                                         hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_REMAP_BOOT_BASE_ADDR_reg(const void *const                              hw,
                                                         hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_REMAP_BOOT_BASE_ADDR_reg(const void *const                              hw,
                                                          hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_base_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_BOOT_BASE_ADDR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->REMAP_BOOT_BASE_ADDR.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg |= LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR(mask))
	      >> LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg;
	tmp &= ~LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_Msk;
	tmp |= LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR(data);
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg &= ~LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_bf(
    const void *const hw, hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg ^= LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg;
	tmp = (tmp & LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_Msk)
	      >> LPMCU_MISC_REGS_REMAP_BOOT_END_ADDR_REMAP_BOOT_END_ADDR_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_REMAP_BOOT_END_ADDR_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t
hri_lpmcumiscregsmiscregs_get_REMAP_BOOT_END_ADDR_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_REMAP_BOOT_END_ADDR_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_REMAP_BOOT_END_ADDR_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_REMAP_BOOT_END_ADDR_reg(const void *const                             hw,
                                                         hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_remap_boot_end_addr_reg_t
hri_lpmcumiscregsmiscregs_read_REMAP_BOOT_END_ADDR_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->REMAP_BOOT_END_ADDR.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg |= LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER(mask)) >> LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg &= ~LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                              hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg ^= LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_THRESHOLD_UPPER_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER_Msk) >> LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_UPPER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg |= LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER(mask)) >> LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg &= ~LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                              hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg ^= LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_THRESHOLD_LOWER_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER_Msk) >> LPMCU_MISC_REGS_QUAD_DEC0_THRESHOLD_LOWER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_THRESHOLD_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_THRESHOLD_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_THRESHOLD_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_THRESHOLD_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_THRESHOLD_reg(const void *const                             hw,
                                                         hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_THRESHOLD_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC0_THRESHOLD.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_CTRL_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Msk) >> LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_CTRL_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_CTRL_CLR_IRQ_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Msk) >> LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_CTRL_CLR_IRQ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Msk;
	tmp |= value << LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Pos;
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                          hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                          hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                            hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t data)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                            hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                             hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC0_CTRL_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC0_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC0_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC0_CTRL_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec0_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC0_CTRL.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg |= LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER(mask)) >> LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg &= ~LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                              hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg ^= LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_THRESHOLD_UPPER_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER_Msk) >> LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_UPPER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg |= LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER(mask)) >> LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg &= ~LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                              hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg ^= LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_THRESHOLD_LOWER_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER_Msk) >> LPMCU_MISC_REGS_QUAD_DEC1_THRESHOLD_LOWER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_THRESHOLD_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_THRESHOLD_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_THRESHOLD_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_THRESHOLD_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_THRESHOLD_reg(const void *const                             hw,
                                                         hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_THRESHOLD_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC1_THRESHOLD.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_CTRL_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Msk) >> LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_CTRL_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_CTRL_CLR_IRQ_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Msk) >> LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_CTRL_CLR_IRQ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Msk;
	tmp |= value << LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Pos;
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                          hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                          hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                            hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t data)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                            hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                             hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC1_CTRL_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC1_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC1_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC1_CTRL_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec1_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC1_CTRL.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg |= LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER(mask)) >> LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg &= ~LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_THRESHOLD_UPPER_bf(const void *const                             hw,
                                                              hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg ^= LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_THRESHOLD_UPPER_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER_Msk) >> LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_UPPER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg |= LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                           hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER(mask)) >> LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg &= ~LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_THRESHOLD_LOWER_bf(const void *const                             hw,
                                                              hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg ^= LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_THRESHOLD_LOWER_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER_Msk) >> LPMCU_MISC_REGS_QUAD_DEC2_THRESHOLD_LOWER_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_THRESHOLD_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_THRESHOLD_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_THRESHOLD_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_THRESHOLD_reg(const void *const                             hw,
                                                        hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_THRESHOLD_reg(const void *const                             hw,
                                                         hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_threshold_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_THRESHOLD_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC2_THRESHOLD.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_CTRL_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Msk) >> LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_CTRL_ENABLE_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Msk;
	tmp |= value << LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Pos;
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_CTRL_ENABLE_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_ENABLE_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_CTRL_CLR_IRQ_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Msk) >> LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_CTRL_CLR_IRQ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Msk;
	tmp |= value << LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Pos;
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_CTRL_CLR_IRQ_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLR_IRQ_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                          hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg |= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                          hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL(mask)) >> LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                            hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t data)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp &= ~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL_Msk;
	tmp |= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL(data);
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                            hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg &= ~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_CTRL_CLOCK_SEL_bf(const void *const                        hw,
                                                             hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg ^= LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_CTRL_CLOCK_SEL_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp = (tmp & LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL_Msk) >> LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_QUAD_DEC2_CTRL_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_CTRL_reg(const void *const hw, hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_QUAD_DEC2_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_QUAD_DEC2_CTRL_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_QUAD_DEC2_CTRL_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_quad_dec2_ctrl_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_CTRL_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC2_CTRL.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP0_COMP_FP_COMP0_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg |= LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP0_COMP_FP_COMP0_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP0_COMP_FP_COMP0_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp0_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP0_COMP_FP_COMP0_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP0_COMP_FP_COMP0_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP0_COMP_FP_COMP0_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP0_COMP_FP_COMP0_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP0_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP0_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP0_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp0_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP0_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP0_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp0_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP0_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP0_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP1_COMP_FP_COMP1_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg |= LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP1_COMP_FP_COMP1_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP1_COMP_FP_COMP1_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp1_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP1_COMP_FP_COMP1_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP1_COMP_FP_COMP1_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP1_COMP_FP_COMP1_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP1_COMP_FP_COMP1_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP1_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP1_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP1_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp1_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP1_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP1_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp1_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP1_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP1_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP2_COMP_FP_COMP2_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg |= LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP2_COMP_FP_COMP2_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP2_COMP_FP_COMP2_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp2_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP2_COMP_FP_COMP2_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP2_COMP_FP_COMP2_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP2_COMP_FP_COMP2_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP2_COMP_FP_COMP2_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP2_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP2_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP2_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp2_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP2_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP2_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp2_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP2_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP2_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP3_COMP_FP_COMP3_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg |= LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP3_COMP_FP_COMP3_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP3_COMP_FP_COMP3_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp3_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP3_COMP_FP_COMP3_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP3_COMP_FP_COMP3_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP3_COMP_FP_COMP3_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP3_COMP_FP_COMP3_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP3_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP3_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP3_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp3_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP3_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP3_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp3_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP3_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP3_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP4_COMP_FP_COMP4_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg |= LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP4_COMP_FP_COMP4_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP4_COMP_FP_COMP4_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp4_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP4_COMP_FP_COMP4_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP4_COMP_FP_COMP4_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP4_COMP_FP_COMP4_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP4_COMP_FP_COMP4_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP4_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP4_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP4_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp4_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP4_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP4_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp4_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP4_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP4_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP5_COMP_FP_COMP5_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg |= LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP5_COMP_FP_COMP5_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP5_COMP_FP_COMP5_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp5_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP5_COMP_FP_COMP5_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP5_COMP_FP_COMP5_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP5_COMP_FP_COMP5_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP5_COMP_FP_COMP5_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP5_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP5_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP5_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp5_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP5_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP5_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp5_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP5_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP5_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP6_COMP_FP_COMP6_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg |= LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP6_COMP_FP_COMP6_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP6_COMP_FP_COMP6_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp6_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP6_COMP_FP_COMP6_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP6_COMP_FP_COMP6_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP6_COMP_FP_COMP6_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP6_COMP_FP_COMP6_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP6_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP6_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP6_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp6_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP6_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP6_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp6_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP6_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP6_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP7_COMP_FP_COMP7_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg |= LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP7_COMP_FP_COMP7_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP7_COMP_FP_COMP7_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp7_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP7_COMP_FP_COMP7_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP7_COMP_FP_COMP7_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP7_COMP_FP_COMP7_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP7_COMP_FP_COMP7_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP7_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP7_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP7_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp7_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP7_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP7_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp7_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP7_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP7_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP8_COMP_FP_COMP8_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg |= LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP8_COMP_FP_COMP8_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP8_COMP_FP_COMP8_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp8_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP8_COMP_FP_COMP8_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP8_COMP_FP_COMP8_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP8_COMP_FP_COMP8_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP8_COMP_FP_COMP8_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP8_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP8_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP8_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp8_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP8_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP8_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp8_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP8_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP8_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP9_COMP_FP_COMP9_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg |= LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP9_COMP_FP_COMP9_COMP_bf(const void *const                       hw,
                                                             hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP(mask)) >> LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP9_COMP_FP_COMP9_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp9_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP9_COMP_FP_COMP9_COMP_bf(const void *const                       hw,
                                                               hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP9_COMP_FP_COMP9_COMP_bf(const void *const                       hw,
                                                                hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP9_COMP_FP_COMP9_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP_Msk) >> LPMCU_MISC_REGS_FP_COMP9_COMP_FP_COMP9_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP9_COMP_reg(const void *const                       hw,
                                                                   hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP9_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP9_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp9_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP9_COMP_reg(const void *const                       hw,
                                                                     hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP9_COMP_reg(const void *const                       hw,
                                                                      hri_lpmcu_misc_regs_fp_comp9_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP9_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP9_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP10_COMP_FP_COMP10_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg |= LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP10_COMP_FP_COMP10_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP(mask))
	      >> LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP10_COMP_FP_COMP10_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp10_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP10_COMP_FP_COMP10_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP10_COMP_FP_COMP10_COMP_bf(const void *const                        hw,
                                                                  hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP10_COMP_FP_COMP10_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP10_COMP_FP_COMP10_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP10_COMP_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP10_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP10_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp10_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP10_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP10_COMP_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp10_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP10_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP10_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP11_COMP_FP_COMP11_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg |= LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP11_COMP_FP_COMP11_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP(mask))
	      >> LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP11_COMP_FP_COMP11_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp11_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP11_COMP_FP_COMP11_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP11_COMP_FP_COMP11_COMP_bf(const void *const                        hw,
                                                                  hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP11_COMP_FP_COMP11_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP11_COMP_FP_COMP11_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP11_COMP_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP11_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP11_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp11_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP11_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP11_COMP_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp11_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP11_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP11_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP12_COMP_FP_COMP12_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg |= LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP12_COMP_FP_COMP12_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP(mask))
	      >> LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP12_COMP_FP_COMP12_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp12_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP12_COMP_FP_COMP12_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP12_COMP_FP_COMP12_COMP_bf(const void *const                        hw,
                                                                  hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP12_COMP_FP_COMP12_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP12_COMP_FP_COMP12_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP12_COMP_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP12_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP12_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp12_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP12_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP12_COMP_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp12_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP12_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP12_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP13_COMP_FP_COMP13_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg |= LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP13_COMP_FP_COMP13_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP(mask))
	      >> LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP13_COMP_FP_COMP13_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp13_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP13_COMP_FP_COMP13_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP13_COMP_FP_COMP13_COMP_bf(const void *const                        hw,
                                                                  hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP13_COMP_FP_COMP13_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP13_COMP_FP_COMP13_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP13_COMP_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP13_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP13_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp13_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP13_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP13_COMP_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp13_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP13_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP13_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP14_COMP_FP_COMP14_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg |= LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP14_COMP_FP_COMP14_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP(mask))
	      >> LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP14_COMP_FP_COMP14_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp14_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP14_COMP_FP_COMP14_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP14_COMP_FP_COMP14_COMP_bf(const void *const                        hw,
                                                                  hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP14_COMP_FP_COMP14_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP14_COMP_FP_COMP14_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP14_COMP_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP14_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP14_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp14_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP14_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP14_COMP_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp14_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP14_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP14_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP15_COMP_FP_COMP15_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg |= LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP15_COMP_FP_COMP15_COMP_bf(const void *const                        hw,
                                                               hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP(mask))
	      >> LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP15_COMP_FP_COMP15_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp15_comp_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP(data);
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP15_COMP_FP_COMP15_COMP_bf(const void *const                        hw,
                                                                 hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg &= ~LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP15_COMP_FP_COMP15_COMP_bf(const void *const                        hw,
                                                                  hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg ^= LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP15_COMP_FP_COMP15_COMP_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP15_COMP_FP_COMP15_COMP_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP15_COMP_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_comp_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP15_COMP_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP15_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp15_comp_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP15_COMP_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP15_COMP_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp15_comp_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_comp_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP15_COMP_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP15_COMP.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP0_REPLACE_FP_COMP0_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP0_REPLACE_FP_COMP0_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP0_REPLACE_FP_COMP0_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp0_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP0_REPLACE_FP_COMP0_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP0_REPLACE_FP_COMP0_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP0_REPLACE_FP_COMP0_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP0_REPLACE_FP_COMP0_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP0_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP0_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP0_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp0_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP0_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP0_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp0_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp0_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP0_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP0_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP1_REPLACE_FP_COMP1_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP1_REPLACE_FP_COMP1_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP1_REPLACE_FP_COMP1_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp1_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP1_REPLACE_FP_COMP1_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP1_REPLACE_FP_COMP1_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP1_REPLACE_FP_COMP1_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP1_REPLACE_FP_COMP1_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP1_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP1_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP1_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp1_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP1_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP1_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp1_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp1_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP1_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP1_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP2_REPLACE_FP_COMP2_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP2_REPLACE_FP_COMP2_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP2_REPLACE_FP_COMP2_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp2_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP2_REPLACE_FP_COMP2_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP2_REPLACE_FP_COMP2_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP2_REPLACE_FP_COMP2_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP2_REPLACE_FP_COMP2_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP2_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP2_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP2_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp2_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP2_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP2_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp2_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp2_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP2_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP2_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP3_REPLACE_FP_COMP3_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP3_REPLACE_FP_COMP3_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP3_REPLACE_FP_COMP3_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp3_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP3_REPLACE_FP_COMP3_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP3_REPLACE_FP_COMP3_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP3_REPLACE_FP_COMP3_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP3_REPLACE_FP_COMP3_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP3_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP3_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP3_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp3_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP3_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP3_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp3_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp3_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP3_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP3_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP4_REPLACE_FP_COMP4_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP4_REPLACE_FP_COMP4_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP4_REPLACE_FP_COMP4_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp4_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP4_REPLACE_FP_COMP4_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP4_REPLACE_FP_COMP4_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP4_REPLACE_FP_COMP4_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP4_REPLACE_FP_COMP4_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP4_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP4_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP4_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp4_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP4_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP4_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp4_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp4_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP4_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP4_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP5_REPLACE_FP_COMP5_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP5_REPLACE_FP_COMP5_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP5_REPLACE_FP_COMP5_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp5_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP5_REPLACE_FP_COMP5_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP5_REPLACE_FP_COMP5_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP5_REPLACE_FP_COMP5_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP5_REPLACE_FP_COMP5_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP5_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP5_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP5_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp5_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP5_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP5_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp5_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp5_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP5_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP5_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP6_REPLACE_FP_COMP6_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP6_REPLACE_FP_COMP6_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP6_REPLACE_FP_COMP6_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp6_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP6_REPLACE_FP_COMP6_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP6_REPLACE_FP_COMP6_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP6_REPLACE_FP_COMP6_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP6_REPLACE_FP_COMP6_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP6_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP6_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP6_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp6_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP6_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP6_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp6_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp6_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP6_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP6_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP7_REPLACE_FP_COMP7_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP7_REPLACE_FP_COMP7_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP7_REPLACE_FP_COMP7_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp7_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP7_REPLACE_FP_COMP7_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP7_REPLACE_FP_COMP7_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP7_REPLACE_FP_COMP7_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP7_REPLACE_FP_COMP7_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP7_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP7_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP7_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp7_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP7_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP7_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp7_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp7_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP7_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP7_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP8_REPLACE_FP_COMP8_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP8_REPLACE_FP_COMP8_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP8_REPLACE_FP_COMP8_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp8_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP8_REPLACE_FP_COMP8_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP8_REPLACE_FP_COMP8_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP8_REPLACE_FP_COMP8_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP8_REPLACE_FP_COMP8_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP8_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP8_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP8_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp8_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP8_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP8_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp8_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp8_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP8_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP8_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP9_REPLACE_FP_COMP9_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP9_REPLACE_FP_COMP9_REPLACE_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP9_REPLACE_FP_COMP9_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp9_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP9_REPLACE_FP_COMP9_REPLACE_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP9_REPLACE_FP_COMP9_REPLACE_bf(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP9_REPLACE_FP_COMP9_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP9_REPLACE_FP_COMP9_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP9_REPLACE_reg(const void *const                          hw,
                                                                      hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP9_REPLACE_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP9_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp9_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP9_REPLACE_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP9_REPLACE_reg(const void *const                          hw,
                                                      hri_lpmcu_misc_regs_fp_comp9_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp9_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP9_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP9_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP10_REPLACE_FP_COMP10_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP10_REPLACE_FP_COMP10_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP10_REPLACE_FP_COMP10_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp10_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP10_REPLACE_FP_COMP10_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP10_REPLACE_FP_COMP10_REPLACE_bf(
    const void *const hw, hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP10_REPLACE_FP_COMP10_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP10_REPLACE_FP_COMP10_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP10_REPLACE_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP10_REPLACE_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP10_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp10_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP10_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP10_REPLACE_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_fp_comp10_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp10_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP10_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP10_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP11_REPLACE_FP_COMP11_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP11_REPLACE_FP_COMP11_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP11_REPLACE_FP_COMP11_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp11_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP11_REPLACE_FP_COMP11_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP11_REPLACE_FP_COMP11_REPLACE_bf(
    const void *const hw, hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP11_REPLACE_FP_COMP11_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP11_REPLACE_FP_COMP11_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP11_REPLACE_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP11_REPLACE_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP11_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp11_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP11_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP11_REPLACE_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_fp_comp11_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp11_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP11_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP11_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP12_REPLACE_FP_COMP12_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP12_REPLACE_FP_COMP12_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP12_REPLACE_FP_COMP12_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp12_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP12_REPLACE_FP_COMP12_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP12_REPLACE_FP_COMP12_REPLACE_bf(
    const void *const hw, hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP12_REPLACE_FP_COMP12_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP12_REPLACE_FP_COMP12_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP12_REPLACE_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP12_REPLACE_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP12_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp12_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP12_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP12_REPLACE_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_fp_comp12_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp12_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP12_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP12_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP13_REPLACE_FP_COMP13_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP13_REPLACE_FP_COMP13_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP13_REPLACE_FP_COMP13_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp13_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP13_REPLACE_FP_COMP13_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP13_REPLACE_FP_COMP13_REPLACE_bf(
    const void *const hw, hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP13_REPLACE_FP_COMP13_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP13_REPLACE_FP_COMP13_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP13_REPLACE_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP13_REPLACE_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP13_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp13_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP13_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP13_REPLACE_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_fp_comp13_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp13_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP13_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP13_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP14_REPLACE_FP_COMP14_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP14_REPLACE_FP_COMP14_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP14_REPLACE_FP_COMP14_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp14_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP14_REPLACE_FP_COMP14_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP14_REPLACE_FP_COMP14_REPLACE_bf(
    const void *const hw, hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP14_REPLACE_FP_COMP14_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP14_REPLACE_FP_COMP14_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP14_REPLACE_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP14_REPLACE_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP14_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp14_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP14_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP14_REPLACE_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_fp_comp14_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp14_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP14_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP14_REPLACE.reg;
}

static inline void
hri_lpmcumiscregsmiscregs_set_FP_COMP15_REPLACE_FP_COMP15_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg |= LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP15_REPLACE_FP_COMP15_REPLACE_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE(mask))
	      >> LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE_Pos;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP15_REPLACE_FP_COMP15_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp15_replace_reg_t data)
{
	uint32_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE_Msk;
	tmp |= LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE(data);
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP15_REPLACE_FP_COMP15_REPLACE_bf(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg &= ~LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP15_REPLACE_FP_COMP15_REPLACE_bf(
    const void *const hw, hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg ^= LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP15_REPLACE_FP_COMP15_REPLACE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE_Msk)
	      >> LPMCU_MISC_REGS_FP_COMP15_REPLACE_FP_COMP15_REPLACE_Pos;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP15_REPLACE_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_replace_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP15_REPLACE_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg;
	tmp &= mask;
	return tmp;
}

static inline void
hri_lpmcumiscregsmiscregs_write_FP_COMP15_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp15_replace_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_clear_FP_COMP15_REPLACE_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void
hri_lpmcumiscregsmiscregs_toggle_FP_COMP15_REPLACE_reg(const void *const                           hw,
                                                       hri_lpmcu_misc_regs_fp_comp15_replace_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp15_replace_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP15_REPLACE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP15_REPLACE.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_0_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_0_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_0_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_0_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_0_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_0_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_1_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_1_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_1_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_1_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_1_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_1_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_2_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_2_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_2_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_2_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_2_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_2_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_3_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_3_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_3_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_3_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_3_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_3_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_4_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_4_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_4_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_4_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_4_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_4_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_5_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_5_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_5_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_5_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_5_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_5_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_6_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_6_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_6_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_6_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_6_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_6_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_7_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_7_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_7_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_7_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_7_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_7_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_8_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_8_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_8_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_8_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_8_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_8_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_9_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_9_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_9_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_9_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_9_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_9_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_10_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_10_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_10_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_10_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_10_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_10_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_11_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_11_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_11_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_11_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_11_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_11_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_12_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_12_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_12_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_12_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_12_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_12_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_13_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_13_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_13_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_13_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_13_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_13_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_14_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_14_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_14_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_14_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_14_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_14_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_CMP_15_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_CMP_15_EN_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp = (tmp & LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Msk) >> LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_CMP_15_EN_bit(const void *const hw, bool value)
{
	uint16_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Msk;
	tmp |= value << LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Pos;
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_CMP_15_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_CMP_15_EN_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= LPMCU_MISC_REGS_FP_COMP_ENABLE_CMP_15_EN_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_FP_COMP_ENABLE_reg(const void *const                        hw,
                                                                    hri_lpmcu_misc_regs_fp_comp_enable_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp_enable_reg_t
hri_lpmcumiscregsmiscregs_get_FP_COMP_ENABLE_reg(const void *const hw, hri_lpmcu_misc_regs_fp_comp_enable_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_FP_COMP_ENABLE_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp_enable_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_FP_COMP_ENABLE_reg(const void *const                        hw,
                                                                      hri_lpmcu_misc_regs_fp_comp_enable_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_FP_COMP_ENABLE_reg(const void *const                        hw,
                                                                       hri_lpmcu_misc_regs_fp_comp_enable_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_fp_comp_enable_reg_t
hri_lpmcumiscregsmiscregs_read_FP_COMP_ENABLE_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->FP_COMP_ENABLE.reg;
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_TYPE_44_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_TYPE_44_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_TYPE_44_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_TYPE_44_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_TYPE_44_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_44_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_TYPE_45_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_TYPE_45_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_TYPE_45_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_TYPE_45_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_TYPE_45_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_45_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_TYPE_46_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_TYPE_46_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_TYPE_46_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_TYPE_46_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_TYPE_46_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_46_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_TYPE_47_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_TYPE_47_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_TYPE_47_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_TYPE_47_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_TYPE_47_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_TYPE_47_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_ENABLE_44_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_ENABLE_44_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_ENABLE_44_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_ENABLE_44_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_ENABLE_44_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_44_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_ENABLE_45_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_ENABLE_45_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_ENABLE_45_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_ENABLE_45_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_ENABLE_45_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_45_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_ENABLE_46_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_ENABLE_46_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_ENABLE_46_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_ENABLE_46_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_ENABLE_46_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_46_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_PULL_ENABLE_47_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_lpmcumiscregsmiscregs_get_MS_GPIO_PULL_ENABLE_47_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp = (tmp & LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Msk) >> LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Pos;
	return (bool)tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_PULL_ENABLE_47_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Msk;
	tmp |= value << LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Pos;
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = tmp;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_PULL_ENABLE_47_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_PULL_ENABLE_47_bit(const void *const hw)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= LPMCU_MISC_REGS_MS_GPIO_PULL_ENABLE_47_Msk;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_set_MS_GPIO_reg(const void *const                 hw,
                                                             hri_lpmcu_misc_regs_ms_gpio_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg |= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ms_gpio_reg_t
hri_lpmcumiscregsmiscregs_get_MS_GPIO_reg(const void *const hw, hri_lpmcu_misc_regs_ms_gpio_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_write_MS_GPIO_reg(const void *const                 hw,
                                                               hri_lpmcu_misc_regs_ms_gpio_reg_t data)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg = data;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_MS_GPIO_reg(const void *const                 hw,
                                                               hri_lpmcu_misc_regs_ms_gpio_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg &= ~mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_toggle_MS_GPIO_reg(const void *const                 hw,
                                                                hri_lpmcu_misc_regs_ms_gpio_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MS_GPIO.reg ^= mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_ms_gpio_reg_t hri_lpmcumiscregsmiscregs_read_MS_GPIO_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MS_GPIO.reg;
}

static inline hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CHIP_ID_REV_ID_bf(const void *const                       hw,
                                                      hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->LPMCU_CHIP_ID.reg & LPMCU_MISC_REGS_LPMCU_CHIP_ID_REV_ID(mask))
	       >> LPMCU_MISC_REGS_LPMCU_CHIP_ID_REV_ID_Pos;
}

static inline hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CHIP_ID_REV_ID_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->LPMCU_CHIP_ID.reg & LPMCU_MISC_REGS_LPMCU_CHIP_ID_REV_ID_Msk)
	       >> LPMCU_MISC_REGS_LPMCU_CHIP_ID_REV_ID_Pos;
}

static inline hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t
hri_lpmcumiscregsmiscregs_get_LPMCU_CHIP_ID_reg(const void *const hw, hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CHIP_ID.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_lpmcu_chip_id_reg_t
hri_lpmcumiscregsmiscregs_read_LPMCU_CHIP_ID_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->LPMCU_CHIP_ID.reg;
}

static inline bool hri_lpmcumiscregsmiscregs_get_MBIST_STATUS_MBIST_MODE_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_MODE_Msk)
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_MODE_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_STATUS_MBIST_BUS_bf(const void *const                      hw,
                                                        hri_lpmcu_misc_regs_mbist_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BUS(mask))
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BUS_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_STATUS_MBIST_BUS_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BUS_Msk)
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BUS_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_STATUS_MBIST_BLOCK_SEL_bf(const void *const                      hw,
                                                              hri_lpmcu_misc_regs_mbist_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BLOCK_SEL(mask))
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BLOCK_SEL_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_STATUS_MBIST_BLOCK_SEL_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BLOCK_SEL_Msk)
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_BLOCK_SEL_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_STATUS_MBIST_WRAPPER_SEL_bf(const void *const                      hw,
                                                                hri_lpmcu_misc_regs_mbist_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_WRAPPER_SEL(mask))
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_WRAPPER_SEL_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_STATUS_MBIST_WRAPPER_SEL_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg & LPMCU_MISC_REGS_MBIST_STATUS_MBIST_WRAPPER_SEL_Msk)
	       >> LPMCU_MISC_REGS_MBIST_STATUS_MBIST_WRAPPER_SEL_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_STATUS_reg(const void *const hw, hri_lpmcu_misc_regs_mbist_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_mbist_status_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_STATUS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MBIST_STATUS.reg;
}

static inline hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t
hri_lpmcumiscregsmiscregs_get_WP3_MISR_DATAOUT_WP3_MISR_DATAOUT_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->WP3_MISR_DATAOUT.reg & LPMCU_MISC_REGS_WP3_MISR_DATAOUT_WP3_MISR_DATAOUT(mask))
	       >> LPMCU_MISC_REGS_WP3_MISR_DATAOUT_WP3_MISR_DATAOUT_Pos;
}

static inline hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t
hri_lpmcumiscregsmiscregs_read_WP3_MISR_DATAOUT_WP3_MISR_DATAOUT_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->WP3_MISR_DATAOUT.reg & LPMCU_MISC_REGS_WP3_MISR_DATAOUT_WP3_MISR_DATAOUT_Msk)
	       >> LPMCU_MISC_REGS_WP3_MISR_DATAOUT_WP3_MISR_DATAOUT_Pos;
}

static inline hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t
hri_lpmcumiscregsmiscregs_get_WP3_MISR_DATAOUT_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->WP3_MISR_DATAOUT.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_wp3_misr_dataout_reg_t
hri_lpmcumiscregsmiscregs_read_WP3_MISR_DATAOUT_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->WP3_MISR_DATAOUT.reg;
}

static inline hri_lpmcu_misc_regs_mbist_dual_status_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_DUAL_STATUS_MBIST_BUS_bf(const void *const                           hw,
                                                             hri_lpmcu_misc_regs_mbist_dual_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_DUAL_STATUS.reg & LPMCU_MISC_REGS_MBIST_DUAL_STATUS_MBIST_BUS(mask))
	       >> LPMCU_MISC_REGS_MBIST_DUAL_STATUS_MBIST_BUS_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_dual_status_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_DUAL_STATUS_MBIST_BUS_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->MBIST_DUAL_STATUS.reg & LPMCU_MISC_REGS_MBIST_DUAL_STATUS_MBIST_BUS_Msk)
	       >> LPMCU_MISC_REGS_MBIST_DUAL_STATUS_MBIST_BUS_Pos;
}

static inline hri_lpmcu_misc_regs_mbist_dual_status_reg_t
hri_lpmcumiscregsmiscregs_get_MBIST_DUAL_STATUS_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_mbist_dual_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->MBIST_DUAL_STATUS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_mbist_dual_status_reg_t
hri_lpmcumiscregsmiscregs_read_MBIST_DUAL_STATUS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->MBIST_DUAL_STATUS.reg;
}

static inline bool hri_lpmcumiscregsmiscregs_get_SENS_ADC_RAW_STATUS_ADC_DONE_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg & LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_DONE_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_DONE_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_RAW_STATUS_ADC_OUT_bf(const void *const                             hw,
                                                             hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg & LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_OUT(mask))
	       >> LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_OUT_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_RAW_STATUS_ADC_OUT_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg & LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_OUT_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_OUT_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_RAW_STATUS_ADC_CH_bf(const void *const                             hw,
                                                            hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg & LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_CH(mask))
	       >> LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_CH_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_RAW_STATUS_ADC_CH_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg & LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_CH_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_RAW_STATUS_ADC_CH_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_RAW_STATUS_reg(const void *const                             hw,
                                                      hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_sens_adc_raw_status_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_RAW_STATUS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SENS_ADC_RAW_STATUS.reg;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH0_DATA_SENS_ADC_CH0_DATA_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH0_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH0_DATA_SENS_ADC_CH0_DATA(mask))
	       >> LPMCU_MISC_REGS_SENS_ADC_CH0_DATA_SENS_ADC_CH0_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH0_DATA_SENS_ADC_CH0_DATA_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH0_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH0_DATA_SENS_ADC_CH0_DATA_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_CH0_DATA_SENS_ADC_CH0_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH0_DATA_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CH0_DATA.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch0_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH0_DATA_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SENS_ADC_CH0_DATA.reg;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH1_DATA_SENS_ADC_CH1_DATA_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH1_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH1_DATA_SENS_ADC_CH1_DATA(mask))
	       >> LPMCU_MISC_REGS_SENS_ADC_CH1_DATA_SENS_ADC_CH1_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH1_DATA_SENS_ADC_CH1_DATA_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH1_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH1_DATA_SENS_ADC_CH1_DATA_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_CH1_DATA_SENS_ADC_CH1_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH1_DATA_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CH1_DATA.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch1_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH1_DATA_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SENS_ADC_CH1_DATA.reg;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH2_DATA_SENS_ADC_CH2_DATA_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH2_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH2_DATA_SENS_ADC_CH2_DATA(mask))
	       >> LPMCU_MISC_REGS_SENS_ADC_CH2_DATA_SENS_ADC_CH2_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH2_DATA_SENS_ADC_CH2_DATA_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH2_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH2_DATA_SENS_ADC_CH2_DATA_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_CH2_DATA_SENS_ADC_CH2_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH2_DATA_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CH2_DATA.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch2_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH2_DATA_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SENS_ADC_CH2_DATA.reg;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH3_DATA_SENS_ADC_CH3_DATA_bf(const void *const                           hw,
                                                                     hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH3_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH3_DATA_SENS_ADC_CH3_DATA(mask))
	       >> LPMCU_MISC_REGS_SENS_ADC_CH3_DATA_SENS_ADC_CH3_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH3_DATA_SENS_ADC_CH3_DATA_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->SENS_ADC_CH3_DATA.reg & LPMCU_MISC_REGS_SENS_ADC_CH3_DATA_SENS_ADC_CH3_DATA_Msk)
	       >> LPMCU_MISC_REGS_SENS_ADC_CH3_DATA_SENS_ADC_CH3_DATA_Pos;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t
hri_lpmcumiscregsmiscregs_get_SENS_ADC_CH3_DATA_reg(const void *const                           hw,
                                                    hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->SENS_ADC_CH3_DATA.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_sens_adc_ch3_data_reg_t
hri_lpmcumiscregsmiscregs_read_SENS_ADC_CH3_DATA_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->SENS_ADC_CH3_DATA.reg;
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_STS_BLE_OSC_EN_IRQ_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->IRQ_STS.reg & LPMCU_MISC_REGS_IRQ_STS_BLE_OSC_EN_IRQ_Msk)
	       >> LPMCU_MISC_REGS_IRQ_STS_BLE_OSC_EN_IRQ_Pos;
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_STS_BLE_WAKEUP_LP_IRQ_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->IRQ_STS.reg & LPMCU_MISC_REGS_IRQ_STS_BLE_WAKEUP_LP_IRQ_Msk)
	       >> LPMCU_MISC_REGS_IRQ_STS_BLE_WAKEUP_LP_IRQ_Pos;
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_STS_BLE_LP_OUT_OF_RESET_IRQ_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->IRQ_STS.reg & LPMCU_MISC_REGS_IRQ_STS_BLE_LP_OUT_OF_RESET_IRQ_Msk)
	       >> LPMCU_MISC_REGS_IRQ_STS_BLE_LP_OUT_OF_RESET_IRQ_Pos;
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_STS_BLE_CORE_OUT_OF_RESET_IRQ_EN_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->IRQ_STS.reg & LPMCU_MISC_REGS_IRQ_STS_BLE_CORE_OUT_OF_RESET_IRQ_EN_Msk)
	       >> LPMCU_MISC_REGS_IRQ_STS_BLE_CORE_OUT_OF_RESET_IRQ_EN_Pos;
}

static inline bool hri_lpmcumiscregsmiscregs_get_IRQ_STS_EFUSE_OUT_OF_RESET_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->IRQ_STS.reg & LPMCU_MISC_REGS_IRQ_STS_EFUSE_OUT_OF_RESET_Msk)
	       >> LPMCU_MISC_REGS_IRQ_STS_EFUSE_OUT_OF_RESET_Pos;
}

static inline hri_lpmcu_misc_regs_irq_sts_reg_t
hri_lpmcumiscregsmiscregs_get_IRQ_STS_reg(const void *const hw, hri_lpmcu_misc_regs_irq_sts_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->IRQ_STS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_irq_sts_reg_t hri_lpmcumiscregsmiscregs_read_IRQ_STS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->IRQ_STS.reg;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_0_reg_t
hri_lpmcumiscregsmiscregs_get_ARM_IRQ_STATUS_0_ARM_IRQ_STATUS_0_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_arm_irq_status_0_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_0.reg & LPMCU_MISC_REGS_ARM_IRQ_STATUS_0_ARM_IRQ_STATUS_0(mask))
	       >> LPMCU_MISC_REGS_ARM_IRQ_STATUS_0_ARM_IRQ_STATUS_0_Pos;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_0_reg_t
hri_lpmcumiscregsmiscregs_read_ARM_IRQ_STATUS_0_ARM_IRQ_STATUS_0_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_0.reg & LPMCU_MISC_REGS_ARM_IRQ_STATUS_0_ARM_IRQ_STATUS_0_Msk)
	       >> LPMCU_MISC_REGS_ARM_IRQ_STATUS_0_ARM_IRQ_STATUS_0_Pos;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_0_reg_t
hri_lpmcumiscregsmiscregs_get_ARM_IRQ_STATUS_0_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_arm_irq_status_0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_0.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_0_reg_t
hri_lpmcumiscregsmiscregs_read_ARM_IRQ_STATUS_0_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_0.reg;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_1_reg_t
hri_lpmcumiscregsmiscregs_get_ARM_IRQ_STATUS_1_ARM_IRQ_STATUS_1_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_arm_irq_status_1_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_1.reg & LPMCU_MISC_REGS_ARM_IRQ_STATUS_1_ARM_IRQ_STATUS_1(mask))
	       >> LPMCU_MISC_REGS_ARM_IRQ_STATUS_1_ARM_IRQ_STATUS_1_Pos;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_1_reg_t
hri_lpmcumiscregsmiscregs_read_ARM_IRQ_STATUS_1_ARM_IRQ_STATUS_1_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_1.reg & LPMCU_MISC_REGS_ARM_IRQ_STATUS_1_ARM_IRQ_STATUS_1_Msk)
	       >> LPMCU_MISC_REGS_ARM_IRQ_STATUS_1_ARM_IRQ_STATUS_1_Pos;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_1_reg_t
hri_lpmcumiscregsmiscregs_get_ARM_IRQ_STATUS_1_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_arm_irq_status_1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_1.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_arm_irq_status_1_reg_t
hri_lpmcumiscregsmiscregs_read_ARM_IRQ_STATUS_1_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->ARM_IRQ_STATUS_1.reg;
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC_IRQS_QUAD_DEC0_IRQ_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC_IRQS.reg & LPMCU_MISC_REGS_QUAD_DEC_IRQS_QUAD_DEC0_IRQ_Msk)
	       >> LPMCU_MISC_REGS_QUAD_DEC_IRQS_QUAD_DEC0_IRQ_Pos;
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC_IRQS_QUAD_DEC1_IRQ_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC_IRQS.reg & LPMCU_MISC_REGS_QUAD_DEC_IRQS_QUAD_DEC1_IRQ_Msk)
	       >> LPMCU_MISC_REGS_QUAD_DEC_IRQS_QUAD_DEC1_IRQ_Pos;
}

static inline bool hri_lpmcumiscregsmiscregs_get_QUAD_DEC_IRQS_QUAD_DEC2_IRQ_bit(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC_IRQS.reg & LPMCU_MISC_REGS_QUAD_DEC_IRQS_QUAD_DEC2_IRQ_Msk)
	       >> LPMCU_MISC_REGS_QUAD_DEC_IRQS_QUAD_DEC2_IRQ_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec_irqs_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC_IRQS_reg(const void *const hw, hri_lpmcu_misc_regs_quad_dec_irqs_reg_t mask)
{
	uint8_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC_IRQS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_quad_dec_irqs_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC_IRQS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC_IRQS.reg;
}

static inline hri_lpmcu_misc_regs_quad_dec0_status_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_STATUS_COUNT_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_quad_dec0_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC0_STATUS.reg & LPMCU_MISC_REGS_QUAD_DEC0_STATUS_COUNT(mask))
	       >> LPMCU_MISC_REGS_QUAD_DEC0_STATUS_COUNT_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec0_status_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_STATUS_COUNT_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC0_STATUS.reg & LPMCU_MISC_REGS_QUAD_DEC0_STATUS_COUNT_Msk)
	       >> LPMCU_MISC_REGS_QUAD_DEC0_STATUS_COUNT_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec0_status_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC0_STATUS_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_quad_dec0_status_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC0_STATUS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_quad_dec0_status_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC0_STATUS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC0_STATUS.reg;
}

static inline hri_lpmcu_misc_regs_quad_dec1_status_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_STATUS_COUNT_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_quad_dec1_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC1_STATUS.reg & LPMCU_MISC_REGS_QUAD_DEC1_STATUS_COUNT(mask))
	       >> LPMCU_MISC_REGS_QUAD_DEC1_STATUS_COUNT_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec1_status_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_STATUS_COUNT_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC1_STATUS.reg & LPMCU_MISC_REGS_QUAD_DEC1_STATUS_COUNT_Msk)
	       >> LPMCU_MISC_REGS_QUAD_DEC1_STATUS_COUNT_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec1_status_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC1_STATUS_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_quad_dec1_status_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC1_STATUS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_quad_dec1_status_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC1_STATUS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC1_STATUS.reg;
}

static inline hri_lpmcu_misc_regs_quad_dec2_status_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_STATUS_COUNT_bf(const void *const                          hw,
                                                        hri_lpmcu_misc_regs_quad_dec2_status_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC2_STATUS.reg & LPMCU_MISC_REGS_QUAD_DEC2_STATUS_COUNT(mask))
	       >> LPMCU_MISC_REGS_QUAD_DEC2_STATUS_COUNT_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec2_status_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_STATUS_COUNT_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->QUAD_DEC2_STATUS.reg & LPMCU_MISC_REGS_QUAD_DEC2_STATUS_COUNT_Msk)
	       >> LPMCU_MISC_REGS_QUAD_DEC2_STATUS_COUNT_Pos;
}

static inline hri_lpmcu_misc_regs_quad_dec2_status_reg_t
hri_lpmcumiscregsmiscregs_get_QUAD_DEC2_STATUS_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_quad_dec2_status_reg_t mask)
{
	uint16_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->QUAD_DEC2_STATUS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_quad_dec2_status_reg_t
hri_lpmcumiscregsmiscregs_read_QUAD_DEC2_STATUS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->QUAD_DEC2_STATUS.reg;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_get_PMU_READ_REGS_READREG1_bf(const void *const                       hw,
                                                        hri_lpmcu_misc_regs_pmu_read_regs_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg & LPMCU_MISC_REGS_PMU_READ_REGS_READREG1(mask))
	       >> LPMCU_MISC_REGS_PMU_READ_REGS_READREG1_Pos;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_read_PMU_READ_REGS_READREG1_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg & LPMCU_MISC_REGS_PMU_READ_REGS_READREG1_Msk)
	       >> LPMCU_MISC_REGS_PMU_READ_REGS_READREG1_Pos;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_get_PMU_READ_REGS_READREG2_bf(const void *const                       hw,
                                                        hri_lpmcu_misc_regs_pmu_read_regs_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg & LPMCU_MISC_REGS_PMU_READ_REGS_READREG2(mask))
	       >> LPMCU_MISC_REGS_PMU_READ_REGS_READREG2_Pos;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_read_PMU_READ_REGS_READREG2_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg & LPMCU_MISC_REGS_PMU_READ_REGS_READREG2_Msk)
	       >> LPMCU_MISC_REGS_PMU_READ_REGS_READREG2_Pos;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_get_PMU_READ_REGS_READREG3_bf(const void *const                       hw,
                                                        hri_lpmcu_misc_regs_pmu_read_regs_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg & LPMCU_MISC_REGS_PMU_READ_REGS_READREG3(mask))
	       >> LPMCU_MISC_REGS_PMU_READ_REGS_READREG3_Pos;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_read_PMU_READ_REGS_READREG3_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg & LPMCU_MISC_REGS_PMU_READ_REGS_READREG3_Msk)
	       >> LPMCU_MISC_REGS_PMU_READ_REGS_READREG3_Pos;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_get_PMU_READ_REGS_reg(const void *const hw, hri_lpmcu_misc_regs_pmu_read_regs_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_pmu_read_regs_reg_t
hri_lpmcumiscregsmiscregs_read_PMU_READ_REGS_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->PMU_READ_REGS.reg;
}

static inline hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t
hri_lpmcumiscregsmiscregs_get_AON_SLEEP_TIMER_COUNTER_AON_SLEEP_TIMER_COUNTER_bf(
    const void *const hw, hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->AON_SLEEP_TIMER_COUNTER.reg
	        & LPMCU_MISC_REGS_AON_SLEEP_TIMER_COUNTER_AON_SLEEP_TIMER_COUNTER(mask))
	       >> LPMCU_MISC_REGS_AON_SLEEP_TIMER_COUNTER_AON_SLEEP_TIMER_COUNTER_Pos;
}

static inline hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t
hri_lpmcumiscregsmiscregs_read_AON_SLEEP_TIMER_COUNTER_AON_SLEEP_TIMER_COUNTER_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->AON_SLEEP_TIMER_COUNTER.reg
	        & LPMCU_MISC_REGS_AON_SLEEP_TIMER_COUNTER_AON_SLEEP_TIMER_COUNTER_Msk)
	       >> LPMCU_MISC_REGS_AON_SLEEP_TIMER_COUNTER_AON_SLEEP_TIMER_COUNTER_Pos;
}

static inline hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t
hri_lpmcumiscregsmiscregs_get_AON_SLEEP_TIMER_COUNTER_reg(const void *const                                 hw,
                                                          hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->AON_SLEEP_TIMER_COUNTER.reg;
	tmp &= mask;
	return tmp;
}

static inline hri_lpmcu_misc_regs_aon_sleep_timer_counter_reg_t
hri_lpmcumiscregsmiscregs_read_AON_SLEEP_TIMER_COUNTER_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->AON_SLEEP_TIMER_COUNTER.reg;
}

static inline hri_lpmcu_misc_regs_efuse_1_status_3_reg_t
hri_lpmcumiscregsmiscregs_get_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3_bf(const void *const                          hw,
                                                                   hri_lpmcu_misc_regs_efuse_1_status_3_reg_t mask)
{
	return (((LpmcuMiscRegs *)hw)->EFUSE_1_STATUS_3.reg & LPMCU_MISC_REGS_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3(mask))
	       >> LPMCU_MISC_REGS_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3_Pos;
}

static inline void
hri_lpmcumiscregsmiscregs_clear_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3_bf(const void *const                          hw,
                                                                     hri_lpmcu_misc_regs_efuse_1_status_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->EFUSE_1_STATUS_3.reg = LPMCU_MISC_REGS_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3(mask);
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_efuse_1_status_3_reg_t
hri_lpmcumiscregsmiscregs_read_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3_bf(const void *const hw)
{
	return (((LpmcuMiscRegs *)hw)->EFUSE_1_STATUS_3.reg & LPMCU_MISC_REGS_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3_Msk)
	       >> LPMCU_MISC_REGS_EFUSE_1_STATUS_3_EFUSE_1_STATUS_3_Pos;
}

static inline hri_lpmcu_misc_regs_efuse_1_status_3_reg_t
hri_lpmcumiscregsmiscregs_get_EFUSE_1_STATUS_3_reg(const void *const                          hw,
                                                   hri_lpmcu_misc_regs_efuse_1_status_3_reg_t mask)
{
	uint32_t tmp;
	tmp = ((LpmcuMiscRegs *)hw)->EFUSE_1_STATUS_3.reg;
	tmp &= mask;
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_clear_EFUSE_1_STATUS_3_reg(const void *const                          hw,
                                                                        hri_lpmcu_misc_regs_efuse_1_status_3_reg_t mask)
{
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->EFUSE_1_STATUS_3.reg = mask;
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline hri_lpmcu_misc_regs_efuse_1_status_3_reg_t
hri_lpmcumiscregsmiscregs_read_EFUSE_1_STATUS_3_reg(const void *const hw)
{
	return ((LpmcuMiscRegs *)hw)->EFUSE_1_STATUS_3.reg;
}

#ifdef __cplusplus
}
#endif

#endif /* _HRI_LPMCU_MISC_REGS_B11_H_INCLUDED */
#endif /* _SAMB11_LPMCU_MISC_REGS_COMPONENT_ */
