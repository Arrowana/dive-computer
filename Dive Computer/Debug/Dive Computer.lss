
Dive Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008bec  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  10010bec  10010bec  00010bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00008388  10010c54  10010c54  00010c54  2**2
                  ALLOC
  3 .stack        00000804  10018fdc  10018fdc  00010c54  2**0
                  ALLOC
  4 .ARM.exidx    00000008  100197e0  100197e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000028  00000000  00000000  000197e8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00019810  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002bcd3  00000000  00000000  00019869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b4d  00000000  00000000  0004553c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000054b0  00000000  00000000  00048089  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000eb0  00000000  00000000  0004d539  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d48  00000000  00000000  0004e3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ef1e  00000000  00000000  0004f131  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010ec4  00000000  00000000  0006e04f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00117551  00000000  00000000  0007ef13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003aa4  00000000  00000000  00196464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
* To initialize the device, and call the main() routine.
*/
int main(void);
void __libc_init_array(void);
void app_entry(void)
{
10008000:	b580      	push	{r7, lr}
10008002:	b082      	sub	sp, #8
10008004:	af00      	add	r7, sp, #0
    uint32_t *pSrc, *pDest;

    /* Initialize the relocate segment */
    pSrc = &_etext;
10008006:	4b14      	ldr	r3, [pc, #80]	; (10008058 <app_entry+0x58>)
10008008:	607b      	str	r3, [r7, #4]
    pDest = &_srelocate;
1000800a:	4b14      	ldr	r3, [pc, #80]	; (1000805c <app_entry+0x5c>)
1000800c:	603b      	str	r3, [r7, #0]

    if (pSrc != pDest) {
1000800e:	687a      	ldr	r2, [r7, #4]
10008010:	683b      	ldr	r3, [r7, #0]
10008012:	429a      	cmp	r2, r3
10008014:	d00c      	beq.n	10008030 <app_entry+0x30>
        for (; pDest < &_erelocate;) {
10008016:	e007      	b.n	10008028 <app_entry+0x28>
            *pDest++ = *pSrc++;
10008018:	683b      	ldr	r3, [r7, #0]
1000801a:	1d1a      	adds	r2, r3, #4
1000801c:	603a      	str	r2, [r7, #0]
1000801e:	687a      	ldr	r2, [r7, #4]
10008020:	1d11      	adds	r1, r2, #4
10008022:	6079      	str	r1, [r7, #4]
10008024:	6812      	ldr	r2, [r2, #0]
10008026:	601a      	str	r2, [r3, #0]
        for (; pDest < &_erelocate;) {
10008028:	683a      	ldr	r2, [r7, #0]
1000802a:	4b0d      	ldr	r3, [pc, #52]	; (10008060 <app_entry+0x60>)
1000802c:	429a      	cmp	r2, r3
1000802e:	d3f3      	bcc.n	10008018 <app_entry+0x18>
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008030:	4b0c      	ldr	r3, [pc, #48]	; (10008064 <app_entry+0x64>)
10008032:	603b      	str	r3, [r7, #0]
10008034:	e004      	b.n	10008040 <app_entry+0x40>
        *pDest++ = 0;
10008036:	683b      	ldr	r3, [r7, #0]
10008038:	1d1a      	adds	r2, r3, #4
1000803a:	603a      	str	r2, [r7, #0]
1000803c:	2200      	movs	r2, #0
1000803e:	601a      	str	r2, [r3, #0]
    for (pDest = &_szero; pDest < &_ezero;) {
10008040:	683a      	ldr	r2, [r7, #0]
10008042:	4b09      	ldr	r3, [pc, #36]	; (10008068 <app_entry+0x68>)
10008044:	429a      	cmp	r2, r3
10008046:	d3f6      	bcc.n	10008036 <app_entry+0x36>
    }

    /* Initialize the C library */
    __libc_init_array();
10008048:	4b08      	ldr	r3, [pc, #32]	; (1000806c <app_entry+0x6c>)
1000804a:	4798      	blx	r3

    /* Branch to main function */
    main();
1000804c:	4b08      	ldr	r3, [pc, #32]	; (10008070 <app_entry+0x70>)
1000804e:	4798      	blx	r3

    /* return to BLE OS*/
    return;
10008050:	46c0      	nop			; (mov r8, r8)
}
10008052:	46bd      	mov	sp, r7
10008054:	b002      	add	sp, #8
10008056:	bd80      	pop	{r7, pc}
10008058:	10010bec 	.word	0x10010bec
1000805c:	10010bec 	.word	0x10010bec
10008060:	10010c54 	.word	0x10010c54
10008064:	10010c54 	.word	0x10010c54
10008068:	10018fdc 	.word	0x10018fdc
1000806c:	1000ef05 	.word	0x1000ef05
10008070:	1000cfcd 	.word	0x1000cfcd

10008074 <__do_global_dtors_aux>:
10008074:	b510      	push	{r4, lr}
10008076:	4c06      	ldr	r4, [pc, #24]	; (10008090 <__do_global_dtors_aux+0x1c>)
10008078:	7823      	ldrb	r3, [r4, #0]
1000807a:	2b00      	cmp	r3, #0
1000807c:	d107      	bne.n	1000808e <__do_global_dtors_aux+0x1a>
1000807e:	4b05      	ldr	r3, [pc, #20]	; (10008094 <__do_global_dtors_aux+0x20>)
10008080:	2b00      	cmp	r3, #0
10008082:	d002      	beq.n	1000808a <__do_global_dtors_aux+0x16>
10008084:	4804      	ldr	r0, [pc, #16]	; (10008098 <__do_global_dtors_aux+0x24>)
10008086:	e000      	b.n	1000808a <__do_global_dtors_aux+0x16>
10008088:	bf00      	nop
1000808a:	2301      	movs	r3, #1
1000808c:	7023      	strb	r3, [r4, #0]
1000808e:	bd10      	pop	{r4, pc}
10008090:	10010c54 	.word	0x10010c54
10008094:	00000000 	.word	0x00000000
10008098:	100197e8 	.word	0x100197e8

1000809c <frame_dummy>:
1000809c:	4b08      	ldr	r3, [pc, #32]	; (100080c0 <frame_dummy+0x24>)
1000809e:	b510      	push	{r4, lr}
100080a0:	2b00      	cmp	r3, #0
100080a2:	d003      	beq.n	100080ac <frame_dummy+0x10>
100080a4:	4907      	ldr	r1, [pc, #28]	; (100080c4 <frame_dummy+0x28>)
100080a6:	4808      	ldr	r0, [pc, #32]	; (100080c8 <frame_dummy+0x2c>)
100080a8:	e000      	b.n	100080ac <frame_dummy+0x10>
100080aa:	bf00      	nop
100080ac:	4807      	ldr	r0, [pc, #28]	; (100080cc <frame_dummy+0x30>)
100080ae:	6803      	ldr	r3, [r0, #0]
100080b0:	2b00      	cmp	r3, #0
100080b2:	d100      	bne.n	100080b6 <frame_dummy+0x1a>
100080b4:	bd10      	pop	{r4, pc}
100080b6:	4b06      	ldr	r3, [pc, #24]	; (100080d0 <frame_dummy+0x34>)
100080b8:	2b00      	cmp	r3, #0
100080ba:	d0fb      	beq.n	100080b4 <frame_dummy+0x18>
100080bc:	4798      	blx	r3
100080be:	e7f9      	b.n	100080b4 <frame_dummy+0x18>
100080c0:	00000000 	.word	0x00000000
100080c4:	10010c58 	.word	0x10010c58
100080c8:	100197e8 	.word	0x100197e8
100080cc:	100197e8 	.word	0x100197e8
100080d0:	00000000 	.word	0x00000000

100080d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
100080d4:	b580      	push	{r7, lr}
100080d6:	af00      	add	r7, sp, #0
	system_init();
100080d8:	4b02      	ldr	r3, [pc, #8]	; (100080e4 <atmel_start_init+0x10>)
100080da:	4798      	blx	r3
}
100080dc:	46c0      	nop			; (mov r8, r8)
100080de:	46bd      	mov	sp, r7
100080e0:	bd80      	pop	{r7, pc}
100080e2:	46c0      	nop			; (mov r8, r8)
100080e4:	10009cd9 	.word	0x10009cd9

100080e8 <format_depth_string>:
unsigned char* depth_string[20] = {};
unsigned char* dive_id_string[20] = {};
unsigned char* ticks_string[20] = {};

void format_depth_string(float depth, unsigned char* depth_string)
{
100080e8:	b590      	push	{r4, r7, lr}
100080ea:	b08b      	sub	sp, #44	; 0x2c
100080ec:	af02      	add	r7, sp, #8
100080ee:	6078      	str	r0, [r7, #4]
100080f0:	6039      	str	r1, [r7, #0]
	//sprintf float formattting, from stackoverflow https://stackoverflow.com/questions/905928/using-floats-with-sprintf-in-embedded-c
	char *tmpSign = (depth < 0) ? "-" : "";
100080f2:	4b1f      	ldr	r3, [pc, #124]	; (10008170 <format_depth_string+0x88>)
100080f4:	2100      	movs	r1, #0
100080f6:	6878      	ldr	r0, [r7, #4]
100080f8:	4798      	blx	r3
100080fa:	1e03      	subs	r3, r0, #0
100080fc:	d001      	beq.n	10008102 <format_depth_string+0x1a>
100080fe:	4b1d      	ldr	r3, [pc, #116]	; (10008174 <format_depth_string+0x8c>)
10008100:	e000      	b.n	10008104 <format_depth_string+0x1c>
10008102:	4b1d      	ldr	r3, [pc, #116]	; (10008178 <format_depth_string+0x90>)
10008104:	61fb      	str	r3, [r7, #28]
	float tmpVal = (depth < 0) ? -depth : depth;
10008106:	4b1a      	ldr	r3, [pc, #104]	; (10008170 <format_depth_string+0x88>)
10008108:	2100      	movs	r1, #0
1000810a:	6878      	ldr	r0, [r7, #4]
1000810c:	4798      	blx	r3
1000810e:	1e03      	subs	r3, r0, #0
10008110:	d004      	beq.n	1000811c <format_depth_string+0x34>
10008112:	687b      	ldr	r3, [r7, #4]
10008114:	2280      	movs	r2, #128	; 0x80
10008116:	0612      	lsls	r2, r2, #24
10008118:	4053      	eors	r3, r2
1000811a:	e000      	b.n	1000811e <format_depth_string+0x36>
1000811c:	687b      	ldr	r3, [r7, #4]
1000811e:	61bb      	str	r3, [r7, #24]

	int tmpInt1 = tmpVal;                  // Get the integer (678).
10008120:	4b16      	ldr	r3, [pc, #88]	; (1000817c <format_depth_string+0x94>)
10008122:	69b8      	ldr	r0, [r7, #24]
10008124:	4798      	blx	r3
10008126:	0003      	movs	r3, r0
10008128:	617b      	str	r3, [r7, #20]
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
1000812a:	4b15      	ldr	r3, [pc, #84]	; (10008180 <format_depth_string+0x98>)
1000812c:	6978      	ldr	r0, [r7, #20]
1000812e:	4798      	blx	r3
10008130:	1c02      	adds	r2, r0, #0
10008132:	4b14      	ldr	r3, [pc, #80]	; (10008184 <format_depth_string+0x9c>)
10008134:	1c11      	adds	r1, r2, #0
10008136:	69b8      	ldr	r0, [r7, #24]
10008138:	4798      	blx	r3
1000813a:	1c03      	adds	r3, r0, #0
1000813c:	613b      	str	r3, [r7, #16]
	int tmpInt2 = tmpFrac * 10;  // Turn into integer (123).
1000813e:	4b12      	ldr	r3, [pc, #72]	; (10008188 <format_depth_string+0xa0>)
10008140:	4912      	ldr	r1, [pc, #72]	; (1000818c <format_depth_string+0xa4>)
10008142:	6938      	ldr	r0, [r7, #16]
10008144:	4798      	blx	r3
10008146:	1c03      	adds	r3, r0, #0
10008148:	1c1a      	adds	r2, r3, #0
1000814a:	4b0c      	ldr	r3, [pc, #48]	; (1000817c <format_depth_string+0x94>)
1000814c:	1c10      	adds	r0, r2, #0
1000814e:	4798      	blx	r3
10008150:	0003      	movs	r3, r0
10008152:	60fb      	str	r3, [r7, #12]

	// Print as parts, note that you need 0-padding for fractional bit.
	sprintf(depth_string, "D %s%d.%01dm \n", tmpSign, tmpInt1, tmpInt2);
10008154:	697c      	ldr	r4, [r7, #20]
10008156:	69fa      	ldr	r2, [r7, #28]
10008158:	490d      	ldr	r1, [pc, #52]	; (10008190 <format_depth_string+0xa8>)
1000815a:	6838      	ldr	r0, [r7, #0]
1000815c:	68fb      	ldr	r3, [r7, #12]
1000815e:	9300      	str	r3, [sp, #0]
10008160:	0023      	movs	r3, r4
10008162:	4c0c      	ldr	r4, [pc, #48]	; (10008194 <format_depth_string+0xac>)
10008164:	47a0      	blx	r4
}
10008166:	46c0      	nop			; (mov r8, r8)
10008168:	46bd      	mov	sp, r7
1000816a:	b009      	add	sp, #36	; 0x24
1000816c:	bd90      	pop	{r4, r7, pc}
1000816e:	46c0      	nop			; (mov r8, r8)
10008170:	1000da01 	.word	0x1000da01
10008174:	1000f7c8 	.word	0x1000f7c8
10008178:	1000f7cc 	.word	0x1000f7cc
1000817c:	1000e32d 	.word	0x1000e32d
10008180:	1000e36d 	.word	0x1000e36d
10008184:	1000dff5 	.word	0x1000dff5
10008188:	1000ddb5 	.word	0x1000ddb5
1000818c:	41200000 	.word	0x41200000
10008190:	1000f7d0 	.word	0x1000f7d0
10008194:	1000f0f9 	.word	0x1000f0f9

10008198 <update_display>:

void update_display(display_data_t *display_data)
{
10008198:	b590      	push	{r4, r7, lr}
1000819a:	b083      	sub	sp, #12
1000819c:	af00      	add	r7, sp, #0
1000819e:	6078      	str	r0, [r7, #4]
	//Format
	sprintf(buffer, "%02d:%02d\n", display_data->dive_time->minute, display_data->dive_time->second);
100081a0:	687b      	ldr	r3, [r7, #4]
100081a2:	681b      	ldr	r3, [r3, #0]
100081a4:	781b      	ldrb	r3, [r3, #0]
100081a6:	001a      	movs	r2, r3
100081a8:	687b      	ldr	r3, [r7, #4]
100081aa:	681b      	ldr	r3, [r3, #0]
100081ac:	785b      	ldrb	r3, [r3, #1]
100081ae:	4921      	ldr	r1, [pc, #132]	; (10008234 <update_display+0x9c>)
100081b0:	4821      	ldr	r0, [pc, #132]	; (10008238 <update_display+0xa0>)
100081b2:	4c22      	ldr	r4, [pc, #136]	; (1000823c <update_display+0xa4>)
100081b4:	47a0      	blx	r4
	format_depth_string(display_data->depth, depth_string);
100081b6:	687b      	ldr	r3, [r7, #4]
100081b8:	68db      	ldr	r3, [r3, #12]
100081ba:	4a21      	ldr	r2, [pc, #132]	; (10008240 <update_display+0xa8>)
100081bc:	0011      	movs	r1, r2
100081be:	1c18      	adds	r0, r3, #0
100081c0:	4b20      	ldr	r3, [pc, #128]	; (10008244 <update_display+0xac>)
100081c2:	4798      	blx	r3
	sprintf(MS5837_output_string, "MS5837 \nT:%d degC\nP:%d .1mbar\n", display_data->temp_pressure->temperature, display_data->temp_pressure->pressure);
100081c4:	687b      	ldr	r3, [r7, #4]
100081c6:	689b      	ldr	r3, [r3, #8]
100081c8:	681a      	ldr	r2, [r3, #0]
100081ca:	687b      	ldr	r3, [r7, #4]
100081cc:	689b      	ldr	r3, [r3, #8]
100081ce:	685b      	ldr	r3, [r3, #4]
100081d0:	491d      	ldr	r1, [pc, #116]	; (10008248 <update_display+0xb0>)
100081d2:	481e      	ldr	r0, [pc, #120]	; (1000824c <update_display+0xb4>)
100081d4:	4c19      	ldr	r4, [pc, #100]	; (1000823c <update_display+0xa4>)
100081d6:	47a0      	blx	r4
	//sprintf(acceleration_string, "ACC \nx:%d \ny:%d \nz:%d\n", acceleration_vector->x, acceleration_vector->y, acceleration_vector->z);
	sprintf(dive_id_string, "dive: %d\n", display_data->dive_id);
100081d8:	687b      	ldr	r3, [r7, #4]
100081da:	7c1b      	ldrb	r3, [r3, #16]
100081dc:	001a      	movs	r2, r3
100081de:	491c      	ldr	r1, [pc, #112]	; (10008250 <update_display+0xb8>)
100081e0:	4b1c      	ldr	r3, [pc, #112]	; (10008254 <update_display+0xbc>)
100081e2:	0018      	movs	r0, r3
100081e4:	4b15      	ldr	r3, [pc, #84]	; (1000823c <update_display+0xa4>)
100081e6:	4798      	blx	r3
	//sprintf(ticks_string, "ticks: %d\n", ticks);
	
	//Display
	ST7732_set_cursor(0, 0);
100081e8:	2100      	movs	r1, #0
100081ea:	2000      	movs	r0, #0
100081ec:	4b1a      	ldr	r3, [pc, #104]	; (10008258 <update_display+0xc0>)
100081ee:	4798      	blx	r3
	ST7735_set_text_size(4);
100081f0:	2004      	movs	r0, #4
100081f2:	4b1a      	ldr	r3, [pc, #104]	; (1000825c <update_display+0xc4>)
100081f4:	4798      	blx	r3
	ST7735_print(buffer);
100081f6:	4b10      	ldr	r3, [pc, #64]	; (10008238 <update_display+0xa0>)
100081f8:	0018      	movs	r0, r3
100081fa:	4b19      	ldr	r3, [pc, #100]	; (10008260 <update_display+0xc8>)
100081fc:	4798      	blx	r3
	ST7735_set_text_size(3);
100081fe:	2003      	movs	r0, #3
10008200:	4b16      	ldr	r3, [pc, #88]	; (1000825c <update_display+0xc4>)
10008202:	4798      	blx	r3
	ST7735_print(depth_string);
10008204:	4b0e      	ldr	r3, [pc, #56]	; (10008240 <update_display+0xa8>)
10008206:	0018      	movs	r0, r3
10008208:	4b15      	ldr	r3, [pc, #84]	; (10008260 <update_display+0xc8>)
1000820a:	4798      	blx	r3
	ST7735_set_text_size(1);
1000820c:	2001      	movs	r0, #1
1000820e:	4b13      	ldr	r3, [pc, #76]	; (1000825c <update_display+0xc4>)
10008210:	4798      	blx	r3
	//ST7735_print(acceleration_string);
	ST7735_print(MS5837_output_string);
10008212:	4b0e      	ldr	r3, [pc, #56]	; (1000824c <update_display+0xb4>)
10008214:	0018      	movs	r0, r3
10008216:	4b12      	ldr	r3, [pc, #72]	; (10008260 <update_display+0xc8>)
10008218:	4798      	blx	r3
	ST7735_print(ticks_string);
1000821a:	4b12      	ldr	r3, [pc, #72]	; (10008264 <update_display+0xcc>)
1000821c:	0018      	movs	r0, r3
1000821e:	4b10      	ldr	r3, [pc, #64]	; (10008260 <update_display+0xc8>)
10008220:	4798      	blx	r3
	ST7735_print(dive_id_string);
10008222:	4b0c      	ldr	r3, [pc, #48]	; (10008254 <update_display+0xbc>)
10008224:	0018      	movs	r0, r3
10008226:	4b0e      	ldr	r3, [pc, #56]	; (10008260 <update_display+0xc8>)
10008228:	4798      	blx	r3
}
1000822a:	46c0      	nop			; (mov r8, r8)
1000822c:	46bd      	mov	sp, r7
1000822e:	b003      	add	sp, #12
10008230:	bd90      	pop	{r4, r7, pc}
10008232:	46c0      	nop			; (mov r8, r8)
10008234:	1000f7e0 	.word	0x1000f7e0
10008238:	10010c70 	.word	0x10010c70
1000823c:	1000f0f9 	.word	0x1000f0f9
10008240:	10011030 	.word	0x10011030
10008244:	100080e9 	.word	0x100080e9
10008248:	1000f7ec 	.word	0x1000f7ec
1000824c:	10010ea0 	.word	0x10010ea0
10008250:	1000f80c 	.word	0x1000f80c
10008254:	10011080 	.word	0x10011080
10008258:	10008ce9 	.word	0x10008ce9
1000825c:	10008d1d 	.word	0x10008d1d
10008260:	10008d3d 	.word	0x10008d3d
10008264:	100110d0 	.word	0x100110d0

10008268 <hri_gpio_set_DATAOUT_reg>:
	tmp = (tmp & GPIO_DATAOUT_VALUE_Msk) >> GPIO_DATAOUT_VALUE_Pos;
	return tmp;
}

static inline void hri_gpio_set_DATAOUT_reg(const void *const hw, hri_gpio_dataout_reg_t mask)
{
10008268:	b580      	push	{r7, lr}
1000826a:	b082      	sub	sp, #8
1000826c:	af00      	add	r7, sp, #0
1000826e:	6078      	str	r0, [r7, #4]
10008270:	000a      	movs	r2, r1
10008272:	1cbb      	adds	r3, r7, #2
10008274:	801a      	strh	r2, [r3, #0]
	GPIO_CRITICAL_SECTION_ENTER();
	((Gpio *)hw)->DATAOUT.reg |= mask;
10008276:	687b      	ldr	r3, [r7, #4]
10008278:	889b      	ldrh	r3, [r3, #4]
1000827a:	b29a      	uxth	r2, r3
1000827c:	1cbb      	adds	r3, r7, #2
1000827e:	881b      	ldrh	r3, [r3, #0]
10008280:	4313      	orrs	r3, r2
10008282:	b29a      	uxth	r2, r3
10008284:	687b      	ldr	r3, [r7, #4]
10008286:	809a      	strh	r2, [r3, #4]
	GPIO_CRITICAL_SECTION_LEAVE();
}
10008288:	46c0      	nop			; (mov r8, r8)
1000828a:	46bd      	mov	sp, r7
1000828c:	b002      	add	sp, #8
1000828e:	bd80      	pop	{r7, pc}

10008290 <hri_gpio_clear_DATAOUT_reg>:
	((Gpio *)hw)->DATAOUT.reg = data;
	GPIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_gpio_clear_DATAOUT_reg(const void *const hw, hri_gpio_dataout_reg_t mask)
{
10008290:	b580      	push	{r7, lr}
10008292:	b082      	sub	sp, #8
10008294:	af00      	add	r7, sp, #0
10008296:	6078      	str	r0, [r7, #4]
10008298:	000a      	movs	r2, r1
1000829a:	1cbb      	adds	r3, r7, #2
1000829c:	801a      	strh	r2, [r3, #0]
	GPIO_CRITICAL_SECTION_ENTER();
	((Gpio *)hw)->DATAOUT.reg &= ~mask;
1000829e:	687b      	ldr	r3, [r7, #4]
100082a0:	889b      	ldrh	r3, [r3, #4]
100082a2:	b29b      	uxth	r3, r3
100082a4:	b21b      	sxth	r3, r3
100082a6:	1cba      	adds	r2, r7, #2
100082a8:	2100      	movs	r1, #0
100082aa:	5e52      	ldrsh	r2, [r2, r1]
100082ac:	43d2      	mvns	r2, r2
100082ae:	b212      	sxth	r2, r2
100082b0:	4013      	ands	r3, r2
100082b2:	b21b      	sxth	r3, r3
100082b4:	b29a      	uxth	r2, r3
100082b6:	687b      	ldr	r3, [r7, #4]
100082b8:	809a      	strh	r2, [r3, #4]
	GPIO_CRITICAL_SECTION_LEAVE();
}
100082ba:	46c0      	nop			; (mov r8, r8)
100082bc:	46bd      	mov	sp, r7
100082be:	b002      	add	sp, #8
100082c0:	bd80      	pop	{r7, pc}
	...

100082c4 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
100082c4:	b580      	push	{r7, lr}
100082c6:	b084      	sub	sp, #16
100082c8:	af00      	add	r7, sp, #0
100082ca:	6039      	str	r1, [r7, #0]
100082cc:	0011      	movs	r1, r2
100082ce:	1dfb      	adds	r3, r7, #7
100082d0:	1c02      	adds	r2, r0, #0
100082d2:	701a      	strb	r2, [r3, #0]
100082d4:	1dbb      	adds	r3, r7, #6
100082d6:	1c0a      	adds	r2, r1, #0
100082d8:	701a      	strb	r2, [r3, #0]
	uint32_t mask_gpio1 = mask >> 16;
100082da:	683b      	ldr	r3, [r7, #0]
100082dc:	0c1b      	lsrs	r3, r3, #16
100082de:	60fb      	str	r3, [r7, #12]

	if (port == GPIO_PORTA) {
100082e0:	1dfb      	adds	r3, r7, #7
100082e2:	781b      	ldrb	r3, [r3, #0]
100082e4:	2b00      	cmp	r3, #0
100082e6:	d128      	bne.n	1000833a <_gpio_set_level+0x76>
		if (level) {
100082e8:	1dbb      	adds	r3, r7, #6
100082ea:	781b      	ldrb	r3, [r3, #0]
100082ec:	2b00      	cmp	r3, #0
100082ee:	d012      	beq.n	10008316 <_gpio_set_level+0x52>
			if (mask_gpio1 == 0) {
100082f0:	68fb      	ldr	r3, [r7, #12]
100082f2:	2b00      	cmp	r3, #0
100082f4:	d107      	bne.n	10008306 <_gpio_set_level+0x42>
				hri_gpio_set_DATAOUT_reg(GPIO0, mask);
100082f6:	683b      	ldr	r3, [r7, #0]
100082f8:	b29b      	uxth	r3, r3
100082fa:	4a12      	ldr	r2, [pc, #72]	; (10008344 <_gpio_set_level+0x80>)
100082fc:	0019      	movs	r1, r3
100082fe:	0010      	movs	r0, r2
10008300:	4b11      	ldr	r3, [pc, #68]	; (10008348 <_gpio_set_level+0x84>)
10008302:	4798      	blx	r3
			} else {
				hri_gpio_clear_DATAOUT_reg(GPIO1, mask_gpio1);
			}
		}
	}
}
10008304:	e019      	b.n	1000833a <_gpio_set_level+0x76>
				hri_gpio_set_DATAOUT_reg(GPIO1, mask_gpio1);
10008306:	68fb      	ldr	r3, [r7, #12]
10008308:	b29b      	uxth	r3, r3
1000830a:	4a10      	ldr	r2, [pc, #64]	; (1000834c <_gpio_set_level+0x88>)
1000830c:	0019      	movs	r1, r3
1000830e:	0010      	movs	r0, r2
10008310:	4b0d      	ldr	r3, [pc, #52]	; (10008348 <_gpio_set_level+0x84>)
10008312:	4798      	blx	r3
}
10008314:	e011      	b.n	1000833a <_gpio_set_level+0x76>
			if (mask_gpio1 == 0) {
10008316:	68fb      	ldr	r3, [r7, #12]
10008318:	2b00      	cmp	r3, #0
1000831a:	d107      	bne.n	1000832c <_gpio_set_level+0x68>
				hri_gpio_clear_DATAOUT_reg(GPIO0, mask);
1000831c:	683b      	ldr	r3, [r7, #0]
1000831e:	b29b      	uxth	r3, r3
10008320:	4a08      	ldr	r2, [pc, #32]	; (10008344 <_gpio_set_level+0x80>)
10008322:	0019      	movs	r1, r3
10008324:	0010      	movs	r0, r2
10008326:	4b0a      	ldr	r3, [pc, #40]	; (10008350 <_gpio_set_level+0x8c>)
10008328:	4798      	blx	r3
}
1000832a:	e006      	b.n	1000833a <_gpio_set_level+0x76>
				hri_gpio_clear_DATAOUT_reg(GPIO1, mask_gpio1);
1000832c:	68fb      	ldr	r3, [r7, #12]
1000832e:	b29b      	uxth	r3, r3
10008330:	4a06      	ldr	r2, [pc, #24]	; (1000834c <_gpio_set_level+0x88>)
10008332:	0019      	movs	r1, r3
10008334:	0010      	movs	r0, r2
10008336:	4b06      	ldr	r3, [pc, #24]	; (10008350 <_gpio_set_level+0x8c>)
10008338:	4798      	blx	r3
}
1000833a:	46c0      	nop			; (mov r8, r8)
1000833c:	46bd      	mov	sp, r7
1000833e:	b004      	add	sp, #16
10008340:	bd80      	pop	{r7, pc}
10008342:	46c0      	nop			; (mov r8, r8)
10008344:	40010000 	.word	0x40010000
10008348:	10008269 	.word	0x10008269
1000834c:	40011000 	.word	0x40011000
10008350:	10008291 	.word	0x10008291

10008354 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
10008354:	b580      	push	{r7, lr}
10008356:	b082      	sub	sp, #8
10008358:	af00      	add	r7, sp, #0
1000835a:	0002      	movs	r2, r0
1000835c:	1dfb      	adds	r3, r7, #7
1000835e:	701a      	strb	r2, [r3, #0]
10008360:	1dbb      	adds	r3, r7, #6
10008362:	1c0a      	adds	r2, r1, #0
10008364:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
10008366:	1dfb      	adds	r3, r7, #7
10008368:	781b      	ldrb	r3, [r3, #0]
1000836a:	095b      	lsrs	r3, r3, #5
1000836c:	b2d8      	uxtb	r0, r3
1000836e:	1dfb      	adds	r3, r7, #7
10008370:	781b      	ldrb	r3, [r3, #0]
10008372:	221f      	movs	r2, #31
10008374:	4013      	ands	r3, r2
10008376:	2201      	movs	r2, #1
10008378:	409a      	lsls	r2, r3
1000837a:	0011      	movs	r1, r2
1000837c:	1dbb      	adds	r3, r7, #6
1000837e:	781b      	ldrb	r3, [r3, #0]
10008380:	001a      	movs	r2, r3
10008382:	4b03      	ldr	r3, [pc, #12]	; (10008390 <gpio_set_pin_level+0x3c>)
10008384:	4798      	blx	r3
}
10008386:	46c0      	nop			; (mov r8, r8)
10008388:	46bd      	mov	sp, r7
1000838a:	b002      	add	sp, #8
1000838c:	bd80      	pop	{r7, pc}
1000838e:	46c0      	nop			; (mov r8, r8)
10008390:	100082c5 	.word	0x100082c5

10008394 <setAddrWindow>:
	ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
	10,                     //     10 ms delay
	ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
100 };                  //     100 ms delay

void setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
10008394:	b5b0      	push	{r4, r5, r7, lr}
10008396:	b082      	sub	sp, #8
10008398:	af00      	add	r7, sp, #0
1000839a:	0005      	movs	r5, r0
1000839c:	000c      	movs	r4, r1
1000839e:	0010      	movs	r0, r2
100083a0:	0019      	movs	r1, r3
100083a2:	1dfb      	adds	r3, r7, #7
100083a4:	1c2a      	adds	r2, r5, #0
100083a6:	701a      	strb	r2, [r3, #0]
100083a8:	1dbb      	adds	r3, r7, #6
100083aa:	1c22      	adds	r2, r4, #0
100083ac:	701a      	strb	r2, [r3, #0]
100083ae:	1d7b      	adds	r3, r7, #5
100083b0:	1c02      	adds	r2, r0, #0
100083b2:	701a      	strb	r2, [r3, #0]
100083b4:	1d3b      	adds	r3, r7, #4
100083b6:	1c0a      	adds	r2, r1, #0
100083b8:	701a      	strb	r2, [r3, #0]
	writecommand(ST7735_CASET); // Column addr set
100083ba:	202a      	movs	r0, #42	; 0x2a
100083bc:	4b1b      	ldr	r3, [pc, #108]	; (1000842c <setAddrWindow+0x98>)
100083be:	4798      	blx	r3
	writedata(0x00);
100083c0:	2000      	movs	r0, #0
100083c2:	4b1b      	ldr	r3, [pc, #108]	; (10008430 <setAddrWindow+0x9c>)
100083c4:	4798      	blx	r3
	writedata(x0+xstart);     // XSTART
100083c6:	1dfb      	adds	r3, r7, #7
100083c8:	781b      	ldrb	r3, [r3, #0]
100083ca:	4a1a      	ldr	r2, [pc, #104]	; (10008434 <setAddrWindow+0xa0>)
100083cc:	7812      	ldrb	r2, [r2, #0]
100083ce:	189b      	adds	r3, r3, r2
100083d0:	0018      	movs	r0, r3
100083d2:	4b17      	ldr	r3, [pc, #92]	; (10008430 <setAddrWindow+0x9c>)
100083d4:	4798      	blx	r3
	writedata(0x00);
100083d6:	2000      	movs	r0, #0
100083d8:	4b15      	ldr	r3, [pc, #84]	; (10008430 <setAddrWindow+0x9c>)
100083da:	4798      	blx	r3
	writedata(x1+xstart);     // XEND
100083dc:	1d7b      	adds	r3, r7, #5
100083de:	781b      	ldrb	r3, [r3, #0]
100083e0:	4a14      	ldr	r2, [pc, #80]	; (10008434 <setAddrWindow+0xa0>)
100083e2:	7812      	ldrb	r2, [r2, #0]
100083e4:	189b      	adds	r3, r3, r2
100083e6:	0018      	movs	r0, r3
100083e8:	4b11      	ldr	r3, [pc, #68]	; (10008430 <setAddrWindow+0x9c>)
100083ea:	4798      	blx	r3

	writecommand(ST7735_RASET); // Row addr set
100083ec:	202b      	movs	r0, #43	; 0x2b
100083ee:	4b0f      	ldr	r3, [pc, #60]	; (1000842c <setAddrWindow+0x98>)
100083f0:	4798      	blx	r3
	writedata(0x00);
100083f2:	2000      	movs	r0, #0
100083f4:	4b0e      	ldr	r3, [pc, #56]	; (10008430 <setAddrWindow+0x9c>)
100083f6:	4798      	blx	r3
	writedata(y0+ystart);     // YSTART
100083f8:	1dbb      	adds	r3, r7, #6
100083fa:	781b      	ldrb	r3, [r3, #0]
100083fc:	4a0e      	ldr	r2, [pc, #56]	; (10008438 <setAddrWindow+0xa4>)
100083fe:	7812      	ldrb	r2, [r2, #0]
10008400:	189b      	adds	r3, r3, r2
10008402:	0018      	movs	r0, r3
10008404:	4b0a      	ldr	r3, [pc, #40]	; (10008430 <setAddrWindow+0x9c>)
10008406:	4798      	blx	r3
	writedata(0x00);
10008408:	2000      	movs	r0, #0
1000840a:	4b09      	ldr	r3, [pc, #36]	; (10008430 <setAddrWindow+0x9c>)
1000840c:	4798      	blx	r3
	writedata(y1+ystart);     // YEND
1000840e:	1d3b      	adds	r3, r7, #4
10008410:	781b      	ldrb	r3, [r3, #0]
10008412:	4a09      	ldr	r2, [pc, #36]	; (10008438 <setAddrWindow+0xa4>)
10008414:	7812      	ldrb	r2, [r2, #0]
10008416:	189b      	adds	r3, r3, r2
10008418:	0018      	movs	r0, r3
1000841a:	4b05      	ldr	r3, [pc, #20]	; (10008430 <setAddrWindow+0x9c>)
1000841c:	4798      	blx	r3

	writecommand(ST7735_RAMWR); // write to RAM
1000841e:	202c      	movs	r0, #44	; 0x2c
10008420:	4b02      	ldr	r3, [pc, #8]	; (1000842c <setAddrWindow+0x98>)
10008422:	4798      	blx	r3
}
10008424:	46c0      	nop			; (mov r8, r8)
10008426:	46bd      	mov	sp, r7
10008428:	b002      	add	sp, #8
1000842a:	bdb0      	pop	{r4, r5, r7, pc}
1000842c:	100089d9 	.word	0x100089d9
10008430:	10008a21 	.word	0x10008a21
10008434:	10011144 	.word	0x10011144
10008438:	10011145 	.word	0x10011145

1000843c <fillScreen>:

void fillScreen(uint16_t color) {
1000843c:	b590      	push	{r4, r7, lr}
1000843e:	b085      	sub	sp, #20
10008440:	af02      	add	r7, sp, #8
10008442:	0002      	movs	r2, r0
10008444:	1dbb      	adds	r3, r7, #6
10008446:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0,  _width, _height, color);
10008448:	4b08      	ldr	r3, [pc, #32]	; (1000846c <fillScreen+0x30>)
1000844a:	781b      	ldrb	r3, [r3, #0]
1000844c:	001a      	movs	r2, r3
1000844e:	4b08      	ldr	r3, [pc, #32]	; (10008470 <fillScreen+0x34>)
10008450:	781b      	ldrb	r3, [r3, #0]
10008452:	0019      	movs	r1, r3
10008454:	1dbb      	adds	r3, r7, #6
10008456:	881b      	ldrh	r3, [r3, #0]
10008458:	9300      	str	r3, [sp, #0]
1000845a:	000b      	movs	r3, r1
1000845c:	2100      	movs	r1, #0
1000845e:	2000      	movs	r0, #0
10008460:	4c04      	ldr	r4, [pc, #16]	; (10008474 <fillScreen+0x38>)
10008462:	47a0      	blx	r4
}
10008464:	46c0      	nop			; (mov r8, r8)
10008466:	46bd      	mov	sp, r7
10008468:	b003      	add	sp, #12
1000846a:	bd90      	pop	{r4, r7, pc}
1000846c:	10011248 	.word	0x10011248
10008470:	1001124a 	.word	0x1001124a
10008474:	10008479 	.word	0x10008479

10008478 <fillRect>:

uint16_t line_buffer[128];

// fill a rectangle
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
10008478:	b5b0      	push	{r4, r5, r7, lr}
1000847a:	b084      	sub	sp, #16
1000847c:	af00      	add	r7, sp, #0
1000847e:	0005      	movs	r5, r0
10008480:	000c      	movs	r4, r1
10008482:	0010      	movs	r0, r2
10008484:	0019      	movs	r1, r3
10008486:	1dbb      	adds	r3, r7, #6
10008488:	1c2a      	adds	r2, r5, #0
1000848a:	801a      	strh	r2, [r3, #0]
1000848c:	1d3b      	adds	r3, r7, #4
1000848e:	1c22      	adds	r2, r4, #0
10008490:	801a      	strh	r2, [r3, #0]
10008492:	1cbb      	adds	r3, r7, #2
10008494:	1c02      	adds	r2, r0, #0
10008496:	801a      	strh	r2, [r3, #0]
10008498:	003b      	movs	r3, r7
1000849a:	1c0a      	adds	r2, r1, #0
1000849c:	801a      	strh	r2, [r3, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= _width) || (y >= _height)) return;
1000849e:	1dbb      	adds	r3, r7, #6
100084a0:	2200      	movs	r2, #0
100084a2:	5e9b      	ldrsh	r3, [r3, r2]
100084a4:	4a57      	ldr	r2, [pc, #348]	; (10008604 <fillRect+0x18c>)
100084a6:	7812      	ldrb	r2, [r2, #0]
100084a8:	4293      	cmp	r3, r2
100084aa:	db00      	blt.n	100084ae <fillRect+0x36>
100084ac:	e0a5      	b.n	100085fa <fillRect+0x182>
100084ae:	1d3b      	adds	r3, r7, #4
100084b0:	2200      	movs	r2, #0
100084b2:	5e9b      	ldrsh	r3, [r3, r2]
100084b4:	4a54      	ldr	r2, [pc, #336]	; (10008608 <fillRect+0x190>)
100084b6:	7812      	ldrb	r2, [r2, #0]
100084b8:	4293      	cmp	r3, r2
100084ba:	db00      	blt.n	100084be <fillRect+0x46>
100084bc:	e09d      	b.n	100085fa <fillRect+0x182>
	if((x + w - 1) >= _width)  w = _width  - x;
100084be:	1dbb      	adds	r3, r7, #6
100084c0:	2200      	movs	r2, #0
100084c2:	5e9a      	ldrsh	r2, [r3, r2]
100084c4:	1cbb      	adds	r3, r7, #2
100084c6:	2100      	movs	r1, #0
100084c8:	5e5b      	ldrsh	r3, [r3, r1]
100084ca:	18d3      	adds	r3, r2, r3
100084cc:	3b01      	subs	r3, #1
100084ce:	4a4d      	ldr	r2, [pc, #308]	; (10008604 <fillRect+0x18c>)
100084d0:	7812      	ldrb	r2, [r2, #0]
100084d2:	4293      	cmp	r3, r2
100084d4:	db08      	blt.n	100084e8 <fillRect+0x70>
100084d6:	4b4b      	ldr	r3, [pc, #300]	; (10008604 <fillRect+0x18c>)
100084d8:	781b      	ldrb	r3, [r3, #0]
100084da:	b29a      	uxth	r2, r3
100084dc:	1dbb      	adds	r3, r7, #6
100084de:	881b      	ldrh	r3, [r3, #0]
100084e0:	1ad3      	subs	r3, r2, r3
100084e2:	b29a      	uxth	r2, r3
100084e4:	1cbb      	adds	r3, r7, #2
100084e6:	801a      	strh	r2, [r3, #0]
	if((y + h - 1) >= _height) h = _height - y;
100084e8:	1d3b      	adds	r3, r7, #4
100084ea:	2200      	movs	r2, #0
100084ec:	5e9a      	ldrsh	r2, [r3, r2]
100084ee:	003b      	movs	r3, r7
100084f0:	2100      	movs	r1, #0
100084f2:	5e5b      	ldrsh	r3, [r3, r1]
100084f4:	18d3      	adds	r3, r2, r3
100084f6:	3b01      	subs	r3, #1
100084f8:	4a43      	ldr	r2, [pc, #268]	; (10008608 <fillRect+0x190>)
100084fa:	7812      	ldrb	r2, [r2, #0]
100084fc:	4293      	cmp	r3, r2
100084fe:	db08      	blt.n	10008512 <fillRect+0x9a>
10008500:	4b41      	ldr	r3, [pc, #260]	; (10008608 <fillRect+0x190>)
10008502:	781b      	ldrb	r3, [r3, #0]
10008504:	b29a      	uxth	r2, r3
10008506:	1d3b      	adds	r3, r7, #4
10008508:	881b      	ldrh	r3, [r3, #0]
1000850a:	1ad3      	subs	r3, r2, r3
1000850c:	b29a      	uxth	r2, r3
1000850e:	003b      	movs	r3, r7
10008510:	801a      	strh	r2, [r3, #0]

	setAddrWindow(x, y, x+w-1, y+h-1);
10008512:	1dbb      	adds	r3, r7, #6
10008514:	881b      	ldrh	r3, [r3, #0]
10008516:	b2d8      	uxtb	r0, r3
10008518:	1d3b      	adds	r3, r7, #4
1000851a:	881b      	ldrh	r3, [r3, #0]
1000851c:	b2d9      	uxtb	r1, r3
1000851e:	1dbb      	adds	r3, r7, #6
10008520:	881b      	ldrh	r3, [r3, #0]
10008522:	b2da      	uxtb	r2, r3
10008524:	1cbb      	adds	r3, r7, #2
10008526:	881b      	ldrh	r3, [r3, #0]
10008528:	b2db      	uxtb	r3, r3
1000852a:	18d3      	adds	r3, r2, r3
1000852c:	b2db      	uxtb	r3, r3
1000852e:	3b01      	subs	r3, #1
10008530:	b2dc      	uxtb	r4, r3
10008532:	1d3b      	adds	r3, r7, #4
10008534:	881b      	ldrh	r3, [r3, #0]
10008536:	b2da      	uxtb	r2, r3
10008538:	003b      	movs	r3, r7
1000853a:	881b      	ldrh	r3, [r3, #0]
1000853c:	b2db      	uxtb	r3, r3
1000853e:	18d3      	adds	r3, r2, r3
10008540:	b2db      	uxtb	r3, r3
10008542:	3b01      	subs	r3, #1
10008544:	b2db      	uxtb	r3, r3
10008546:	0022      	movs	r2, r4
10008548:	4c30      	ldr	r4, [pc, #192]	; (1000860c <fillRect+0x194>)
1000854a:	47a0      	blx	r4

	uint8_t hi = color >> 8, lo = color;
1000854c:	2320      	movs	r3, #32
1000854e:	18fb      	adds	r3, r7, r3
10008550:	881b      	ldrh	r3, [r3, #0]
10008552:	0a1b      	lsrs	r3, r3, #8
10008554:	b29a      	uxth	r2, r3
10008556:	230f      	movs	r3, #15
10008558:	18fb      	adds	r3, r7, r3
1000855a:	701a      	strb	r2, [r3, #0]
1000855c:	230e      	movs	r3, #14
1000855e:	18fb      	adds	r3, r7, r3
10008560:	2220      	movs	r2, #32
10008562:	18ba      	adds	r2, r7, r2
10008564:	8812      	ldrh	r2, [r2, #0]
10008566:	701a      	strb	r2, [r3, #0]
	
	//Byte swap for MSB first
	uint8_t color_buff[2];
	color_buff[0] = color >> 8;
10008568:	2320      	movs	r3, #32
1000856a:	18fb      	adds	r3, r7, r3
1000856c:	881b      	ldrh	r3, [r3, #0]
1000856e:	0a1b      	lsrs	r3, r3, #8
10008570:	b29b      	uxth	r3, r3
10008572:	b2da      	uxtb	r2, r3
10008574:	230c      	movs	r3, #12
10008576:	18fb      	adds	r3, r7, r3
10008578:	701a      	strb	r2, [r3, #0]
	color_buff[1] = color & 0xff;
1000857a:	2320      	movs	r3, #32
1000857c:	18fb      	adds	r3, r7, r3
1000857e:	881b      	ldrh	r3, [r3, #0]
10008580:	b2da      	uxtb	r2, r3
10008582:	230c      	movs	r3, #12
10008584:	18fb      	adds	r3, r7, r3
10008586:	705a      	strb	r2, [r3, #1]

	DC_HIGH();
10008588:	2101      	movs	r1, #1
1000858a:	2007      	movs	r0, #7
1000858c:	4b20      	ldr	r3, [pc, #128]	; (10008610 <fillRect+0x198>)
1000858e:	4798      	blx	r3
	CS_LOW();
10008590:	2100      	movs	r1, #0
10008592:	200c      	movs	r0, #12
10008594:	4b1e      	ldr	r3, [pc, #120]	; (10008610 <fillRect+0x198>)
10008596:	4798      	blx	r3
	for(y=h; y>0; y--) {
10008598:	1d3b      	adds	r3, r7, #4
1000859a:	003a      	movs	r2, r7
1000859c:	8812      	ldrh	r2, [r2, #0]
1000859e:	801a      	strh	r2, [r3, #0]
100085a0:	e021      	b.n	100085e6 <fillRect+0x16e>
		for(x=w; x>0; x--) {
100085a2:	1dbb      	adds	r3, r7, #6
100085a4:	1cba      	adds	r2, r7, #2
100085a6:	8812      	ldrh	r2, [r2, #0]
100085a8:	801a      	strh	r2, [r3, #0]
100085aa:	e00f      	b.n	100085cc <fillRect+0x154>
			io_write(io_lcd_spi, color_buff, 2);
100085ac:	4b19      	ldr	r3, [pc, #100]	; (10008614 <fillRect+0x19c>)
100085ae:	681b      	ldr	r3, [r3, #0]
100085b0:	220c      	movs	r2, #12
100085b2:	18b9      	adds	r1, r7, r2
100085b4:	2202      	movs	r2, #2
100085b6:	0018      	movs	r0, r3
100085b8:	4b17      	ldr	r3, [pc, #92]	; (10008618 <fillRect+0x1a0>)
100085ba:	4798      	blx	r3
		for(x=w; x>0; x--) {
100085bc:	1dbb      	adds	r3, r7, #6
100085be:	2200      	movs	r2, #0
100085c0:	5e9b      	ldrsh	r3, [r3, r2]
100085c2:	b29b      	uxth	r3, r3
100085c4:	3b01      	subs	r3, #1
100085c6:	b29a      	uxth	r2, r3
100085c8:	1dbb      	adds	r3, r7, #6
100085ca:	801a      	strh	r2, [r3, #0]
100085cc:	1dbb      	adds	r3, r7, #6
100085ce:	2200      	movs	r2, #0
100085d0:	5e9b      	ldrsh	r3, [r3, r2]
100085d2:	2b00      	cmp	r3, #0
100085d4:	dcea      	bgt.n	100085ac <fillRect+0x134>
	for(y=h; y>0; y--) {
100085d6:	1d3b      	adds	r3, r7, #4
100085d8:	2200      	movs	r2, #0
100085da:	5e9b      	ldrsh	r3, [r3, r2]
100085dc:	b29b      	uxth	r3, r3
100085de:	3b01      	subs	r3, #1
100085e0:	b29a      	uxth	r2, r3
100085e2:	1d3b      	adds	r3, r7, #4
100085e4:	801a      	strh	r2, [r3, #0]
100085e6:	1d3b      	adds	r3, r7, #4
100085e8:	2200      	movs	r2, #0
100085ea:	5e9b      	ldrsh	r3, [r3, r2]
100085ec:	2b00      	cmp	r3, #0
100085ee:	dcd8      	bgt.n	100085a2 <fillRect+0x12a>
		}
	}
	CS_HIGH();
100085f0:	2101      	movs	r1, #1
100085f2:	200c      	movs	r0, #12
100085f4:	4b06      	ldr	r3, [pc, #24]	; (10008610 <fillRect+0x198>)
100085f6:	4798      	blx	r3
100085f8:	e000      	b.n	100085fc <fillRect+0x184>
	if((x >= _width) || (y >= _height)) return;
100085fa:	46c0      	nop			; (mov r8, r8)
}
100085fc:	46bd      	mov	sp, r7
100085fe:	b004      	add	sp, #16
10008600:	bdb0      	pop	{r4, r5, r7, pc}
10008602:	46c0      	nop			; (mov r8, r8)
10008604:	10011248 	.word	0x10011248
10008608:	1001124a 	.word	0x1001124a
1000860c:	10008395 	.word	0x10008395
10008610:	10008355 	.word	0x10008355
10008614:	10011140 	.word	0x10011140
10008618:	10009f89 	.word	0x10009f89

1000861c <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color) {
1000861c:	b590      	push	{r4, r7, lr}
1000861e:	b085      	sub	sp, #20
10008620:	af00      	add	r7, sp, #0
10008622:	0004      	movs	r4, r0
10008624:	0008      	movs	r0, r1
10008626:	0011      	movs	r1, r2
10008628:	1dbb      	adds	r3, r7, #6
1000862a:	1c22      	adds	r2, r4, #0
1000862c:	801a      	strh	r2, [r3, #0]
1000862e:	1d3b      	adds	r3, r7, #4
10008630:	1c02      	adds	r2, r0, #0
10008632:	801a      	strh	r2, [r3, #0]
10008634:	1cbb      	adds	r3, r7, #2
10008636:	1c0a      	adds	r2, r1, #0
10008638:	801a      	strh	r2, [r3, #0]

	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
1000863a:	1dbb      	adds	r3, r7, #6
1000863c:	2200      	movs	r2, #0
1000863e:	5e9b      	ldrsh	r3, [r3, r2]
10008640:	2b00      	cmp	r3, #0
10008642:	db47      	blt.n	100086d4 <drawPixel+0xb8>
10008644:	1dbb      	adds	r3, r7, #6
10008646:	2200      	movs	r2, #0
10008648:	5e9b      	ldrsh	r3, [r3, r2]
1000864a:	4a24      	ldr	r2, [pc, #144]	; (100086dc <drawPixel+0xc0>)
1000864c:	7812      	ldrb	r2, [r2, #0]
1000864e:	4293      	cmp	r3, r2
10008650:	da40      	bge.n	100086d4 <drawPixel+0xb8>
10008652:	1d3b      	adds	r3, r7, #4
10008654:	2200      	movs	r2, #0
10008656:	5e9b      	ldrsh	r3, [r3, r2]
10008658:	2b00      	cmp	r3, #0
1000865a:	db3b      	blt.n	100086d4 <drawPixel+0xb8>
1000865c:	1d3b      	adds	r3, r7, #4
1000865e:	2200      	movs	r2, #0
10008660:	5e9b      	ldrsh	r3, [r3, r2]
10008662:	4a1f      	ldr	r2, [pc, #124]	; (100086e0 <drawPixel+0xc4>)
10008664:	7812      	ldrb	r2, [r2, #0]
10008666:	4293      	cmp	r3, r2
10008668:	da34      	bge.n	100086d4 <drawPixel+0xb8>

	setAddrWindow(x,y,x+1,y+1);
1000866a:	1dbb      	adds	r3, r7, #6
1000866c:	881b      	ldrh	r3, [r3, #0]
1000866e:	b2d8      	uxtb	r0, r3
10008670:	1d3b      	adds	r3, r7, #4
10008672:	881b      	ldrh	r3, [r3, #0]
10008674:	b2d9      	uxtb	r1, r3
10008676:	1dbb      	adds	r3, r7, #6
10008678:	881b      	ldrh	r3, [r3, #0]
1000867a:	b2db      	uxtb	r3, r3
1000867c:	3301      	adds	r3, #1
1000867e:	b2da      	uxtb	r2, r3
10008680:	1d3b      	adds	r3, r7, #4
10008682:	881b      	ldrh	r3, [r3, #0]
10008684:	b2db      	uxtb	r3, r3
10008686:	3301      	adds	r3, #1
10008688:	b2db      	uxtb	r3, r3
1000868a:	4c16      	ldr	r4, [pc, #88]	; (100086e4 <drawPixel+0xc8>)
1000868c:	47a0      	blx	r4

	uint8_t color_buff[2];
	color_buff[0] = color >> 8;
1000868e:	1cbb      	adds	r3, r7, #2
10008690:	881b      	ldrh	r3, [r3, #0]
10008692:	0a1b      	lsrs	r3, r3, #8
10008694:	b29b      	uxth	r3, r3
10008696:	b2da      	uxtb	r2, r3
10008698:	230c      	movs	r3, #12
1000869a:	18fb      	adds	r3, r7, r3
1000869c:	701a      	strb	r2, [r3, #0]
	color_buff[1] = color & 0xff;
1000869e:	1cbb      	adds	r3, r7, #2
100086a0:	881b      	ldrh	r3, [r3, #0]
100086a2:	b2da      	uxtb	r2, r3
100086a4:	230c      	movs	r3, #12
100086a6:	18fb      	adds	r3, r7, r3
100086a8:	705a      	strb	r2, [r3, #1]

	DC_HIGH();
100086aa:	2101      	movs	r1, #1
100086ac:	2007      	movs	r0, #7
100086ae:	4b0e      	ldr	r3, [pc, #56]	; (100086e8 <drawPixel+0xcc>)
100086b0:	4798      	blx	r3
	CS_LOW();
100086b2:	2100      	movs	r1, #0
100086b4:	200c      	movs	r0, #12
100086b6:	4b0c      	ldr	r3, [pc, #48]	; (100086e8 <drawPixel+0xcc>)
100086b8:	4798      	blx	r3
	io_write(io_lcd_spi, color_buff, 2);
100086ba:	4b0c      	ldr	r3, [pc, #48]	; (100086ec <drawPixel+0xd0>)
100086bc:	681b      	ldr	r3, [r3, #0]
100086be:	220c      	movs	r2, #12
100086c0:	18b9      	adds	r1, r7, r2
100086c2:	2202      	movs	r2, #2
100086c4:	0018      	movs	r0, r3
100086c6:	4b0a      	ldr	r3, [pc, #40]	; (100086f0 <drawPixel+0xd4>)
100086c8:	4798      	blx	r3
	CS_HIGH();
100086ca:	2101      	movs	r1, #1
100086cc:	200c      	movs	r0, #12
100086ce:	4b06      	ldr	r3, [pc, #24]	; (100086e8 <drawPixel+0xcc>)
100086d0:	4798      	blx	r3
100086d2:	e000      	b.n	100086d6 <drawPixel+0xba>
	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
100086d4:	46c0      	nop			; (mov r8, r8)
}
100086d6:	46bd      	mov	sp, r7
100086d8:	b005      	add	sp, #20
100086da:	bd90      	pop	{r4, r7, pc}
100086dc:	10011248 	.word	0x10011248
100086e0:	1001124a 	.word	0x1001124a
100086e4:	10008395 	.word	0x10008395
100086e8:	10008355 	.word	0x10008355
100086ec:	10011140 	.word	0x10011140
100086f0:	10009f89 	.word	0x10009f89

100086f4 <setRotation>:
#define MADCTL_ML  0x10
#define MADCTL_RGB 0x00
#define MADCTL_BGR 0x08
#define MADCTL_MH  0x04

void setRotation(uint8_t m) {
100086f4:	b580      	push	{r7, lr}
100086f6:	b084      	sub	sp, #16
100086f8:	af00      	add	r7, sp, #0
100086fa:	0002      	movs	r2, r0
100086fc:	1dfb      	adds	r3, r7, #7
100086fe:	701a      	strb	r2, [r3, #0]

  writecommand(ST7735_MADCTL);
10008700:	2036      	movs	r0, #54	; 0x36
10008702:	4b76      	ldr	r3, [pc, #472]	; (100088dc <setRotation+0x1e8>)
10008704:	4798      	blx	r3
  uint8_t rotation = m % 4; // can't be higher than 3
10008706:	230f      	movs	r3, #15
10008708:	18fb      	adds	r3, r7, r3
1000870a:	1dfa      	adds	r2, r7, #7
1000870c:	7812      	ldrb	r2, [r2, #0]
1000870e:	2103      	movs	r1, #3
10008710:	400a      	ands	r2, r1
10008712:	701a      	strb	r2, [r3, #0]
  switch (rotation) {
10008714:	230f      	movs	r3, #15
10008716:	18fb      	adds	r3, r7, r3
10008718:	781b      	ldrb	r3, [r3, #0]
1000871a:	2b01      	cmp	r3, #1
1000871c:	d03e      	beq.n	1000879c <setRotation+0xa8>
1000871e:	dc02      	bgt.n	10008726 <setRotation+0x32>
10008720:	2b00      	cmp	r3, #0
10008722:	d007      	beq.n	10008734 <setRotation+0x40>
     }
     ystart = colstart;
     xstart = rowstart;
     break;
  }
}
10008724:	e0d6      	b.n	100088d4 <setRotation+0x1e0>
  switch (rotation) {
10008726:	2b02      	cmp	r3, #2
10008728:	d100      	bne.n	1000872c <setRotation+0x38>
1000872a:	e06b      	b.n	10008804 <setRotation+0x110>
1000872c:	2b03      	cmp	r3, #3
1000872e:	d100      	bne.n	10008732 <setRotation+0x3e>
10008730:	e09c      	b.n	1000886c <setRotation+0x178>
}
10008732:	e0cf      	b.n	100088d4 <setRotation+0x1e0>
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
10008734:	4b6a      	ldr	r3, [pc, #424]	; (100088e0 <setRotation+0x1ec>)
10008736:	781b      	ldrb	r3, [r3, #0]
10008738:	2b02      	cmp	r3, #2
1000873a:	d003      	beq.n	10008744 <setRotation+0x50>
1000873c:	4b68      	ldr	r3, [pc, #416]	; (100088e0 <setRotation+0x1ec>)
1000873e:	781b      	ldrb	r3, [r3, #0]
10008740:	2b04      	cmp	r3, #4
10008742:	d103      	bne.n	1000874c <setRotation+0x58>
       writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
10008744:	20c0      	movs	r0, #192	; 0xc0
10008746:	4b67      	ldr	r3, [pc, #412]	; (100088e4 <setRotation+0x1f0>)
10008748:	4798      	blx	r3
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
1000874a:	e002      	b.n	10008752 <setRotation+0x5e>
       writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
1000874c:	20c8      	movs	r0, #200	; 0xc8
1000874e:	4b65      	ldr	r3, [pc, #404]	; (100088e4 <setRotation+0x1f0>)
10008750:	4798      	blx	r3
     if (tabcolor == INITR_144GREENTAB) {
10008752:	4b63      	ldr	r3, [pc, #396]	; (100088e0 <setRotation+0x1ec>)
10008754:	781b      	ldrb	r3, [r3, #0]
10008756:	2b01      	cmp	r3, #1
10008758:	d106      	bne.n	10008768 <setRotation+0x74>
       _height = ST7735_TFTHEIGHT_128;
1000875a:	4b63      	ldr	r3, [pc, #396]	; (100088e8 <setRotation+0x1f4>)
1000875c:	2280      	movs	r2, #128	; 0x80
1000875e:	701a      	strb	r2, [r3, #0]
       _width  = ST7735_TFTWIDTH_128;
10008760:	4b62      	ldr	r3, [pc, #392]	; (100088ec <setRotation+0x1f8>)
10008762:	2280      	movs	r2, #128	; 0x80
10008764:	701a      	strb	r2, [r3, #0]
10008766:	e010      	b.n	1000878a <setRotation+0x96>
     } else if (tabcolor == INITR_MINI160x80)  {
10008768:	4b5d      	ldr	r3, [pc, #372]	; (100088e0 <setRotation+0x1ec>)
1000876a:	781b      	ldrb	r3, [r3, #0]
1000876c:	2b04      	cmp	r3, #4
1000876e:	d106      	bne.n	1000877e <setRotation+0x8a>
       _height = ST7735_TFTHEIGHT_160;
10008770:	4b5d      	ldr	r3, [pc, #372]	; (100088e8 <setRotation+0x1f4>)
10008772:	22a0      	movs	r2, #160	; 0xa0
10008774:	701a      	strb	r2, [r3, #0]
       _width = ST7735_TFTWIDTH_80;
10008776:	4b5d      	ldr	r3, [pc, #372]	; (100088ec <setRotation+0x1f8>)
10008778:	2250      	movs	r2, #80	; 0x50
1000877a:	701a      	strb	r2, [r3, #0]
1000877c:	e005      	b.n	1000878a <setRotation+0x96>
       _height = ST7735_TFTHEIGHT_160;
1000877e:	4b5a      	ldr	r3, [pc, #360]	; (100088e8 <setRotation+0x1f4>)
10008780:	22a0      	movs	r2, #160	; 0xa0
10008782:	701a      	strb	r2, [r3, #0]
       _width  = ST7735_TFTWIDTH_128;
10008784:	4b59      	ldr	r3, [pc, #356]	; (100088ec <setRotation+0x1f8>)
10008786:	2280      	movs	r2, #128	; 0x80
10008788:	701a      	strb	r2, [r3, #0]
     xstart = colstart;
1000878a:	4b59      	ldr	r3, [pc, #356]	; (100088f0 <setRotation+0x1fc>)
1000878c:	781a      	ldrb	r2, [r3, #0]
1000878e:	4b59      	ldr	r3, [pc, #356]	; (100088f4 <setRotation+0x200>)
10008790:	701a      	strb	r2, [r3, #0]
     ystart = rowstart;
10008792:	4b59      	ldr	r3, [pc, #356]	; (100088f8 <setRotation+0x204>)
10008794:	781a      	ldrb	r2, [r3, #0]
10008796:	4b59      	ldr	r3, [pc, #356]	; (100088fc <setRotation+0x208>)
10008798:	701a      	strb	r2, [r3, #0]
     break;
1000879a:	e09b      	b.n	100088d4 <setRotation+0x1e0>
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
1000879c:	4b50      	ldr	r3, [pc, #320]	; (100088e0 <setRotation+0x1ec>)
1000879e:	781b      	ldrb	r3, [r3, #0]
100087a0:	2b02      	cmp	r3, #2
100087a2:	d003      	beq.n	100087ac <setRotation+0xb8>
100087a4:	4b4e      	ldr	r3, [pc, #312]	; (100088e0 <setRotation+0x1ec>)
100087a6:	781b      	ldrb	r3, [r3, #0]
100087a8:	2b04      	cmp	r3, #4
100087aa:	d103      	bne.n	100087b4 <setRotation+0xc0>
       writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
100087ac:	20a0      	movs	r0, #160	; 0xa0
100087ae:	4b4d      	ldr	r3, [pc, #308]	; (100088e4 <setRotation+0x1f0>)
100087b0:	4798      	blx	r3
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
100087b2:	e002      	b.n	100087ba <setRotation+0xc6>
       writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
100087b4:	20a8      	movs	r0, #168	; 0xa8
100087b6:	4b4b      	ldr	r3, [pc, #300]	; (100088e4 <setRotation+0x1f0>)
100087b8:	4798      	blx	r3
     if (tabcolor == INITR_144GREENTAB)  {
100087ba:	4b49      	ldr	r3, [pc, #292]	; (100088e0 <setRotation+0x1ec>)
100087bc:	781b      	ldrb	r3, [r3, #0]
100087be:	2b01      	cmp	r3, #1
100087c0:	d106      	bne.n	100087d0 <setRotation+0xdc>
       _width = ST7735_TFTHEIGHT_128;
100087c2:	4b4a      	ldr	r3, [pc, #296]	; (100088ec <setRotation+0x1f8>)
100087c4:	2280      	movs	r2, #128	; 0x80
100087c6:	701a      	strb	r2, [r3, #0]
       _height = ST7735_TFTWIDTH_128;
100087c8:	4b47      	ldr	r3, [pc, #284]	; (100088e8 <setRotation+0x1f4>)
100087ca:	2280      	movs	r2, #128	; 0x80
100087cc:	701a      	strb	r2, [r3, #0]
100087ce:	e010      	b.n	100087f2 <setRotation+0xfe>
     } else if (tabcolor == INITR_MINI160x80)  {
100087d0:	4b43      	ldr	r3, [pc, #268]	; (100088e0 <setRotation+0x1ec>)
100087d2:	781b      	ldrb	r3, [r3, #0]
100087d4:	2b04      	cmp	r3, #4
100087d6:	d106      	bne.n	100087e6 <setRotation+0xf2>
       _width = ST7735_TFTHEIGHT_160;
100087d8:	4b44      	ldr	r3, [pc, #272]	; (100088ec <setRotation+0x1f8>)
100087da:	22a0      	movs	r2, #160	; 0xa0
100087dc:	701a      	strb	r2, [r3, #0]
       _height = ST7735_TFTWIDTH_80;
100087de:	4b42      	ldr	r3, [pc, #264]	; (100088e8 <setRotation+0x1f4>)
100087e0:	2250      	movs	r2, #80	; 0x50
100087e2:	701a      	strb	r2, [r3, #0]
100087e4:	e005      	b.n	100087f2 <setRotation+0xfe>
       _width = ST7735_TFTHEIGHT_160;
100087e6:	4b41      	ldr	r3, [pc, #260]	; (100088ec <setRotation+0x1f8>)
100087e8:	22a0      	movs	r2, #160	; 0xa0
100087ea:	701a      	strb	r2, [r3, #0]
       _height = ST7735_TFTWIDTH_128;
100087ec:	4b3e      	ldr	r3, [pc, #248]	; (100088e8 <setRotation+0x1f4>)
100087ee:	2280      	movs	r2, #128	; 0x80
100087f0:	701a      	strb	r2, [r3, #0]
     ystart = colstart;
100087f2:	4b3f      	ldr	r3, [pc, #252]	; (100088f0 <setRotation+0x1fc>)
100087f4:	781a      	ldrb	r2, [r3, #0]
100087f6:	4b41      	ldr	r3, [pc, #260]	; (100088fc <setRotation+0x208>)
100087f8:	701a      	strb	r2, [r3, #0]
     xstart = rowstart;
100087fa:	4b3f      	ldr	r3, [pc, #252]	; (100088f8 <setRotation+0x204>)
100087fc:	781a      	ldrb	r2, [r3, #0]
100087fe:	4b3d      	ldr	r3, [pc, #244]	; (100088f4 <setRotation+0x200>)
10008800:	701a      	strb	r2, [r3, #0]
     break;
10008802:	e067      	b.n	100088d4 <setRotation+0x1e0>
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
10008804:	4b36      	ldr	r3, [pc, #216]	; (100088e0 <setRotation+0x1ec>)
10008806:	781b      	ldrb	r3, [r3, #0]
10008808:	2b02      	cmp	r3, #2
1000880a:	d003      	beq.n	10008814 <setRotation+0x120>
1000880c:	4b34      	ldr	r3, [pc, #208]	; (100088e0 <setRotation+0x1ec>)
1000880e:	781b      	ldrb	r3, [r3, #0]
10008810:	2b04      	cmp	r3, #4
10008812:	d103      	bne.n	1000881c <setRotation+0x128>
       writedata(MADCTL_RGB);
10008814:	2000      	movs	r0, #0
10008816:	4b33      	ldr	r3, [pc, #204]	; (100088e4 <setRotation+0x1f0>)
10008818:	4798      	blx	r3
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
1000881a:	e002      	b.n	10008822 <setRotation+0x12e>
       writedata(MADCTL_BGR);
1000881c:	2008      	movs	r0, #8
1000881e:	4b31      	ldr	r3, [pc, #196]	; (100088e4 <setRotation+0x1f0>)
10008820:	4798      	blx	r3
     if (tabcolor == INITR_144GREENTAB) {
10008822:	4b2f      	ldr	r3, [pc, #188]	; (100088e0 <setRotation+0x1ec>)
10008824:	781b      	ldrb	r3, [r3, #0]
10008826:	2b01      	cmp	r3, #1
10008828:	d106      	bne.n	10008838 <setRotation+0x144>
       _height = ST7735_TFTHEIGHT_128;
1000882a:	4b2f      	ldr	r3, [pc, #188]	; (100088e8 <setRotation+0x1f4>)
1000882c:	2280      	movs	r2, #128	; 0x80
1000882e:	701a      	strb	r2, [r3, #0]
       _width  = ST7735_TFTWIDTH_128;
10008830:	4b2e      	ldr	r3, [pc, #184]	; (100088ec <setRotation+0x1f8>)
10008832:	2280      	movs	r2, #128	; 0x80
10008834:	701a      	strb	r2, [r3, #0]
10008836:	e010      	b.n	1000885a <setRotation+0x166>
     } else if (tabcolor == INITR_MINI160x80)  {
10008838:	4b29      	ldr	r3, [pc, #164]	; (100088e0 <setRotation+0x1ec>)
1000883a:	781b      	ldrb	r3, [r3, #0]
1000883c:	2b04      	cmp	r3, #4
1000883e:	d106      	bne.n	1000884e <setRotation+0x15a>
       _height = ST7735_TFTHEIGHT_160;
10008840:	4b29      	ldr	r3, [pc, #164]	; (100088e8 <setRotation+0x1f4>)
10008842:	22a0      	movs	r2, #160	; 0xa0
10008844:	701a      	strb	r2, [r3, #0]
       _width = ST7735_TFTWIDTH_80;
10008846:	4b29      	ldr	r3, [pc, #164]	; (100088ec <setRotation+0x1f8>)
10008848:	2250      	movs	r2, #80	; 0x50
1000884a:	701a      	strb	r2, [r3, #0]
1000884c:	e005      	b.n	1000885a <setRotation+0x166>
       _height = ST7735_TFTHEIGHT_160;
1000884e:	4b26      	ldr	r3, [pc, #152]	; (100088e8 <setRotation+0x1f4>)
10008850:	22a0      	movs	r2, #160	; 0xa0
10008852:	701a      	strb	r2, [r3, #0]
       _width  = ST7735_TFTWIDTH_128;
10008854:	4b25      	ldr	r3, [pc, #148]	; (100088ec <setRotation+0x1f8>)
10008856:	2280      	movs	r2, #128	; 0x80
10008858:	701a      	strb	r2, [r3, #0]
     xstart = colstart;
1000885a:	4b25      	ldr	r3, [pc, #148]	; (100088f0 <setRotation+0x1fc>)
1000885c:	781a      	ldrb	r2, [r3, #0]
1000885e:	4b25      	ldr	r3, [pc, #148]	; (100088f4 <setRotation+0x200>)
10008860:	701a      	strb	r2, [r3, #0]
     ystart = rowstart;
10008862:	4b25      	ldr	r3, [pc, #148]	; (100088f8 <setRotation+0x204>)
10008864:	781a      	ldrb	r2, [r3, #0]
10008866:	4b25      	ldr	r3, [pc, #148]	; (100088fc <setRotation+0x208>)
10008868:	701a      	strb	r2, [r3, #0]
     break;
1000886a:	e033      	b.n	100088d4 <setRotation+0x1e0>
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
1000886c:	4b1c      	ldr	r3, [pc, #112]	; (100088e0 <setRotation+0x1ec>)
1000886e:	781b      	ldrb	r3, [r3, #0]
10008870:	2b02      	cmp	r3, #2
10008872:	d003      	beq.n	1000887c <setRotation+0x188>
10008874:	4b1a      	ldr	r3, [pc, #104]	; (100088e0 <setRotation+0x1ec>)
10008876:	781b      	ldrb	r3, [r3, #0]
10008878:	2b04      	cmp	r3, #4
1000887a:	d103      	bne.n	10008884 <setRotation+0x190>
       writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
1000887c:	2060      	movs	r0, #96	; 0x60
1000887e:	4b19      	ldr	r3, [pc, #100]	; (100088e4 <setRotation+0x1f0>)
10008880:	4798      	blx	r3
     if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
10008882:	e002      	b.n	1000888a <setRotation+0x196>
       writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
10008884:	2068      	movs	r0, #104	; 0x68
10008886:	4b17      	ldr	r3, [pc, #92]	; (100088e4 <setRotation+0x1f0>)
10008888:	4798      	blx	r3
     if (tabcolor == INITR_144GREENTAB)  {
1000888a:	4b15      	ldr	r3, [pc, #84]	; (100088e0 <setRotation+0x1ec>)
1000888c:	781b      	ldrb	r3, [r3, #0]
1000888e:	2b01      	cmp	r3, #1
10008890:	d106      	bne.n	100088a0 <setRotation+0x1ac>
       _width = ST7735_TFTHEIGHT_128;
10008892:	4b16      	ldr	r3, [pc, #88]	; (100088ec <setRotation+0x1f8>)
10008894:	2280      	movs	r2, #128	; 0x80
10008896:	701a      	strb	r2, [r3, #0]
       _height = ST7735_TFTWIDTH_128;
10008898:	4b13      	ldr	r3, [pc, #76]	; (100088e8 <setRotation+0x1f4>)
1000889a:	2280      	movs	r2, #128	; 0x80
1000889c:	701a      	strb	r2, [r3, #0]
1000889e:	e010      	b.n	100088c2 <setRotation+0x1ce>
     } else if (tabcolor == INITR_MINI160x80)  {
100088a0:	4b0f      	ldr	r3, [pc, #60]	; (100088e0 <setRotation+0x1ec>)
100088a2:	781b      	ldrb	r3, [r3, #0]
100088a4:	2b04      	cmp	r3, #4
100088a6:	d106      	bne.n	100088b6 <setRotation+0x1c2>
       _width = ST7735_TFTHEIGHT_160;
100088a8:	4b10      	ldr	r3, [pc, #64]	; (100088ec <setRotation+0x1f8>)
100088aa:	22a0      	movs	r2, #160	; 0xa0
100088ac:	701a      	strb	r2, [r3, #0]
       _height = ST7735_TFTWIDTH_80;
100088ae:	4b0e      	ldr	r3, [pc, #56]	; (100088e8 <setRotation+0x1f4>)
100088b0:	2250      	movs	r2, #80	; 0x50
100088b2:	701a      	strb	r2, [r3, #0]
100088b4:	e005      	b.n	100088c2 <setRotation+0x1ce>
       _width = ST7735_TFTHEIGHT_160;
100088b6:	4b0d      	ldr	r3, [pc, #52]	; (100088ec <setRotation+0x1f8>)
100088b8:	22a0      	movs	r2, #160	; 0xa0
100088ba:	701a      	strb	r2, [r3, #0]
       _height = ST7735_TFTWIDTH_128;
100088bc:	4b0a      	ldr	r3, [pc, #40]	; (100088e8 <setRotation+0x1f4>)
100088be:	2280      	movs	r2, #128	; 0x80
100088c0:	701a      	strb	r2, [r3, #0]
     ystart = colstart;
100088c2:	4b0b      	ldr	r3, [pc, #44]	; (100088f0 <setRotation+0x1fc>)
100088c4:	781a      	ldrb	r2, [r3, #0]
100088c6:	4b0d      	ldr	r3, [pc, #52]	; (100088fc <setRotation+0x208>)
100088c8:	701a      	strb	r2, [r3, #0]
     xstart = rowstart;
100088ca:	4b0b      	ldr	r3, [pc, #44]	; (100088f8 <setRotation+0x204>)
100088cc:	781a      	ldrb	r2, [r3, #0]
100088ce:	4b09      	ldr	r3, [pc, #36]	; (100088f4 <setRotation+0x200>)
100088d0:	701a      	strb	r2, [r3, #0]
     break;
100088d2:	46c0      	nop			; (mov r8, r8)
}
100088d4:	46c0      	nop			; (mov r8, r8)
100088d6:	46bd      	mov	sp, r7
100088d8:	b004      	add	sp, #16
100088da:	bd80      	pop	{r7, pc}
100088dc:	100089d9 	.word	0x100089d9
100088e0:	1001113c 	.word	0x1001113c
100088e4:	10008a21 	.word	0x10008a21
100088e8:	1001124a 	.word	0x1001124a
100088ec:	10011248 	.word	0x10011248
100088f0:	10011249 	.word	0x10011249
100088f4:	10011144 	.word	0x10011144
100088f8:	1001124b 	.word	0x1001124b
100088fc:	10011145 	.word	0x10011145

10008900 <commandList>:


void commandList(const uint8_t *addr) {
10008900:	b580      	push	{r7, lr}
10008902:	b084      	sub	sp, #16
10008904:	af00      	add	r7, sp, #0
10008906:	6078      	str	r0, [r7, #4]

	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = pgm_read_byte(addr++);   // Number of commands to follow
10008908:	687b      	ldr	r3, [r7, #4]
1000890a:	1c5a      	adds	r2, r3, #1
1000890c:	607a      	str	r2, [r7, #4]
1000890e:	220f      	movs	r2, #15
10008910:	18ba      	adds	r2, r7, r2
10008912:	781b      	ldrb	r3, [r3, #0]
10008914:	7013      	strb	r3, [r2, #0]
	while(numCommands--) {                 // For each command...
10008916:	e04b      	b.n	100089b0 <commandList+0xb0>
		writecommand(pgm_read_byte(addr++)); //   Read, issue command
10008918:	687b      	ldr	r3, [r7, #4]
1000891a:	1c5a      	adds	r2, r3, #1
1000891c:	607a      	str	r2, [r7, #4]
1000891e:	781b      	ldrb	r3, [r3, #0]
10008920:	0018      	movs	r0, r3
10008922:	4b2a      	ldr	r3, [pc, #168]	; (100089cc <commandList+0xcc>)
10008924:	4798      	blx	r3
		numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
10008926:	687b      	ldr	r3, [r7, #4]
10008928:	1c5a      	adds	r2, r3, #1
1000892a:	607a      	str	r2, [r7, #4]
1000892c:	220e      	movs	r2, #14
1000892e:	18ba      	adds	r2, r7, r2
10008930:	781b      	ldrb	r3, [r3, #0]
10008932:	7013      	strb	r3, [r2, #0]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
10008934:	230e      	movs	r3, #14
10008936:	18fb      	adds	r3, r7, r3
10008938:	781b      	ldrb	r3, [r3, #0]
1000893a:	b29a      	uxth	r2, r3
1000893c:	230c      	movs	r3, #12
1000893e:	18fb      	adds	r3, r7, r3
10008940:	2180      	movs	r1, #128	; 0x80
10008942:	400a      	ands	r2, r1
10008944:	801a      	strh	r2, [r3, #0]
		numArgs &= ~DELAY;                   //   Mask out delay bit
10008946:	230e      	movs	r3, #14
10008948:	18fb      	adds	r3, r7, r3
1000894a:	220e      	movs	r2, #14
1000894c:	18ba      	adds	r2, r7, r2
1000894e:	7812      	ldrb	r2, [r2, #0]
10008950:	217f      	movs	r1, #127	; 0x7f
10008952:	400a      	ands	r2, r1
10008954:	701a      	strb	r2, [r3, #0]
		while(numArgs--) {                   //   For each argument...
10008956:	e006      	b.n	10008966 <commandList+0x66>
			writedata(pgm_read_byte(addr++));  //     Read, issue argument
10008958:	687b      	ldr	r3, [r7, #4]
1000895a:	1c5a      	adds	r2, r3, #1
1000895c:	607a      	str	r2, [r7, #4]
1000895e:	781b      	ldrb	r3, [r3, #0]
10008960:	0018      	movs	r0, r3
10008962:	4b1b      	ldr	r3, [pc, #108]	; (100089d0 <commandList+0xd0>)
10008964:	4798      	blx	r3
		while(numArgs--) {                   //   For each argument...
10008966:	230e      	movs	r3, #14
10008968:	18fb      	adds	r3, r7, r3
1000896a:	781b      	ldrb	r3, [r3, #0]
1000896c:	220e      	movs	r2, #14
1000896e:	18ba      	adds	r2, r7, r2
10008970:	1e59      	subs	r1, r3, #1
10008972:	7011      	strb	r1, [r2, #0]
10008974:	2b00      	cmp	r3, #0
10008976:	d1ef      	bne.n	10008958 <commandList+0x58>
		}

		if(ms) {
10008978:	230c      	movs	r3, #12
1000897a:	18fb      	adds	r3, r7, r3
1000897c:	881b      	ldrh	r3, [r3, #0]
1000897e:	2b00      	cmp	r3, #0
10008980:	d016      	beq.n	100089b0 <commandList+0xb0>
			ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
10008982:	687b      	ldr	r3, [r7, #4]
10008984:	1c5a      	adds	r2, r3, #1
10008986:	607a      	str	r2, [r7, #4]
10008988:	781a      	ldrb	r2, [r3, #0]
1000898a:	230c      	movs	r3, #12
1000898c:	18fb      	adds	r3, r7, r3
1000898e:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
10008990:	230c      	movs	r3, #12
10008992:	18fb      	adds	r3, r7, r3
10008994:	881b      	ldrh	r3, [r3, #0]
10008996:	2bff      	cmp	r3, #255	; 0xff
10008998:	d104      	bne.n	100089a4 <commandList+0xa4>
1000899a:	230c      	movs	r3, #12
1000899c:	18fb      	adds	r3, r7, r3
1000899e:	22fa      	movs	r2, #250	; 0xfa
100089a0:	0052      	lsls	r2, r2, #1
100089a2:	801a      	strh	r2, [r3, #0]
			delay(ms);
100089a4:	230c      	movs	r3, #12
100089a6:	18fb      	adds	r3, r7, r3
100089a8:	881b      	ldrh	r3, [r3, #0]
100089aa:	0018      	movs	r0, r3
100089ac:	4b09      	ldr	r3, [pc, #36]	; (100089d4 <commandList+0xd4>)
100089ae:	4798      	blx	r3
	while(numCommands--) {                 // For each command...
100089b0:	230f      	movs	r3, #15
100089b2:	18fb      	adds	r3, r7, r3
100089b4:	781b      	ldrb	r3, [r3, #0]
100089b6:	220f      	movs	r2, #15
100089b8:	18ba      	adds	r2, r7, r2
100089ba:	1e59      	subs	r1, r3, #1
100089bc:	7011      	strb	r1, [r2, #0]
100089be:	2b00      	cmp	r3, #0
100089c0:	d1aa      	bne.n	10008918 <commandList+0x18>
		}
	}
}
100089c2:	46c0      	nop			; (mov r8, r8)
100089c4:	46bd      	mov	sp, r7
100089c6:	b004      	add	sp, #16
100089c8:	bd80      	pop	{r7, pc}
100089ca:	46c0      	nop			; (mov r8, r8)
100089cc:	100089d9 	.word	0x100089d9
100089d0:	10008a21 	.word	0x10008a21
100089d4:	1000d649 	.word	0x1000d649

100089d8 <writecommand>:
	gpio_set_pin_level(GPIO_PIN_BKL, HIGH);
  else
	gpio_set_pin_level(GPIO_PIN_BKL, LOW);
}

void writecommand(uint8_t c) {
100089d8:	b580      	push	{r7, lr}
100089da:	b082      	sub	sp, #8
100089dc:	af00      	add	r7, sp, #0
100089de:	0002      	movs	r2, r0
100089e0:	1dfb      	adds	r3, r7, #7
100089e2:	701a      	strb	r2, [r3, #0]
	DC_LOW();
100089e4:	2100      	movs	r1, #0
100089e6:	2007      	movs	r0, #7
100089e8:	4b0a      	ldr	r3, [pc, #40]	; (10008a14 <writecommand+0x3c>)
100089ea:	4798      	blx	r3
	CS_LOW();
100089ec:	2100      	movs	r1, #0
100089ee:	200c      	movs	r0, #12
100089f0:	4b08      	ldr	r3, [pc, #32]	; (10008a14 <writecommand+0x3c>)
100089f2:	4798      	blx	r3
	io_write(io_lcd_spi, &c, 1);
100089f4:	4b08      	ldr	r3, [pc, #32]	; (10008a18 <writecommand+0x40>)
100089f6:	681b      	ldr	r3, [r3, #0]
100089f8:	1df9      	adds	r1, r7, #7
100089fa:	2201      	movs	r2, #1
100089fc:	0018      	movs	r0, r3
100089fe:	4b07      	ldr	r3, [pc, #28]	; (10008a1c <writecommand+0x44>)
10008a00:	4798      	blx	r3
	CS_HIGH();
10008a02:	2101      	movs	r1, #1
10008a04:	200c      	movs	r0, #12
10008a06:	4b03      	ldr	r3, [pc, #12]	; (10008a14 <writecommand+0x3c>)
10008a08:	4798      	blx	r3
}
10008a0a:	46c0      	nop			; (mov r8, r8)
10008a0c:	46bd      	mov	sp, r7
10008a0e:	b002      	add	sp, #8
10008a10:	bd80      	pop	{r7, pc}
10008a12:	46c0      	nop			; (mov r8, r8)
10008a14:	10008355 	.word	0x10008355
10008a18:	10011140 	.word	0x10011140
10008a1c:	10009f89 	.word	0x10009f89

10008a20 <writedata>:

void writedata(uint8_t c) {
10008a20:	b580      	push	{r7, lr}
10008a22:	b082      	sub	sp, #8
10008a24:	af00      	add	r7, sp, #0
10008a26:	0002      	movs	r2, r0
10008a28:	1dfb      	adds	r3, r7, #7
10008a2a:	701a      	strb	r2, [r3, #0]
	DC_HIGH();
10008a2c:	2101      	movs	r1, #1
10008a2e:	2007      	movs	r0, #7
10008a30:	4b0a      	ldr	r3, [pc, #40]	; (10008a5c <writedata+0x3c>)
10008a32:	4798      	blx	r3
	CS_LOW();
10008a34:	2100      	movs	r1, #0
10008a36:	200c      	movs	r0, #12
10008a38:	4b08      	ldr	r3, [pc, #32]	; (10008a5c <writedata+0x3c>)
10008a3a:	4798      	blx	r3
	io_write(io_lcd_spi, &c, 1);
10008a3c:	4b08      	ldr	r3, [pc, #32]	; (10008a60 <writedata+0x40>)
10008a3e:	681b      	ldr	r3, [r3, #0]
10008a40:	1df9      	adds	r1, r7, #7
10008a42:	2201      	movs	r2, #1
10008a44:	0018      	movs	r0, r3
10008a46:	4b07      	ldr	r3, [pc, #28]	; (10008a64 <writedata+0x44>)
10008a48:	4798      	blx	r3
	CS_HIGH();
10008a4a:	2101      	movs	r1, #1
10008a4c:	200c      	movs	r0, #12
10008a4e:	4b03      	ldr	r3, [pc, #12]	; (10008a5c <writedata+0x3c>)
10008a50:	4798      	blx	r3
}
10008a52:	46c0      	nop			; (mov r8, r8)
10008a54:	46bd      	mov	sp, r7
10008a56:	b002      	add	sp, #8
10008a58:	bd80      	pop	{r7, pc}
10008a5a:	46c0      	nop			; (mov r8, r8)
10008a5c:	10008355 	.word	0x10008355
10008a60:	10011140 	.word	0x10011140
10008a64:	10009f89 	.word	0x10009f89

10008a68 <drawChar>:

uint8_t gfxFont = 0;

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
10008a68:	b5b0      	push	{r4, r5, r7, lr}
10008a6a:	b086      	sub	sp, #24
10008a6c:	af02      	add	r7, sp, #8
10008a6e:	0005      	movs	r5, r0
10008a70:	000c      	movs	r4, r1
10008a72:	0010      	movs	r0, r2
10008a74:	0019      	movs	r1, r3
10008a76:	1dbb      	adds	r3, r7, #6
10008a78:	1c2a      	adds	r2, r5, #0
10008a7a:	801a      	strh	r2, [r3, #0]
10008a7c:	1d3b      	adds	r3, r7, #4
10008a7e:	1c22      	adds	r2, r4, #0
10008a80:	801a      	strh	r2, [r3, #0]
10008a82:	1cfb      	adds	r3, r7, #3
10008a84:	1c02      	adds	r2, r0, #0
10008a86:	701a      	strb	r2, [r3, #0]
10008a88:	003b      	movs	r3, r7
10008a8a:	1c0a      	adds	r2, r1, #0
10008a8c:	801a      	strh	r2, [r3, #0]
    if(!gfxFont) { // 'Classic' built-in font
10008a8e:	4b90      	ldr	r3, [pc, #576]	; (10008cd0 <drawChar+0x268>)
10008a90:	781b      	ldrb	r3, [r3, #0]
10008a92:	2b00      	cmp	r3, #0
10008a94:	d000      	beq.n	10008a98 <drawChar+0x30>
10008a96:	e118      	b.n	10008cca <drawChar+0x262>

        if((x >= _width)            || // Clip right
10008a98:	1dbb      	adds	r3, r7, #6
10008a9a:	2200      	movs	r2, #0
10008a9c:	5e9b      	ldrsh	r3, [r3, r2]
10008a9e:	4a8d      	ldr	r2, [pc, #564]	; (10008cd4 <drawChar+0x26c>)
10008aa0:	7812      	ldrb	r2, [r2, #0]
10008aa2:	4293      	cmp	r3, r2
10008aa4:	db00      	blt.n	10008aa8 <drawChar+0x40>
10008aa6:	e10f      	b.n	10008cc8 <drawChar+0x260>
           (y >= _height)           || // Clip bottom
10008aa8:	1d3b      	adds	r3, r7, #4
10008aaa:	2200      	movs	r2, #0
10008aac:	5e9b      	ldrsh	r3, [r3, r2]
10008aae:	4a8a      	ldr	r2, [pc, #552]	; (10008cd8 <drawChar+0x270>)
10008ab0:	7812      	ldrb	r2, [r2, #0]
        if((x >= _width)            || // Clip right
10008ab2:	4293      	cmp	r3, r2
10008ab4:	db00      	blt.n	10008ab8 <drawChar+0x50>
10008ab6:	e107      	b.n	10008cc8 <drawChar+0x260>
           ((x + 6 * size - 1) < 0) || // Clip left
10008ab8:	1dbb      	adds	r3, r7, #6
10008aba:	2100      	movs	r1, #0
10008abc:	5e59      	ldrsh	r1, [r3, r1]
10008abe:	2324      	movs	r3, #36	; 0x24
10008ac0:	18fb      	adds	r3, r7, r3
10008ac2:	781a      	ldrb	r2, [r3, #0]
10008ac4:	0013      	movs	r3, r2
10008ac6:	005b      	lsls	r3, r3, #1
10008ac8:	189b      	adds	r3, r3, r2
10008aca:	005b      	lsls	r3, r3, #1
10008acc:	18cb      	adds	r3, r1, r3
10008ace:	3b01      	subs	r3, #1
           (y >= _height)           || // Clip bottom
10008ad0:	2b00      	cmp	r3, #0
10008ad2:	da00      	bge.n	10008ad6 <drawChar+0x6e>
10008ad4:	e0f8      	b.n	10008cc8 <drawChar+0x260>
           ((y + 8 * size - 1) < 0))   // Clip top
10008ad6:	1d3b      	adds	r3, r7, #4
10008ad8:	2200      	movs	r2, #0
10008ada:	5e9a      	ldrsh	r2, [r3, r2]
10008adc:	2324      	movs	r3, #36	; 0x24
10008ade:	18fb      	adds	r3, r7, r3
10008ae0:	781b      	ldrb	r3, [r3, #0]
10008ae2:	00db      	lsls	r3, r3, #3
10008ae4:	18d3      	adds	r3, r2, r3
10008ae6:	3b01      	subs	r3, #1
           ((x + 6 * size - 1) < 0) || // Clip left
10008ae8:	2b00      	cmp	r3, #0
10008aea:	da00      	bge.n	10008aee <drawChar+0x86>
10008aec:	e0ec      	b.n	10008cc8 <drawChar+0x260>
            return;

        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
10008aee:	230f      	movs	r3, #15
10008af0:	18fb      	adds	r3, r7, r3
10008af2:	2200      	movs	r2, #0
10008af4:	701a      	strb	r2, [r3, #0]
10008af6:	e0df      	b.n	10008cb8 <drawChar+0x250>
            uint8_t line = font[c * 5 + i];
10008af8:	1cfb      	adds	r3, r7, #3
10008afa:	781a      	ldrb	r2, [r3, #0]
10008afc:	0013      	movs	r3, r2
10008afe:	009b      	lsls	r3, r3, #2
10008b00:	189a      	adds	r2, r3, r2
10008b02:	230f      	movs	r3, #15
10008b04:	18fb      	adds	r3, r7, r3
10008b06:	781b      	ldrb	r3, [r3, #0]
10008b08:	b25b      	sxtb	r3, r3
10008b0a:	18d2      	adds	r2, r2, r3
10008b0c:	230e      	movs	r3, #14
10008b0e:	18fb      	adds	r3, r7, r3
10008b10:	4972      	ldr	r1, [pc, #456]	; (10008cdc <drawChar+0x274>)
10008b12:	5c8a      	ldrb	r2, [r1, r2]
10008b14:	701a      	strb	r2, [r3, #0]
            for(int8_t j=0; j<8; j++, line >>= 1) {
10008b16:	230d      	movs	r3, #13
10008b18:	18fb      	adds	r3, r7, r3
10008b1a:	2200      	movs	r2, #0
10008b1c:	701a      	strb	r2, [r3, #0]
10008b1e:	e0ba      	b.n	10008c96 <drawChar+0x22e>
                if(line & 1) {
10008b20:	230e      	movs	r3, #14
10008b22:	18fb      	adds	r3, r7, r3
10008b24:	781b      	ldrb	r3, [r3, #0]
10008b26:	2201      	movs	r2, #1
10008b28:	4013      	ands	r3, r2
10008b2a:	d04d      	beq.n	10008bc8 <drawChar+0x160>
                    if(size == 1)
10008b2c:	2324      	movs	r3, #36	; 0x24
10008b2e:	18fb      	adds	r3, r7, r3
10008b30:	781b      	ldrb	r3, [r3, #0]
10008b32:	2b01      	cmp	r3, #1
10008b34:	d119      	bne.n	10008b6a <drawChar+0x102>
                        drawPixel(x+i, y+j, color);
10008b36:	230f      	movs	r3, #15
10008b38:	18fb      	adds	r3, r7, r3
10008b3a:	781b      	ldrb	r3, [r3, #0]
10008b3c:	b25b      	sxtb	r3, r3
10008b3e:	b29a      	uxth	r2, r3
10008b40:	1dbb      	adds	r3, r7, #6
10008b42:	881b      	ldrh	r3, [r3, #0]
10008b44:	18d3      	adds	r3, r2, r3
10008b46:	b29b      	uxth	r3, r3
10008b48:	b218      	sxth	r0, r3
10008b4a:	230d      	movs	r3, #13
10008b4c:	18fb      	adds	r3, r7, r3
10008b4e:	781b      	ldrb	r3, [r3, #0]
10008b50:	b25b      	sxtb	r3, r3
10008b52:	b29a      	uxth	r2, r3
10008b54:	1d3b      	adds	r3, r7, #4
10008b56:	881b      	ldrh	r3, [r3, #0]
10008b58:	18d3      	adds	r3, r2, r3
10008b5a:	b29b      	uxth	r3, r3
10008b5c:	b219      	sxth	r1, r3
10008b5e:	003b      	movs	r3, r7
10008b60:	881b      	ldrh	r3, [r3, #0]
10008b62:	001a      	movs	r2, r3
10008b64:	4b5e      	ldr	r3, [pc, #376]	; (10008ce0 <drawChar+0x278>)
10008b66:	4798      	blx	r3
10008b68:	e084      	b.n	10008c74 <drawChar+0x20c>
                    else
                        fillRect(x+i*size, y+j*size, size, size, color);
10008b6a:	230f      	movs	r3, #15
10008b6c:	18fb      	adds	r3, r7, r3
10008b6e:	781b      	ldrb	r3, [r3, #0]
10008b70:	b25b      	sxtb	r3, r3
10008b72:	b29b      	uxth	r3, r3
10008b74:	2224      	movs	r2, #36	; 0x24
10008b76:	18ba      	adds	r2, r7, r2
10008b78:	7812      	ldrb	r2, [r2, #0]
10008b7a:	b292      	uxth	r2, r2
10008b7c:	4353      	muls	r3, r2
10008b7e:	b29a      	uxth	r2, r3
10008b80:	1dbb      	adds	r3, r7, #6
10008b82:	881b      	ldrh	r3, [r3, #0]
10008b84:	18d3      	adds	r3, r2, r3
10008b86:	b29b      	uxth	r3, r3
10008b88:	b218      	sxth	r0, r3
10008b8a:	230d      	movs	r3, #13
10008b8c:	18fb      	adds	r3, r7, r3
10008b8e:	781b      	ldrb	r3, [r3, #0]
10008b90:	b25b      	sxtb	r3, r3
10008b92:	b29b      	uxth	r3, r3
10008b94:	2224      	movs	r2, #36	; 0x24
10008b96:	18ba      	adds	r2, r7, r2
10008b98:	7812      	ldrb	r2, [r2, #0]
10008b9a:	b292      	uxth	r2, r2
10008b9c:	4353      	muls	r3, r2
10008b9e:	b29a      	uxth	r2, r3
10008ba0:	1d3b      	adds	r3, r7, #4
10008ba2:	881b      	ldrh	r3, [r3, #0]
10008ba4:	18d3      	adds	r3, r2, r3
10008ba6:	b29b      	uxth	r3, r3
10008ba8:	b219      	sxth	r1, r3
10008baa:	2324      	movs	r3, #36	; 0x24
10008bac:	18fb      	adds	r3, r7, r3
10008bae:	781b      	ldrb	r3, [r3, #0]
10008bb0:	b21a      	sxth	r2, r3
10008bb2:	2324      	movs	r3, #36	; 0x24
10008bb4:	18fb      	adds	r3, r7, r3
10008bb6:	781b      	ldrb	r3, [r3, #0]
10008bb8:	b21c      	sxth	r4, r3
10008bba:	003b      	movs	r3, r7
10008bbc:	881b      	ldrh	r3, [r3, #0]
10008bbe:	9300      	str	r3, [sp, #0]
10008bc0:	0023      	movs	r3, r4
10008bc2:	4c48      	ldr	r4, [pc, #288]	; (10008ce4 <drawChar+0x27c>)
10008bc4:	47a0      	blx	r4
10008bc6:	e055      	b.n	10008c74 <drawChar+0x20c>
                } else if(bg != color) {
10008bc8:	2320      	movs	r3, #32
10008bca:	18fa      	adds	r2, r7, r3
10008bcc:	003b      	movs	r3, r7
10008bce:	8812      	ldrh	r2, [r2, #0]
10008bd0:	881b      	ldrh	r3, [r3, #0]
10008bd2:	429a      	cmp	r2, r3
10008bd4:	d04e      	beq.n	10008c74 <drawChar+0x20c>
                    if(size == 1)
10008bd6:	2324      	movs	r3, #36	; 0x24
10008bd8:	18fb      	adds	r3, r7, r3
10008bda:	781b      	ldrb	r3, [r3, #0]
10008bdc:	2b01      	cmp	r3, #1
10008bde:	d11a      	bne.n	10008c16 <drawChar+0x1ae>
                        drawPixel(x+i, y+j, bg);
10008be0:	230f      	movs	r3, #15
10008be2:	18fb      	adds	r3, r7, r3
10008be4:	781b      	ldrb	r3, [r3, #0]
10008be6:	b25b      	sxtb	r3, r3
10008be8:	b29a      	uxth	r2, r3
10008bea:	1dbb      	adds	r3, r7, #6
10008bec:	881b      	ldrh	r3, [r3, #0]
10008bee:	18d3      	adds	r3, r2, r3
10008bf0:	b29b      	uxth	r3, r3
10008bf2:	b218      	sxth	r0, r3
10008bf4:	230d      	movs	r3, #13
10008bf6:	18fb      	adds	r3, r7, r3
10008bf8:	781b      	ldrb	r3, [r3, #0]
10008bfa:	b25b      	sxtb	r3, r3
10008bfc:	b29a      	uxth	r2, r3
10008bfe:	1d3b      	adds	r3, r7, #4
10008c00:	881b      	ldrh	r3, [r3, #0]
10008c02:	18d3      	adds	r3, r2, r3
10008c04:	b29b      	uxth	r3, r3
10008c06:	b21b      	sxth	r3, r3
10008c08:	2220      	movs	r2, #32
10008c0a:	18ba      	adds	r2, r7, r2
10008c0c:	8812      	ldrh	r2, [r2, #0]
10008c0e:	0019      	movs	r1, r3
10008c10:	4b33      	ldr	r3, [pc, #204]	; (10008ce0 <drawChar+0x278>)
10008c12:	4798      	blx	r3
10008c14:	e02e      	b.n	10008c74 <drawChar+0x20c>
                    else
                        fillRect(x+i*size, y+j*size, size, size, bg);
10008c16:	230f      	movs	r3, #15
10008c18:	18fb      	adds	r3, r7, r3
10008c1a:	781b      	ldrb	r3, [r3, #0]
10008c1c:	b25b      	sxtb	r3, r3
10008c1e:	b29b      	uxth	r3, r3
10008c20:	2224      	movs	r2, #36	; 0x24
10008c22:	18ba      	adds	r2, r7, r2
10008c24:	7812      	ldrb	r2, [r2, #0]
10008c26:	b292      	uxth	r2, r2
10008c28:	4353      	muls	r3, r2
10008c2a:	b29a      	uxth	r2, r3
10008c2c:	1dbb      	adds	r3, r7, #6
10008c2e:	881b      	ldrh	r3, [r3, #0]
10008c30:	18d3      	adds	r3, r2, r3
10008c32:	b29b      	uxth	r3, r3
10008c34:	b218      	sxth	r0, r3
10008c36:	230d      	movs	r3, #13
10008c38:	18fb      	adds	r3, r7, r3
10008c3a:	781b      	ldrb	r3, [r3, #0]
10008c3c:	b25b      	sxtb	r3, r3
10008c3e:	b29b      	uxth	r3, r3
10008c40:	2224      	movs	r2, #36	; 0x24
10008c42:	18ba      	adds	r2, r7, r2
10008c44:	7812      	ldrb	r2, [r2, #0]
10008c46:	b292      	uxth	r2, r2
10008c48:	4353      	muls	r3, r2
10008c4a:	b29a      	uxth	r2, r3
10008c4c:	1d3b      	adds	r3, r7, #4
10008c4e:	881b      	ldrh	r3, [r3, #0]
10008c50:	18d3      	adds	r3, r2, r3
10008c52:	b29b      	uxth	r3, r3
10008c54:	b219      	sxth	r1, r3
10008c56:	2324      	movs	r3, #36	; 0x24
10008c58:	18fb      	adds	r3, r7, r3
10008c5a:	781b      	ldrb	r3, [r3, #0]
10008c5c:	b21a      	sxth	r2, r3
10008c5e:	2324      	movs	r3, #36	; 0x24
10008c60:	18fb      	adds	r3, r7, r3
10008c62:	781b      	ldrb	r3, [r3, #0]
10008c64:	b21c      	sxth	r4, r3
10008c66:	2320      	movs	r3, #32
10008c68:	18fb      	adds	r3, r7, r3
10008c6a:	881b      	ldrh	r3, [r3, #0]
10008c6c:	9300      	str	r3, [sp, #0]
10008c6e:	0023      	movs	r3, r4
10008c70:	4c1c      	ldr	r4, [pc, #112]	; (10008ce4 <drawChar+0x27c>)
10008c72:	47a0      	blx	r4
            for(int8_t j=0; j<8; j++, line >>= 1) {
10008c74:	230d      	movs	r3, #13
10008c76:	18fb      	adds	r3, r7, r3
10008c78:	781b      	ldrb	r3, [r3, #0]
10008c7a:	b25b      	sxtb	r3, r3
10008c7c:	b2db      	uxtb	r3, r3
10008c7e:	3301      	adds	r3, #1
10008c80:	b2da      	uxtb	r2, r3
10008c82:	230d      	movs	r3, #13
10008c84:	18fb      	adds	r3, r7, r3
10008c86:	701a      	strb	r2, [r3, #0]
10008c88:	230e      	movs	r3, #14
10008c8a:	18fb      	adds	r3, r7, r3
10008c8c:	220e      	movs	r2, #14
10008c8e:	18ba      	adds	r2, r7, r2
10008c90:	7812      	ldrb	r2, [r2, #0]
10008c92:	0852      	lsrs	r2, r2, #1
10008c94:	701a      	strb	r2, [r3, #0]
10008c96:	230d      	movs	r3, #13
10008c98:	18fb      	adds	r3, r7, r3
10008c9a:	781b      	ldrb	r3, [r3, #0]
10008c9c:	b25b      	sxtb	r3, r3
10008c9e:	2b07      	cmp	r3, #7
10008ca0:	dc00      	bgt.n	10008ca4 <drawChar+0x23c>
10008ca2:	e73d      	b.n	10008b20 <drawChar+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
10008ca4:	230f      	movs	r3, #15
10008ca6:	18fb      	adds	r3, r7, r3
10008ca8:	781b      	ldrb	r3, [r3, #0]
10008caa:	b25b      	sxtb	r3, r3
10008cac:	b2db      	uxtb	r3, r3
10008cae:	3301      	adds	r3, #1
10008cb0:	b2da      	uxtb	r2, r3
10008cb2:	230f      	movs	r3, #15
10008cb4:	18fb      	adds	r3, r7, r3
10008cb6:	701a      	strb	r2, [r3, #0]
10008cb8:	230f      	movs	r3, #15
10008cba:	18fb      	adds	r3, r7, r3
10008cbc:	781b      	ldrb	r3, [r3, #0]
10008cbe:	b25b      	sxtb	r3, r3
10008cc0:	2b04      	cmp	r3, #4
10008cc2:	dc00      	bgt.n	10008cc6 <drawChar+0x25e>
10008cc4:	e718      	b.n	10008af8 <drawChar+0x90>
10008cc6:	e000      	b.n	10008cca <drawChar+0x262>
            return;
10008cc8:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
	}
}
10008cca:	46bd      	mov	sp, r7
10008ccc:	b004      	add	sp, #16
10008cce:	bdb0      	pop	{r4, r5, r7, pc}
10008cd0:	10011121 	.word	0x10011121
10008cd4:	10011248 	.word	0x10011248
10008cd8:	1001124a 	.word	0x1001124a
10008cdc:	1000f818 	.word	0x1000f818
10008ce0:	1000861d 	.word	0x1000861d
10008ce4:	10008479 	.word	0x10008479

10008ce8 <ST7732_set_cursor>:
uint8_t textsize = 1;
uint16_t textcolor = ST7735_WHITE;
uint16_t textbgcolor = ST7735_BLACK;

void ST7732_set_cursor(uint8_t x, uint8_t y)
{
10008ce8:	b580      	push	{r7, lr}
10008cea:	b082      	sub	sp, #8
10008cec:	af00      	add	r7, sp, #0
10008cee:	0002      	movs	r2, r0
10008cf0:	1dfb      	adds	r3, r7, #7
10008cf2:	701a      	strb	r2, [r3, #0]
10008cf4:	1dbb      	adds	r3, r7, #6
10008cf6:	1c0a      	adds	r2, r1, #0
10008cf8:	701a      	strb	r2, [r3, #0]
	cursor_x = x;
10008cfa:	4b06      	ldr	r3, [pc, #24]	; (10008d14 <ST7732_set_cursor+0x2c>)
10008cfc:	1dfa      	adds	r2, r7, #7
10008cfe:	7812      	ldrb	r2, [r2, #0]
10008d00:	701a      	strb	r2, [r3, #0]
	cursor_y = y;
10008d02:	4b05      	ldr	r3, [pc, #20]	; (10008d18 <ST7732_set_cursor+0x30>)
10008d04:	1dba      	adds	r2, r7, #6
10008d06:	7812      	ldrb	r2, [r2, #0]
10008d08:	701a      	strb	r2, [r3, #0]
}
10008d0a:	46c0      	nop			; (mov r8, r8)
10008d0c:	46bd      	mov	sp, r7
10008d0e:	b002      	add	sp, #8
10008d10:	bd80      	pop	{r7, pc}
10008d12:	46c0      	nop			; (mov r8, r8)
10008d14:	10011122 	.word	0x10011122
10008d18:	10011123 	.word	0x10011123

10008d1c <ST7735_set_text_size>:

void ST7735_set_text_size(uint8_t new_text_size)
{
10008d1c:	b580      	push	{r7, lr}
10008d1e:	b082      	sub	sp, #8
10008d20:	af00      	add	r7, sp, #0
10008d22:	0002      	movs	r2, r0
10008d24:	1dfb      	adds	r3, r7, #7
10008d26:	701a      	strb	r2, [r3, #0]
	textsize = new_text_size;
10008d28:	4b03      	ldr	r3, [pc, #12]	; (10008d38 <ST7735_set_text_size+0x1c>)
10008d2a:	1dfa      	adds	r2, r7, #7
10008d2c:	7812      	ldrb	r2, [r2, #0]
10008d2e:	701a      	strb	r2, [r3, #0]
}
10008d30:	46c0      	nop			; (mov r8, r8)
10008d32:	46bd      	mov	sp, r7
10008d34:	b002      	add	sp, #8
10008d36:	bd80      	pop	{r7, pc}
10008d38:	10010bec 	.word	0x10010bec

10008d3c <ST7735_print>:

void ST7735_print(unsigned char* string)
{
10008d3c:	b580      	push	{r7, lr}
10008d3e:	b082      	sub	sp, #8
10008d40:	af00      	add	r7, sp, #0
10008d42:	6078      	str	r0, [r7, #4]
	do
	{
		write(*string);
10008d44:	687b      	ldr	r3, [r7, #4]
10008d46:	781b      	ldrb	r3, [r3, #0]
10008d48:	0018      	movs	r0, r3
10008d4a:	4b06      	ldr	r3, [pc, #24]	; (10008d64 <ST7735_print+0x28>)
10008d4c:	4798      	blx	r3
	} while (*++string);
10008d4e:	687b      	ldr	r3, [r7, #4]
10008d50:	3301      	adds	r3, #1
10008d52:	607b      	str	r3, [r7, #4]
10008d54:	687b      	ldr	r3, [r7, #4]
10008d56:	781b      	ldrb	r3, [r3, #0]
10008d58:	2b00      	cmp	r3, #0
10008d5a:	d1f3      	bne.n	10008d44 <ST7735_print+0x8>
}
10008d5c:	46c0      	nop			; (mov r8, r8)
10008d5e:	46bd      	mov	sp, r7
10008d60:	b002      	add	sp, #8
10008d62:	bd80      	pop	{r7, pc}
10008d64:	1000909d 	.word	0x1000909d

10008d68 <ST7735_drawBitmap>:

void ST7735_drawBitmap(int16_t x, int16_t y, const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color)
{
10008d68:	b590      	push	{r4, r7, lr}
10008d6a:	b087      	sub	sp, #28
10008d6c:	af00      	add	r7, sp, #0
10008d6e:	0004      	movs	r4, r0
10008d70:	0008      	movs	r0, r1
10008d72:	60ba      	str	r2, [r7, #8]
10008d74:	0019      	movs	r1, r3
10008d76:	230e      	movs	r3, #14
10008d78:	18fb      	adds	r3, r7, r3
10008d7a:	1c22      	adds	r2, r4, #0
10008d7c:	801a      	strh	r2, [r3, #0]
10008d7e:	230c      	movs	r3, #12
10008d80:	18fb      	adds	r3, r7, r3
10008d82:	1c02      	adds	r2, r0, #0
10008d84:	801a      	strh	r2, [r3, #0]
10008d86:	1dbb      	adds	r3, r7, #6
10008d88:	1c0a      	adds	r2, r1, #0
10008d8a:	801a      	strh	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
10008d8c:	1dbb      	adds	r3, r7, #6
10008d8e:	2200      	movs	r2, #0
10008d90:	5e9b      	ldrsh	r3, [r3, r2]
10008d92:	3307      	adds	r3, #7
10008d94:	2b00      	cmp	r3, #0
10008d96:	da00      	bge.n	10008d9a <ST7735_drawBitmap+0x32>
10008d98:	3307      	adds	r3, #7
10008d9a:	10db      	asrs	r3, r3, #3
10008d9c:	001a      	movs	r2, r3
10008d9e:	2310      	movs	r3, #16
10008da0:	18fb      	adds	r3, r7, r3
10008da2:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
10008da4:	2317      	movs	r3, #23
10008da6:	18fb      	adds	r3, r7, r3
10008da8:	2200      	movs	r2, #0
10008daa:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++) {
10008dac:	2314      	movs	r3, #20
10008dae:	18fb      	adds	r3, r7, r3
10008db0:	2200      	movs	r2, #0
10008db2:	801a      	strh	r2, [r3, #0]
10008db4:	e06d      	b.n	10008e92 <ST7735_drawBitmap+0x12a>
        for(int16_t i=0; i<w; i++) {
10008db6:	2312      	movs	r3, #18
10008db8:	18fb      	adds	r3, r7, r3
10008dba:	2200      	movs	r2, #0
10008dbc:	801a      	strh	r2, [r3, #0]
10008dbe:	e04b      	b.n	10008e58 <ST7735_drawBitmap+0xf0>
            if(i & 7) byte <<= 1;
10008dc0:	2312      	movs	r3, #18
10008dc2:	18fb      	adds	r3, r7, r3
10008dc4:	881b      	ldrh	r3, [r3, #0]
10008dc6:	001a      	movs	r2, r3
10008dc8:	2307      	movs	r3, #7
10008dca:	4013      	ands	r3, r2
10008dcc:	d007      	beq.n	10008dde <ST7735_drawBitmap+0x76>
10008dce:	2317      	movs	r3, #23
10008dd0:	18fa      	adds	r2, r7, r3
10008dd2:	2317      	movs	r3, #23
10008dd4:	18fb      	adds	r3, r7, r3
10008dd6:	781b      	ldrb	r3, [r3, #0]
10008dd8:	18db      	adds	r3, r3, r3
10008dda:	7013      	strb	r3, [r2, #0]
10008ddc:	e019      	b.n	10008e12 <ST7735_drawBitmap+0xaa>
            else      byte   = bitmap[j * byteWidth + i / 8];
10008dde:	2314      	movs	r3, #20
10008de0:	18fb      	adds	r3, r7, r3
10008de2:	2200      	movs	r2, #0
10008de4:	5e9b      	ldrsh	r3, [r3, r2]
10008de6:	2210      	movs	r2, #16
10008de8:	18ba      	adds	r2, r7, r2
10008dea:	2100      	movs	r1, #0
10008dec:	5e52      	ldrsh	r2, [r2, r1]
10008dee:	435a      	muls	r2, r3
10008df0:	2312      	movs	r3, #18
10008df2:	18fb      	adds	r3, r7, r3
10008df4:	2100      	movs	r1, #0
10008df6:	5e5b      	ldrsh	r3, [r3, r1]
10008df8:	2b00      	cmp	r3, #0
10008dfa:	da00      	bge.n	10008dfe <ST7735_drawBitmap+0x96>
10008dfc:	3307      	adds	r3, #7
10008dfe:	10db      	asrs	r3, r3, #3
10008e00:	b21b      	sxth	r3, r3
10008e02:	18d3      	adds	r3, r2, r3
10008e04:	001a      	movs	r2, r3
10008e06:	68bb      	ldr	r3, [r7, #8]
10008e08:	189a      	adds	r2, r3, r2
10008e0a:	2317      	movs	r3, #23
10008e0c:	18fb      	adds	r3, r7, r3
10008e0e:	7812      	ldrb	r2, [r2, #0]
10008e10:	701a      	strb	r2, [r3, #0]
            if(byte & 0x80) drawPixel(x+i, y, color);
10008e12:	2317      	movs	r3, #23
10008e14:	18fb      	adds	r3, r7, r3
10008e16:	781b      	ldrb	r3, [r3, #0]
10008e18:	b25b      	sxtb	r3, r3
10008e1a:	2b00      	cmp	r3, #0
10008e1c:	da12      	bge.n	10008e44 <ST7735_drawBitmap+0xdc>
10008e1e:	230e      	movs	r3, #14
10008e20:	18fb      	adds	r3, r7, r3
10008e22:	881a      	ldrh	r2, [r3, #0]
10008e24:	2312      	movs	r3, #18
10008e26:	18fb      	adds	r3, r7, r3
10008e28:	881b      	ldrh	r3, [r3, #0]
10008e2a:	18d3      	adds	r3, r2, r3
10008e2c:	b29b      	uxth	r3, r3
10008e2e:	b218      	sxth	r0, r3
10008e30:	232c      	movs	r3, #44	; 0x2c
10008e32:	18fb      	adds	r3, r7, r3
10008e34:	881a      	ldrh	r2, [r3, #0]
10008e36:	230c      	movs	r3, #12
10008e38:	18fb      	adds	r3, r7, r3
10008e3a:	2100      	movs	r1, #0
10008e3c:	5e5b      	ldrsh	r3, [r3, r1]
10008e3e:	0019      	movs	r1, r3
10008e40:	4b1b      	ldr	r3, [pc, #108]	; (10008eb0 <ST7735_drawBitmap+0x148>)
10008e42:	4798      	blx	r3
        for(int16_t i=0; i<w; i++) {
10008e44:	2312      	movs	r3, #18
10008e46:	18fb      	adds	r3, r7, r3
10008e48:	2200      	movs	r2, #0
10008e4a:	5e9b      	ldrsh	r3, [r3, r2]
10008e4c:	b29b      	uxth	r3, r3
10008e4e:	3301      	adds	r3, #1
10008e50:	b29a      	uxth	r2, r3
10008e52:	2312      	movs	r3, #18
10008e54:	18fb      	adds	r3, r7, r3
10008e56:	801a      	strh	r2, [r3, #0]
10008e58:	2312      	movs	r3, #18
10008e5a:	18fa      	adds	r2, r7, r3
10008e5c:	1dbb      	adds	r3, r7, #6
10008e5e:	2100      	movs	r1, #0
10008e60:	5e52      	ldrsh	r2, [r2, r1]
10008e62:	2100      	movs	r1, #0
10008e64:	5e5b      	ldrsh	r3, [r3, r1]
10008e66:	429a      	cmp	r2, r3
10008e68:	dbaa      	blt.n	10008dc0 <ST7735_drawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++) {
10008e6a:	2314      	movs	r3, #20
10008e6c:	18fb      	adds	r3, r7, r3
10008e6e:	2200      	movs	r2, #0
10008e70:	5e9b      	ldrsh	r3, [r3, r2]
10008e72:	b29b      	uxth	r3, r3
10008e74:	3301      	adds	r3, #1
10008e76:	b29a      	uxth	r2, r3
10008e78:	2314      	movs	r3, #20
10008e7a:	18fb      	adds	r3, r7, r3
10008e7c:	801a      	strh	r2, [r3, #0]
10008e7e:	230c      	movs	r3, #12
10008e80:	18fb      	adds	r3, r7, r3
10008e82:	2200      	movs	r2, #0
10008e84:	5e9b      	ldrsh	r3, [r3, r2]
10008e86:	b29b      	uxth	r3, r3
10008e88:	3301      	adds	r3, #1
10008e8a:	b29a      	uxth	r2, r3
10008e8c:	230c      	movs	r3, #12
10008e8e:	18fb      	adds	r3, r7, r3
10008e90:	801a      	strh	r2, [r3, #0]
10008e92:	2314      	movs	r3, #20
10008e94:	18fb      	adds	r3, r7, r3
10008e96:	2228      	movs	r2, #40	; 0x28
10008e98:	18b9      	adds	r1, r7, r2
10008e9a:	2200      	movs	r2, #0
10008e9c:	5e9a      	ldrsh	r2, [r3, r2]
10008e9e:	2300      	movs	r3, #0
10008ea0:	5ecb      	ldrsh	r3, [r1, r3]
10008ea2:	429a      	cmp	r2, r3
10008ea4:	db87      	blt.n	10008db6 <ST7735_drawBitmap+0x4e>
        }
    }
}
10008ea6:	46c0      	nop			; (mov r8, r8)
10008ea8:	46bd      	mov	sp, r7
10008eaa:	b007      	add	sp, #28
10008eac:	bd90      	pop	{r4, r7, pc}
10008eae:	46c0      	nop			; (mov r8, r8)
10008eb0:	1000861d 	.word	0x1000861d

10008eb4 <fastFillRect>:

void fastFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
10008eb4:	b5b0      	push	{r4, r5, r7, lr}
10008eb6:	b086      	sub	sp, #24
10008eb8:	af00      	add	r7, sp, #0
10008eba:	0005      	movs	r5, r0
10008ebc:	000c      	movs	r4, r1
10008ebe:	0010      	movs	r0, r2
10008ec0:	0019      	movs	r1, r3
10008ec2:	1dbb      	adds	r3, r7, #6
10008ec4:	1c2a      	adds	r2, r5, #0
10008ec6:	801a      	strh	r2, [r3, #0]
10008ec8:	1d3b      	adds	r3, r7, #4
10008eca:	1c22      	adds	r2, r4, #0
10008ecc:	801a      	strh	r2, [r3, #0]
10008ece:	1cbb      	adds	r3, r7, #2
10008ed0:	1c02      	adds	r2, r0, #0
10008ed2:	801a      	strh	r2, [r3, #0]
10008ed4:	003b      	movs	r3, r7
10008ed6:	1c0a      	adds	r2, r1, #0
10008ed8:	801a      	strh	r2, [r3, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= _width) || (y >= _height)) return;
10008eda:	1dbb      	adds	r3, r7, #6
10008edc:	2200      	movs	r2, #0
10008ede:	5e9b      	ldrsh	r3, [r3, r2]
10008ee0:	4a66      	ldr	r2, [pc, #408]	; (1000907c <fastFillRect+0x1c8>)
10008ee2:	7812      	ldrb	r2, [r2, #0]
10008ee4:	4293      	cmp	r3, r2
10008ee6:	db00      	blt.n	10008eea <fastFillRect+0x36>
10008ee8:	e0c4      	b.n	10009074 <fastFillRect+0x1c0>
10008eea:	1d3b      	adds	r3, r7, #4
10008eec:	2200      	movs	r2, #0
10008eee:	5e9b      	ldrsh	r3, [r3, r2]
10008ef0:	4a63      	ldr	r2, [pc, #396]	; (10009080 <fastFillRect+0x1cc>)
10008ef2:	7812      	ldrb	r2, [r2, #0]
10008ef4:	4293      	cmp	r3, r2
10008ef6:	db00      	blt.n	10008efa <fastFillRect+0x46>
10008ef8:	e0bc      	b.n	10009074 <fastFillRect+0x1c0>
	if((x + w - 1) >= _width)  w = _width  - x;
10008efa:	1dbb      	adds	r3, r7, #6
10008efc:	2200      	movs	r2, #0
10008efe:	5e9a      	ldrsh	r2, [r3, r2]
10008f00:	1cbb      	adds	r3, r7, #2
10008f02:	2100      	movs	r1, #0
10008f04:	5e5b      	ldrsh	r3, [r3, r1]
10008f06:	18d3      	adds	r3, r2, r3
10008f08:	3b01      	subs	r3, #1
10008f0a:	4a5c      	ldr	r2, [pc, #368]	; (1000907c <fastFillRect+0x1c8>)
10008f0c:	7812      	ldrb	r2, [r2, #0]
10008f0e:	4293      	cmp	r3, r2
10008f10:	db08      	blt.n	10008f24 <fastFillRect+0x70>
10008f12:	4b5a      	ldr	r3, [pc, #360]	; (1000907c <fastFillRect+0x1c8>)
10008f14:	781b      	ldrb	r3, [r3, #0]
10008f16:	b29a      	uxth	r2, r3
10008f18:	1dbb      	adds	r3, r7, #6
10008f1a:	881b      	ldrh	r3, [r3, #0]
10008f1c:	1ad3      	subs	r3, r2, r3
10008f1e:	b29a      	uxth	r2, r3
10008f20:	1cbb      	adds	r3, r7, #2
10008f22:	801a      	strh	r2, [r3, #0]
	if((y + h - 1) >= _height) h = _height - y;
10008f24:	1d3b      	adds	r3, r7, #4
10008f26:	2200      	movs	r2, #0
10008f28:	5e9a      	ldrsh	r2, [r3, r2]
10008f2a:	003b      	movs	r3, r7
10008f2c:	2100      	movs	r1, #0
10008f2e:	5e5b      	ldrsh	r3, [r3, r1]
10008f30:	18d3      	adds	r3, r2, r3
10008f32:	3b01      	subs	r3, #1
10008f34:	4a52      	ldr	r2, [pc, #328]	; (10009080 <fastFillRect+0x1cc>)
10008f36:	7812      	ldrb	r2, [r2, #0]
10008f38:	4293      	cmp	r3, r2
10008f3a:	db08      	blt.n	10008f4e <fastFillRect+0x9a>
10008f3c:	4b50      	ldr	r3, [pc, #320]	; (10009080 <fastFillRect+0x1cc>)
10008f3e:	781b      	ldrb	r3, [r3, #0]
10008f40:	b29a      	uxth	r2, r3
10008f42:	1d3b      	adds	r3, r7, #4
10008f44:	881b      	ldrh	r3, [r3, #0]
10008f46:	1ad3      	subs	r3, r2, r3
10008f48:	b29a      	uxth	r2, r3
10008f4a:	003b      	movs	r3, r7
10008f4c:	801a      	strh	r2, [r3, #0]

	setAddrWindow(x, y, x+w-1, y+h-1);
10008f4e:	1dbb      	adds	r3, r7, #6
10008f50:	881b      	ldrh	r3, [r3, #0]
10008f52:	b2d8      	uxtb	r0, r3
10008f54:	1d3b      	adds	r3, r7, #4
10008f56:	881b      	ldrh	r3, [r3, #0]
10008f58:	b2d9      	uxtb	r1, r3
10008f5a:	1dbb      	adds	r3, r7, #6
10008f5c:	881b      	ldrh	r3, [r3, #0]
10008f5e:	b2da      	uxtb	r2, r3
10008f60:	1cbb      	adds	r3, r7, #2
10008f62:	881b      	ldrh	r3, [r3, #0]
10008f64:	b2db      	uxtb	r3, r3
10008f66:	18d3      	adds	r3, r2, r3
10008f68:	b2db      	uxtb	r3, r3
10008f6a:	3b01      	subs	r3, #1
10008f6c:	b2dc      	uxtb	r4, r3
10008f6e:	1d3b      	adds	r3, r7, #4
10008f70:	881b      	ldrh	r3, [r3, #0]
10008f72:	b2da      	uxtb	r2, r3
10008f74:	003b      	movs	r3, r7
10008f76:	881b      	ldrh	r3, [r3, #0]
10008f78:	b2db      	uxtb	r3, r3
10008f7a:	18d3      	adds	r3, r2, r3
10008f7c:	b2db      	uxtb	r3, r3
10008f7e:	3b01      	subs	r3, #1
10008f80:	b2db      	uxtb	r3, r3
10008f82:	0022      	movs	r2, r4
10008f84:	4c3f      	ldr	r4, [pc, #252]	; (10009084 <fastFillRect+0x1d0>)
10008f86:	47a0      	blx	r4
	uint8_t hi = color >> 8, lo = color;
10008f88:	2328      	movs	r3, #40	; 0x28
10008f8a:	18fb      	adds	r3, r7, r3
10008f8c:	881b      	ldrh	r3, [r3, #0]
10008f8e:	0a1b      	lsrs	r3, r3, #8
10008f90:	b29a      	uxth	r2, r3
10008f92:	2315      	movs	r3, #21
10008f94:	18fb      	adds	r3, r7, r3
10008f96:	701a      	strb	r2, [r3, #0]
10008f98:	2314      	movs	r3, #20
10008f9a:	18fb      	adds	r3, r7, r3
10008f9c:	2228      	movs	r2, #40	; 0x28
10008f9e:	18ba      	adds	r2, r7, r2
10008fa0:	8812      	ldrh	r2, [r2, #0]
10008fa2:	701a      	strb	r2, [r3, #0]
	
	//Byte swap for MSB first
	uint8_t color_buff[2];
	color_buff[0] = color >> 8;
10008fa4:	2328      	movs	r3, #40	; 0x28
10008fa6:	18fb      	adds	r3, r7, r3
10008fa8:	881b      	ldrh	r3, [r3, #0]
10008faa:	0a1b      	lsrs	r3, r3, #8
10008fac:	b29b      	uxth	r3, r3
10008fae:	b2da      	uxtb	r2, r3
10008fb0:	230c      	movs	r3, #12
10008fb2:	18fb      	adds	r3, r7, r3
10008fb4:	701a      	strb	r2, [r3, #0]
	color_buff[1] = color & 0xff;
10008fb6:	2328      	movs	r3, #40	; 0x28
10008fb8:	18fb      	adds	r3, r7, r3
10008fba:	881b      	ldrh	r3, [r3, #0]
10008fbc:	b2da      	uxtb	r2, r3
10008fbe:	230c      	movs	r3, #12
10008fc0:	18fb      	adds	r3, r7, r3
10008fc2:	705a      	strb	r2, [r3, #1]
	
	uint8_t* buffer = (uint8_t*) malloc(2*h*w);
10008fc4:	003b      	movs	r3, r7
10008fc6:	2200      	movs	r2, #0
10008fc8:	5e9b      	ldrsh	r3, [r3, r2]
10008fca:	005b      	lsls	r3, r3, #1
10008fcc:	1cba      	adds	r2, r7, #2
10008fce:	2100      	movs	r1, #0
10008fd0:	5e52      	ldrsh	r2, [r2, r1]
10008fd2:	4353      	muls	r3, r2
10008fd4:	0018      	movs	r0, r3
10008fd6:	4b2c      	ldr	r3, [pc, #176]	; (10009088 <fastFillRect+0x1d4>)
10008fd8:	4798      	blx	r3
10008fda:	0003      	movs	r3, r0
10008fdc:	613b      	str	r3, [r7, #16]
	
	for(uint16_t i = 0;i<2*h*w;i+=2) {
10008fde:	2316      	movs	r3, #22
10008fe0:	18fb      	adds	r3, r7, r3
10008fe2:	2200      	movs	r2, #0
10008fe4:	801a      	strh	r2, [r3, #0]
10008fe6:	e019      	b.n	1000901c <fastFillRect+0x168>
		buffer[i] = hi;
10008fe8:	2316      	movs	r3, #22
10008fea:	18fb      	adds	r3, r7, r3
10008fec:	881b      	ldrh	r3, [r3, #0]
10008fee:	693a      	ldr	r2, [r7, #16]
10008ff0:	18d3      	adds	r3, r2, r3
10008ff2:	2215      	movs	r2, #21
10008ff4:	18ba      	adds	r2, r7, r2
10008ff6:	7812      	ldrb	r2, [r2, #0]
10008ff8:	701a      	strb	r2, [r3, #0]
		buffer[i+1] = lo;
10008ffa:	2316      	movs	r3, #22
10008ffc:	18fb      	adds	r3, r7, r3
10008ffe:	881b      	ldrh	r3, [r3, #0]
10009000:	3301      	adds	r3, #1
10009002:	693a      	ldr	r2, [r7, #16]
10009004:	18d3      	adds	r3, r2, r3
10009006:	2214      	movs	r2, #20
10009008:	18ba      	adds	r2, r7, r2
1000900a:	7812      	ldrb	r2, [r2, #0]
1000900c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0;i<2*h*w;i+=2) {
1000900e:	2316      	movs	r3, #22
10009010:	18fb      	adds	r3, r7, r3
10009012:	2216      	movs	r2, #22
10009014:	18ba      	adds	r2, r7, r2
10009016:	8812      	ldrh	r2, [r2, #0]
10009018:	3202      	adds	r2, #2
1000901a:	801a      	strh	r2, [r3, #0]
1000901c:	2316      	movs	r3, #22
1000901e:	18fb      	adds	r3, r7, r3
10009020:	881a      	ldrh	r2, [r3, #0]
10009022:	003b      	movs	r3, r7
10009024:	2100      	movs	r1, #0
10009026:	5e5b      	ldrsh	r3, [r3, r1]
10009028:	005b      	lsls	r3, r3, #1
1000902a:	1cb9      	adds	r1, r7, #2
1000902c:	2000      	movs	r0, #0
1000902e:	5e09      	ldrsh	r1, [r1, r0]
10009030:	434b      	muls	r3, r1
10009032:	429a      	cmp	r2, r3
10009034:	dbd8      	blt.n	10008fe8 <fastFillRect+0x134>
	}
	
	DC_HIGH();
10009036:	2101      	movs	r1, #1
10009038:	2007      	movs	r0, #7
1000903a:	4b14      	ldr	r3, [pc, #80]	; (1000908c <fastFillRect+0x1d8>)
1000903c:	4798      	blx	r3
	CS_LOW();
1000903e:	2100      	movs	r1, #0
10009040:	200c      	movs	r0, #12
10009042:	4b12      	ldr	r3, [pc, #72]	; (1000908c <fastFillRect+0x1d8>)
10009044:	4798      	blx	r3
	io_write(io_lcd_spi, buffer, 2 * h * w);
10009046:	4b12      	ldr	r3, [pc, #72]	; (10009090 <fastFillRect+0x1dc>)
10009048:	6818      	ldr	r0, [r3, #0]
1000904a:	003b      	movs	r3, r7
1000904c:	881b      	ldrh	r3, [r3, #0]
1000904e:	1cba      	adds	r2, r7, #2
10009050:	8812      	ldrh	r2, [r2, #0]
10009052:	4353      	muls	r3, r2
10009054:	b29b      	uxth	r3, r3
10009056:	18db      	adds	r3, r3, r3
10009058:	b29a      	uxth	r2, r3
1000905a:	693b      	ldr	r3, [r7, #16]
1000905c:	0019      	movs	r1, r3
1000905e:	4b0d      	ldr	r3, [pc, #52]	; (10009094 <fastFillRect+0x1e0>)
10009060:	4798      	blx	r3
	CS_HIGH();
10009062:	2101      	movs	r1, #1
10009064:	200c      	movs	r0, #12
10009066:	4b09      	ldr	r3, [pc, #36]	; (1000908c <fastFillRect+0x1d8>)
10009068:	4798      	blx	r3

	free(buffer);
1000906a:	693b      	ldr	r3, [r7, #16]
1000906c:	0018      	movs	r0, r3
1000906e:	4b0a      	ldr	r3, [pc, #40]	; (10009098 <fastFillRect+0x1e4>)
10009070:	4798      	blx	r3
10009072:	e000      	b.n	10009076 <fastFillRect+0x1c2>
	if((x >= _width) || (y >= _height)) return;
10009074:	46c0      	nop			; (mov r8, r8)
}
10009076:	46bd      	mov	sp, r7
10009078:	b006      	add	sp, #24
1000907a:	bdb0      	pop	{r4, r5, r7, pc}
1000907c:	10011248 	.word	0x10011248
10009080:	1001124a 	.word	0x1001124a
10009084:	10008395 	.word	0x10008395
10009088:	1000ef4d 	.word	0x1000ef4d
1000908c:	10008355 	.word	0x10008355
10009090:	10011140 	.word	0x10011140
10009094:	10009f89 	.word	0x10009f89
10009098:	1000ef61 	.word	0x1000ef61

1000909c <write>:

void write(uint8_t c)
{
1000909c:	b5b0      	push	{r4, r5, r7, lr}
1000909e:	b084      	sub	sp, #16
100090a0:	af02      	add	r7, sp, #8
100090a2:	0002      	movs	r2, r0
100090a4:	1dfb      	adds	r3, r7, #7
100090a6:	701a      	strb	r2, [r3, #0]
	if(c == '\n')
100090a8:	1dfb      	adds	r3, r7, #7
100090aa:	781b      	ldrb	r3, [r3, #0]
100090ac:	2b0a      	cmp	r3, #10
100090ae:	d10d      	bne.n	100090cc <write+0x30>
	{ 
		cursor_x  = 0;                     // Reset x to zero,
100090b0:	4b1e      	ldr	r3, [pc, #120]	; (1000912c <write+0x90>)
100090b2:	2200      	movs	r2, #0
100090b4:	701a      	strb	r2, [r3, #0]
		cursor_y += textsize * 8;          // advance y one line
100090b6:	4b1e      	ldr	r3, [pc, #120]	; (10009130 <write+0x94>)
100090b8:	781b      	ldrb	r3, [r3, #0]
100090ba:	00db      	lsls	r3, r3, #3
100090bc:	b2da      	uxtb	r2, r3
100090be:	4b1d      	ldr	r3, [pc, #116]	; (10009134 <write+0x98>)
100090c0:	781b      	ldrb	r3, [r3, #0]
100090c2:	18d3      	adds	r3, r2, r3
100090c4:	b2da      	uxtb	r2, r3
100090c6:	4b1b      	ldr	r3, [pc, #108]	; (10009134 <write+0x98>)
100090c8:	701a      	strb	r2, [r3, #0]
	else
	{
		drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
		cursor_x += textsize * 6;          // Advance x one char
	}
}
100090ca:	e02a      	b.n	10009122 <write+0x86>
	else if (c == '\r')
100090cc:	1dfb      	adds	r3, r7, #7
100090ce:	781b      	ldrb	r3, [r3, #0]
100090d0:	2b0d      	cmp	r3, #13
100090d2:	d103      	bne.n	100090dc <write+0x40>
		cursor_x  = 0;                 // Reset x to zero,
100090d4:	4b15      	ldr	r3, [pc, #84]	; (1000912c <write+0x90>)
100090d6:	2200      	movs	r2, #0
100090d8:	701a      	strb	r2, [r3, #0]
}
100090da:	e022      	b.n	10009122 <write+0x86>
		drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
100090dc:	4b13      	ldr	r3, [pc, #76]	; (1000912c <write+0x90>)
100090de:	781b      	ldrb	r3, [r3, #0]
100090e0:	b218      	sxth	r0, r3
100090e2:	4b14      	ldr	r3, [pc, #80]	; (10009134 <write+0x98>)
100090e4:	781b      	ldrb	r3, [r3, #0]
100090e6:	b21c      	sxth	r4, r3
100090e8:	4b13      	ldr	r3, [pc, #76]	; (10009138 <write+0x9c>)
100090ea:	881d      	ldrh	r5, [r3, #0]
100090ec:	4b13      	ldr	r3, [pc, #76]	; (1000913c <write+0xa0>)
100090ee:	881b      	ldrh	r3, [r3, #0]
100090f0:	4a0f      	ldr	r2, [pc, #60]	; (10009130 <write+0x94>)
100090f2:	7812      	ldrb	r2, [r2, #0]
100090f4:	1df9      	adds	r1, r7, #7
100090f6:	7809      	ldrb	r1, [r1, #0]
100090f8:	9201      	str	r2, [sp, #4]
100090fa:	9300      	str	r3, [sp, #0]
100090fc:	002b      	movs	r3, r5
100090fe:	000a      	movs	r2, r1
10009100:	0021      	movs	r1, r4
10009102:	4c0f      	ldr	r4, [pc, #60]	; (10009140 <write+0xa4>)
10009104:	47a0      	blx	r4
		cursor_x += textsize * 6;          // Advance x one char
10009106:	4b0a      	ldr	r3, [pc, #40]	; (10009130 <write+0x94>)
10009108:	781b      	ldrb	r3, [r3, #0]
1000910a:	1c1a      	adds	r2, r3, #0
1000910c:	1c13      	adds	r3, r2, #0
1000910e:	18db      	adds	r3, r3, r3
10009110:	189b      	adds	r3, r3, r2
10009112:	18db      	adds	r3, r3, r3
10009114:	b2da      	uxtb	r2, r3
10009116:	4b05      	ldr	r3, [pc, #20]	; (1000912c <write+0x90>)
10009118:	781b      	ldrb	r3, [r3, #0]
1000911a:	18d3      	adds	r3, r2, r3
1000911c:	b2da      	uxtb	r2, r3
1000911e:	4b03      	ldr	r3, [pc, #12]	; (1000912c <write+0x90>)
10009120:	701a      	strb	r2, [r3, #0]
}
10009122:	46c0      	nop			; (mov r8, r8)
10009124:	46bd      	mov	sp, r7
10009126:	b002      	add	sp, #8
10009128:	bdb0      	pop	{r4, r5, r7, pc}
1000912a:	46c0      	nop			; (mov r8, r8)
1000912c:	10011122 	.word	0x10011122
10009130:	10010bec 	.word	0x10010bec
10009134:	10011123 	.word	0x10011123
10009138:	10010bee 	.word	0x10010bee
1000913c:	10011124 	.word	0x10011124
10009140:	10008a69 	.word	0x10008a69

10009144 <commonInit>:

commonInit(const uint8_t *cmdList) {
10009144:	b580      	push	{r7, lr}
10009146:	b082      	sub	sp, #8
10009148:	af00      	add	r7, sp, #0
1000914a:	6078      	str	r0, [r7, #4]
	//GPIO init - In this case we initialize somewhere else?

	// toggle RST low to reset; CS low so it'll listen to us
	CS_LOW();
1000914c:	2100      	movs	r1, #0
1000914e:	200c      	movs	r0, #12
10009150:	4b14      	ldr	r3, [pc, #80]	; (100091a4 <commonInit+0x60>)
10009152:	4798      	blx	r3
	if (_rst != -1) {
		gpio_set_pin_level(GPIO_PIN_RST, HIGH);
10009154:	2101      	movs	r1, #1
10009156:	200d      	movs	r0, #13
10009158:	4b12      	ldr	r3, [pc, #72]	; (100091a4 <commonInit+0x60>)
1000915a:	4798      	blx	r3
		delay(500);
1000915c:	23fa      	movs	r3, #250	; 0xfa
1000915e:	005b      	lsls	r3, r3, #1
10009160:	0018      	movs	r0, r3
10009162:	4b11      	ldr	r3, [pc, #68]	; (100091a8 <commonInit+0x64>)
10009164:	4798      	blx	r3
		gpio_set_pin_level(GPIO_PIN_RST, LOW);
10009166:	2100      	movs	r1, #0
10009168:	200d      	movs	r0, #13
1000916a:	4b0e      	ldr	r3, [pc, #56]	; (100091a4 <commonInit+0x60>)
1000916c:	4798      	blx	r3
		delay(500);
1000916e:	23fa      	movs	r3, #250	; 0xfa
10009170:	005b      	lsls	r3, r3, #1
10009172:	0018      	movs	r0, r3
10009174:	4b0c      	ldr	r3, [pc, #48]	; (100091a8 <commonInit+0x64>)
10009176:	4798      	blx	r3
		gpio_set_pin_level(GPIO_PIN_RST, HIGH);
10009178:	2101      	movs	r1, #1
1000917a:	200d      	movs	r0, #13
1000917c:	4b09      	ldr	r3, [pc, #36]	; (100091a4 <commonInit+0x60>)
1000917e:	4798      	blx	r3
		delay(500);
10009180:	23fa      	movs	r3, #250	; 0xfa
10009182:	005b      	lsls	r3, r3, #1
10009184:	0018      	movs	r0, r3
10009186:	4b08      	ldr	r3, [pc, #32]	; (100091a8 <commonInit+0x64>)
10009188:	4798      	blx	r3
	}

	if(cmdList) commandList(cmdList);
1000918a:	687b      	ldr	r3, [r7, #4]
1000918c:	2b00      	cmp	r3, #0
1000918e:	d003      	beq.n	10009198 <commonInit+0x54>
10009190:	687b      	ldr	r3, [r7, #4]
10009192:	0018      	movs	r0, r3
10009194:	4b05      	ldr	r3, [pc, #20]	; (100091ac <commonInit+0x68>)
10009196:	4798      	blx	r3
}
10009198:	46c0      	nop			; (mov r8, r8)
1000919a:	0018      	movs	r0, r3
1000919c:	46bd      	mov	sp, r7
1000919e:	b002      	add	sp, #8
100091a0:	bd80      	pop	{r7, pc}
100091a2:	46c0      	nop			; (mov r8, r8)
100091a4:	10008355 	.word	0x10008355
100091a8:	1000d649 	.word	0x1000d649
100091ac:	10008901 	.word	0x10008901

100091b0 <initR>:

// Initialization for ST7735R screens (green or red tabs)
void initR(uint8_t options) {
100091b0:	b580      	push	{r7, lr}
100091b2:	b082      	sub	sp, #8
100091b4:	af00      	add	r7, sp, #0
100091b6:	0002      	movs	r2, r0
100091b8:	1dfb      	adds	r3, r7, #7
100091ba:	701a      	strb	r2, [r3, #0]
	commonInit(Rcmd1);
100091bc:	4b27      	ldr	r3, [pc, #156]	; (1000925c <initR+0xac>)
100091be:	0018      	movs	r0, r3
100091c0:	4b27      	ldr	r3, [pc, #156]	; (10009260 <initR+0xb0>)
100091c2:	4798      	blx	r3
	if(options == INITR_GREENTAB) {
100091c4:	1dfb      	adds	r3, r7, #7
100091c6:	781b      	ldrb	r3, [r3, #0]
100091c8:	2b00      	cmp	r3, #0
100091ca:	d10a      	bne.n	100091e2 <initR+0x32>
		commandList(Rcmd2green);
100091cc:	4b25      	ldr	r3, [pc, #148]	; (10009264 <initR+0xb4>)
100091ce:	0018      	movs	r0, r3
100091d0:	4b25      	ldr	r3, [pc, #148]	; (10009268 <initR+0xb8>)
100091d2:	4798      	blx	r3
		colstart = 2;
100091d4:	4b25      	ldr	r3, [pc, #148]	; (1000926c <initR+0xbc>)
100091d6:	2202      	movs	r2, #2
100091d8:	701a      	strb	r2, [r3, #0]
		rowstart = 1;
100091da:	4b25      	ldr	r3, [pc, #148]	; (10009270 <initR+0xc0>)
100091dc:	2201      	movs	r2, #1
100091de:	701a      	strb	r2, [r3, #0]
100091e0:	e02d      	b.n	1000923e <initR+0x8e>
		} else if(options == INITR_144GREENTAB) {
100091e2:	1dfb      	adds	r3, r7, #7
100091e4:	781b      	ldrb	r3, [r3, #0]
100091e6:	2b01      	cmp	r3, #1
100091e8:	d110      	bne.n	1000920c <initR+0x5c>
		_height = ST7735_TFTHEIGHT_128;
100091ea:	4b22      	ldr	r3, [pc, #136]	; (10009274 <initR+0xc4>)
100091ec:	2280      	movs	r2, #128	; 0x80
100091ee:	701a      	strb	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
100091f0:	4b21      	ldr	r3, [pc, #132]	; (10009278 <initR+0xc8>)
100091f2:	2280      	movs	r2, #128	; 0x80
100091f4:	701a      	strb	r2, [r3, #0]
		commandList(Rcmd2green144);
100091f6:	4b21      	ldr	r3, [pc, #132]	; (1000927c <initR+0xcc>)
100091f8:	0018      	movs	r0, r3
100091fa:	4b1b      	ldr	r3, [pc, #108]	; (10009268 <initR+0xb8>)
100091fc:	4798      	blx	r3
		colstart = 2;
100091fe:	4b1b      	ldr	r3, [pc, #108]	; (1000926c <initR+0xbc>)
10009200:	2202      	movs	r2, #2
10009202:	701a      	strb	r2, [r3, #0]
		rowstart = 3;
10009204:	4b1a      	ldr	r3, [pc, #104]	; (10009270 <initR+0xc0>)
10009206:	2203      	movs	r2, #3
10009208:	701a      	strb	r2, [r3, #0]
1000920a:	e018      	b.n	1000923e <initR+0x8e>
		} else if(options == INITR_MINI160x80) {
1000920c:	1dfb      	adds	r3, r7, #7
1000920e:	781b      	ldrb	r3, [r3, #0]
10009210:	2b04      	cmp	r3, #4
10009212:	d110      	bne.n	10009236 <initR+0x86>
		_height = ST7735_TFTHEIGHT_160;
10009214:	4b17      	ldr	r3, [pc, #92]	; (10009274 <initR+0xc4>)
10009216:	22a0      	movs	r2, #160	; 0xa0
10009218:	701a      	strb	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_80;
1000921a:	4b17      	ldr	r3, [pc, #92]	; (10009278 <initR+0xc8>)
1000921c:	2250      	movs	r2, #80	; 0x50
1000921e:	701a      	strb	r2, [r3, #0]
		commandList(Rcmd2green160x80);
10009220:	4b17      	ldr	r3, [pc, #92]	; (10009280 <initR+0xd0>)
10009222:	0018      	movs	r0, r3
10009224:	4b10      	ldr	r3, [pc, #64]	; (10009268 <initR+0xb8>)
10009226:	4798      	blx	r3
		colstart = 24;
10009228:	4b10      	ldr	r3, [pc, #64]	; (1000926c <initR+0xbc>)
1000922a:	2218      	movs	r2, #24
1000922c:	701a      	strb	r2, [r3, #0]
		rowstart = 0;
1000922e:	4b10      	ldr	r3, [pc, #64]	; (10009270 <initR+0xc0>)
10009230:	2200      	movs	r2, #0
10009232:	701a      	strb	r2, [r3, #0]
10009234:	e003      	b.n	1000923e <initR+0x8e>
		} else {
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
10009236:	4b13      	ldr	r3, [pc, #76]	; (10009284 <initR+0xd4>)
10009238:	0018      	movs	r0, r3
1000923a:	4b0b      	ldr	r3, [pc, #44]	; (10009268 <initR+0xb8>)
1000923c:	4798      	blx	r3
	}
	commandList(Rcmd3);
1000923e:	4b12      	ldr	r3, [pc, #72]	; (10009288 <initR+0xd8>)
10009240:	0018      	movs	r0, r3
10009242:	4b09      	ldr	r3, [pc, #36]	; (10009268 <initR+0xb8>)
10009244:	4798      	blx	r3
	tabcolor = options;
10009246:	4b11      	ldr	r3, [pc, #68]	; (1000928c <initR+0xdc>)
10009248:	1dfa      	adds	r2, r7, #7
1000924a:	7812      	ldrb	r2, [r2, #0]
1000924c:	701a      	strb	r2, [r3, #0]
	setRotation(0);
1000924e:	2000      	movs	r0, #0
10009250:	4b0f      	ldr	r3, [pc, #60]	; (10009290 <initR+0xe0>)
10009252:	4798      	blx	r3
10009254:	46c0      	nop			; (mov r8, r8)
10009256:	46bd      	mov	sp, r7
10009258:	b002      	add	sp, #8
1000925a:	bd80      	pop	{r7, pc}
1000925c:	1000fd80 	.word	0x1000fd80
10009260:	10009145 	.word	0x10009145
10009264:	1000fdbc 	.word	0x1000fdbc
10009268:	10008901 	.word	0x10008901
1000926c:	10011249 	.word	0x10011249
10009270:	1001124b 	.word	0x1001124b
10009274:	1001124a 	.word	0x1001124a
10009278:	10011248 	.word	0x10011248
1000927c:	1000fddc 	.word	0x1000fddc
10009280:	1000fdec 	.word	0x1000fdec
10009284:	1000fdcc 	.word	0x1000fdcc
10009288:	1000fdfc 	.word	0x1000fdfc
1000928c:	1001113c 	.word	0x1001113c
10009290:	100086f5 	.word	0x100086f5

10009294 <hri_gpio_set_DATAOUT_reg>:
{
10009294:	b580      	push	{r7, lr}
10009296:	b082      	sub	sp, #8
10009298:	af00      	add	r7, sp, #0
1000929a:	6078      	str	r0, [r7, #4]
1000929c:	000a      	movs	r2, r1
1000929e:	1cbb      	adds	r3, r7, #2
100092a0:	801a      	strh	r2, [r3, #0]
	((Gpio *)hw)->DATAOUT.reg |= mask;
100092a2:	687b      	ldr	r3, [r7, #4]
100092a4:	889b      	ldrh	r3, [r3, #4]
100092a6:	b29a      	uxth	r2, r3
100092a8:	1cbb      	adds	r3, r7, #2
100092aa:	881b      	ldrh	r3, [r3, #0]
100092ac:	4313      	orrs	r3, r2
100092ae:	b29a      	uxth	r2, r3
100092b0:	687b      	ldr	r3, [r7, #4]
100092b2:	809a      	strh	r2, [r3, #4]
}
100092b4:	46c0      	nop			; (mov r8, r8)
100092b6:	46bd      	mov	sp, r7
100092b8:	b002      	add	sp, #8
100092ba:	bd80      	pop	{r7, pc}

100092bc <hri_gpio_clear_DATAOUT_reg>:
{
100092bc:	b580      	push	{r7, lr}
100092be:	b082      	sub	sp, #8
100092c0:	af00      	add	r7, sp, #0
100092c2:	6078      	str	r0, [r7, #4]
100092c4:	000a      	movs	r2, r1
100092c6:	1cbb      	adds	r3, r7, #2
100092c8:	801a      	strh	r2, [r3, #0]
	((Gpio *)hw)->DATAOUT.reg &= ~mask;
100092ca:	687b      	ldr	r3, [r7, #4]
100092cc:	889b      	ldrh	r3, [r3, #4]
100092ce:	b29b      	uxth	r3, r3
100092d0:	b21b      	sxth	r3, r3
100092d2:	1cba      	adds	r2, r7, #2
100092d4:	2100      	movs	r1, #0
100092d6:	5e52      	ldrsh	r2, [r2, r1]
100092d8:	43d2      	mvns	r2, r2
100092da:	b212      	sxth	r2, r2
100092dc:	4013      	ands	r3, r2
100092de:	b21b      	sxth	r3, r3
100092e0:	b29a      	uxth	r2, r3
100092e2:	687b      	ldr	r3, [r7, #4]
100092e4:	809a      	strh	r2, [r3, #4]
}
100092e6:	46c0      	nop			; (mov r8, r8)
100092e8:	46bd      	mov	sp, r7
100092ea:	b002      	add	sp, #8
100092ec:	bd80      	pop	{r7, pc}

100092ee <hri_gpio_set_OUTENSET_reg>:
	tmp = (tmp & GPIO_OUTENSET_VALUE_Msk) >> GPIO_OUTENSET_VALUE_Pos;
	return tmp;
}

static inline void hri_gpio_set_OUTENSET_reg(const void *const hw, hri_gpio_outenset_reg_t mask)
{
100092ee:	b580      	push	{r7, lr}
100092f0:	b082      	sub	sp, #8
100092f2:	af00      	add	r7, sp, #0
100092f4:	6078      	str	r0, [r7, #4]
100092f6:	000a      	movs	r2, r1
100092f8:	1cbb      	adds	r3, r7, #2
100092fa:	801a      	strh	r2, [r3, #0]
	GPIO_CRITICAL_SECTION_ENTER();
	((Gpio *)hw)->OUTENSET.reg |= mask;
100092fc:	687b      	ldr	r3, [r7, #4]
100092fe:	8a1b      	ldrh	r3, [r3, #16]
10009300:	b29a      	uxth	r2, r3
10009302:	1cbb      	adds	r3, r7, #2
10009304:	881b      	ldrh	r3, [r3, #0]
10009306:	4313      	orrs	r3, r2
10009308:	b29a      	uxth	r2, r3
1000930a:	687b      	ldr	r3, [r7, #4]
1000930c:	821a      	strh	r2, [r3, #16]
	GPIO_CRITICAL_SECTION_LEAVE();
}
1000930e:	46c0      	nop			; (mov r8, r8)
10009310:	46bd      	mov	sp, r7
10009312:	b002      	add	sp, #8
10009314:	bd80      	pop	{r7, pc}

10009316 <hri_gpio_clear_OUTENSET_reg>:
	((Gpio *)hw)->OUTENSET.reg = data;
	GPIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_gpio_clear_OUTENSET_reg(const void *const hw, hri_gpio_outenset_reg_t mask)
{
10009316:	b580      	push	{r7, lr}
10009318:	b082      	sub	sp, #8
1000931a:	af00      	add	r7, sp, #0
1000931c:	6078      	str	r0, [r7, #4]
1000931e:	000a      	movs	r2, r1
10009320:	1cbb      	adds	r3, r7, #2
10009322:	801a      	strh	r2, [r3, #0]
	GPIO_CRITICAL_SECTION_ENTER();
	((Gpio *)hw)->OUTENSET.reg &= ~mask;
10009324:	687b      	ldr	r3, [r7, #4]
10009326:	8a1b      	ldrh	r3, [r3, #16]
10009328:	b29b      	uxth	r3, r3
1000932a:	b21b      	sxth	r3, r3
1000932c:	1cba      	adds	r2, r7, #2
1000932e:	2100      	movs	r1, #0
10009330:	5e52      	ldrsh	r2, [r2, r1]
10009332:	43d2      	mvns	r2, r2
10009334:	b212      	sxth	r2, r2
10009336:	4013      	ands	r3, r2
10009338:	b21b      	sxth	r3, r3
1000933a:	b29a      	uxth	r2, r3
1000933c:	687b      	ldr	r3, [r7, #4]
1000933e:	821a      	strh	r2, [r3, #16]
	GPIO_CRITICAL_SECTION_LEAVE();
}
10009340:	46c0      	nop			; (mov r8, r8)
10009342:	46bd      	mov	sp, r7
10009344:	b002      	add	sp, #8
10009346:	bd80      	pop	{r7, pc}

10009348 <hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
10009348:	b580      	push	{r7, lr}
1000934a:	b082      	sub	sp, #8
1000934c:	af00      	add	r7, sp, #0
1000934e:	6078      	str	r0, [r7, #4]
10009350:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg |= mask;
10009352:	687b      	ldr	r3, [r7, #4]
10009354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10009356:	683b      	ldr	r3, [r7, #0]
10009358:	431a      	orrs	r2, r3
1000935a:	687b      	ldr	r3, [r7, #4]
1000935c:	645a      	str	r2, [r3, #68]	; 0x44
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
1000935e:	46c0      	nop			; (mov r8, r8)
10009360:	46bd      	mov	sp, r7
10009362:	b002      	add	sp, #8
10009364:	bd80      	pop	{r7, pc}

10009366 <hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_reg>:
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_0_reg_t mask)
{
10009366:	b580      	push	{r7, lr}
10009368:	b082      	sub	sp, #8
1000936a:	af00      	add	r7, sp, #0
1000936c:	6078      	str	r0, [r7, #4]
1000936e:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_0.reg &= ~mask;
10009370:	687b      	ldr	r3, [r7, #4]
10009372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10009374:	683a      	ldr	r2, [r7, #0]
10009376:	43d2      	mvns	r2, r2
10009378:	401a      	ands	r2, r3
1000937a:	687b      	ldr	r3, [r7, #4]
1000937c:	645a      	str	r2, [r3, #68]	; 0x44
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
1000937e:	46c0      	nop			; (mov r8, r8)
10009380:	46bd      	mov	sp, r7
10009382:	b002      	add	sp, #8
10009384:	bd80      	pop	{r7, pc}

10009386 <hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
10009386:	b580      	push	{r7, lr}
10009388:	b082      	sub	sp, #8
1000938a:	af00      	add	r7, sp, #0
1000938c:	6078      	str	r0, [r7, #4]
1000938e:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg |= mask;
10009390:	687b      	ldr	r3, [r7, #4]
10009392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10009394:	683b      	ldr	r3, [r7, #0]
10009396:	431a      	orrs	r2, r3
10009398:	687b      	ldr	r3, [r7, #4]
1000939a:	649a      	str	r2, [r3, #72]	; 0x48
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
1000939c:	46c0      	nop			; (mov r8, r8)
1000939e:	46bd      	mov	sp, r7
100093a0:	b002      	add	sp, #8
100093a2:	bd80      	pop	{r7, pc}

100093a4 <hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_reg>:
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_1_reg_t mask)
{
100093a4:	b580      	push	{r7, lr}
100093a6:	b082      	sub	sp, #8
100093a8:	af00      	add	r7, sp, #0
100093aa:	6078      	str	r0, [r7, #4]
100093ac:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_1.reg &= ~mask;
100093ae:	687b      	ldr	r3, [r7, #4]
100093b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100093b2:	683a      	ldr	r2, [r7, #0]
100093b4:	43d2      	mvns	r2, r2
100093b6:	401a      	ands	r2, r3
100093b8:	687b      	ldr	r3, [r7, #4]
100093ba:	649a      	str	r2, [r3, #72]	; 0x48
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100093bc:	46c0      	nop			; (mov r8, r8)
100093be:	46bd      	mov	sp, r7
100093c0:	b002      	add	sp, #8
100093c2:	bd80      	pop	{r7, pc}

100093c4 <hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_reg(const void *const                      hw,
                                                                  hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
100093c4:	b580      	push	{r7, lr}
100093c6:	b082      	sub	sp, #8
100093c8:	af00      	add	r7, sp, #0
100093ca:	6078      	str	r0, [r7, #4]
100093cc:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg |= mask;
100093ce:	687b      	ldr	r3, [r7, #4]
100093d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
100093d2:	683b      	ldr	r3, [r7, #0]
100093d4:	431a      	orrs	r2, r3
100093d6:	687b      	ldr	r3, [r7, #4]
100093d8:	64da      	str	r2, [r3, #76]	; 0x4c
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100093da:	46c0      	nop			; (mov r8, r8)
100093dc:	46bd      	mov	sp, r7
100093de:	b002      	add	sp, #8
100093e0:	bd80      	pop	{r7, pc}

100093e2 <hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_reg>:
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_reg(const void *const                      hw,
                                                                    hri_lpmcu_misc_regs_pinmux_sel_2_reg_t mask)
{
100093e2:	b580      	push	{r7, lr}
100093e4:	b082      	sub	sp, #8
100093e6:	af00      	add	r7, sp, #0
100093e8:	6078      	str	r0, [r7, #4]
100093ea:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->PINMUX_SEL_2.reg &= ~mask;
100093ec:	687b      	ldr	r3, [r7, #4]
100093ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
100093f0:	683a      	ldr	r2, [r7, #0]
100093f2:	43d2      	mvns	r2, r2
100093f4:	401a      	ands	r2, r3
100093f6:	687b      	ldr	r3, [r7, #4]
100093f8:	64da      	str	r2, [r3, #76]	; 0x4c
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100093fa:	46c0      	nop			; (mov r8, r8)
100093fc:	46bd      	mov	sp, r7
100093fe:	b002      	add	sp, #8
10009400:	bd80      	pop	{r7, pc}

10009402 <hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
10009402:	b580      	push	{r7, lr}
10009404:	b082      	sub	sp, #8
10009406:	af00      	add	r7, sp, #0
10009408:	6078      	str	r0, [r7, #4]
1000940a:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg |= mask;
1000940c:	687a      	ldr	r2, [r7, #4]
1000940e:	23d0      	movs	r3, #208	; 0xd0
10009410:	005b      	lsls	r3, r3, #1
10009412:	58d2      	ldr	r2, [r2, r3]
10009414:	683b      	ldr	r3, [r7, #0]
10009416:	431a      	orrs	r2, r3
10009418:	0011      	movs	r1, r2
1000941a:	687a      	ldr	r2, [r7, #4]
1000941c:	23d0      	movs	r3, #208	; 0xd0
1000941e:	005b      	lsls	r3, r3, #1
10009420:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
10009422:	46c0      	nop			; (mov r8, r8)
10009424:	46bd      	mov	sp, r7
10009426:	b002      	add	sp, #8
10009428:	bd80      	pop	{r7, pc}

1000942a <hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_reg>:
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_0_reg_t mask)
{
1000942a:	b580      	push	{r7, lr}
1000942c:	b082      	sub	sp, #8
1000942e:	af00      	add	r7, sp, #0
10009430:	6078      	str	r0, [r7, #4]
10009432:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_0.reg &= ~mask;
10009434:	687a      	ldr	r2, [r7, #4]
10009436:	23d0      	movs	r3, #208	; 0xd0
10009438:	005b      	lsls	r3, r3, #1
1000943a:	58d3      	ldr	r3, [r2, r3]
1000943c:	683a      	ldr	r2, [r7, #0]
1000943e:	43d2      	mvns	r2, r2
10009440:	401a      	ands	r2, r3
10009442:	0011      	movs	r1, r2
10009444:	687a      	ldr	r2, [r7, #4]
10009446:	23d0      	movs	r3, #208	; 0xd0
10009448:	005b      	lsls	r3, r3, #1
1000944a:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
1000944c:	46c0      	nop			; (mov r8, r8)
1000944e:	46bd      	mov	sp, r7
10009450:	b002      	add	sp, #8
10009452:	bd80      	pop	{r7, pc}

10009454 <hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
10009454:	b580      	push	{r7, lr}
10009456:	b082      	sub	sp, #8
10009458:	af00      	add	r7, sp, #0
1000945a:	6078      	str	r0, [r7, #4]
1000945c:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg |= mask;
1000945e:	687a      	ldr	r2, [r7, #4]
10009460:	23d2      	movs	r3, #210	; 0xd2
10009462:	005b      	lsls	r3, r3, #1
10009464:	58d2      	ldr	r2, [r2, r3]
10009466:	683b      	ldr	r3, [r7, #0]
10009468:	431a      	orrs	r2, r3
1000946a:	0011      	movs	r1, r2
1000946c:	687a      	ldr	r2, [r7, #4]
1000946e:	23d2      	movs	r3, #210	; 0xd2
10009470:	005b      	lsls	r3, r3, #1
10009472:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
10009474:	46c0      	nop			; (mov r8, r8)
10009476:	46bd      	mov	sp, r7
10009478:	b002      	add	sp, #8
1000947a:	bd80      	pop	{r7, pc}

1000947c <hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_reg>:
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_1_reg_t mask)
{
1000947c:	b580      	push	{r7, lr}
1000947e:	b082      	sub	sp, #8
10009480:	af00      	add	r7, sp, #0
10009482:	6078      	str	r0, [r7, #4]
10009484:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_1.reg &= ~mask;
10009486:	687a      	ldr	r2, [r7, #4]
10009488:	23d2      	movs	r3, #210	; 0xd2
1000948a:	005b      	lsls	r3, r3, #1
1000948c:	58d3      	ldr	r3, [r2, r3]
1000948e:	683a      	ldr	r2, [r7, #0]
10009490:	43d2      	mvns	r2, r2
10009492:	401a      	ands	r2, r3
10009494:	0011      	movs	r1, r2
10009496:	687a      	ldr	r2, [r7, #4]
10009498:	23d2      	movs	r3, #210	; 0xd2
1000949a:	005b      	lsls	r3, r3, #1
1000949c:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
1000949e:	46c0      	nop			; (mov r8, r8)
100094a0:	46bd      	mov	sp, r7
100094a2:	b002      	add	sp, #8
100094a4:	bd80      	pop	{r7, pc}

100094a6 <hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
100094a6:	b580      	push	{r7, lr}
100094a8:	b082      	sub	sp, #8
100094aa:	af00      	add	r7, sp, #0
100094ac:	6078      	str	r0, [r7, #4]
100094ae:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg |= mask;
100094b0:	687a      	ldr	r2, [r7, #4]
100094b2:	23d4      	movs	r3, #212	; 0xd4
100094b4:	005b      	lsls	r3, r3, #1
100094b6:	58d2      	ldr	r2, [r2, r3]
100094b8:	683b      	ldr	r3, [r7, #0]
100094ba:	431a      	orrs	r2, r3
100094bc:	0011      	movs	r1, r2
100094be:	687a      	ldr	r2, [r7, #4]
100094c0:	23d4      	movs	r3, #212	; 0xd4
100094c2:	005b      	lsls	r3, r3, #1
100094c4:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100094c6:	46c0      	nop			; (mov r8, r8)
100094c8:	46bd      	mov	sp, r7
100094ca:	b002      	add	sp, #8
100094cc:	bd80      	pop	{r7, pc}

100094ce <hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_reg>:
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_2_reg_t mask)
{
100094ce:	b580      	push	{r7, lr}
100094d0:	b082      	sub	sp, #8
100094d2:	af00      	add	r7, sp, #0
100094d4:	6078      	str	r0, [r7, #4]
100094d6:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_2.reg &= ~mask;
100094d8:	687a      	ldr	r2, [r7, #4]
100094da:	23d4      	movs	r3, #212	; 0xd4
100094dc:	005b      	lsls	r3, r3, #1
100094de:	58d3      	ldr	r3, [r2, r3]
100094e0:	683a      	ldr	r2, [r7, #0]
100094e2:	43d2      	mvns	r2, r2
100094e4:	401a      	ands	r2, r3
100094e6:	0011      	movs	r1, r2
100094e8:	687a      	ldr	r2, [r7, #4]
100094ea:	23d4      	movs	r3, #212	; 0xd4
100094ec:	005b      	lsls	r3, r3, #1
100094ee:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100094f0:	46c0      	nop			; (mov r8, r8)
100094f2:	46bd      	mov	sp, r7
100094f4:	b002      	add	sp, #8
100094f6:	bd80      	pop	{r7, pc}

100094f8 <hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
100094f8:	b580      	push	{r7, lr}
100094fa:	b082      	sub	sp, #8
100094fc:	af00      	add	r7, sp, #0
100094fe:	6078      	str	r0, [r7, #4]
10009500:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg |= mask;
10009502:	687a      	ldr	r2, [r7, #4]
10009504:	23d6      	movs	r3, #214	; 0xd6
10009506:	005b      	lsls	r3, r3, #1
10009508:	58d2      	ldr	r2, [r2, r3]
1000950a:	683b      	ldr	r3, [r7, #0]
1000950c:	431a      	orrs	r2, r3
1000950e:	0011      	movs	r1, r2
10009510:	687a      	ldr	r2, [r7, #4]
10009512:	23d6      	movs	r3, #214	; 0xd6
10009514:	005b      	lsls	r3, r3, #1
10009516:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
10009518:	46c0      	nop			; (mov r8, r8)
1000951a:	46bd      	mov	sp, r7
1000951c:	b002      	add	sp, #8
1000951e:	bd80      	pop	{r7, pc}

10009520 <hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_reg>:
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_3_reg_t mask)
{
10009520:	b580      	push	{r7, lr}
10009522:	b082      	sub	sp, #8
10009524:	af00      	add	r7, sp, #0
10009526:	6078      	str	r0, [r7, #4]
10009528:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_3.reg &= ~mask;
1000952a:	687a      	ldr	r2, [r7, #4]
1000952c:	23d6      	movs	r3, #214	; 0xd6
1000952e:	005b      	lsls	r3, r3, #1
10009530:	58d3      	ldr	r3, [r2, r3]
10009532:	683a      	ldr	r2, [r7, #0]
10009534:	43d2      	mvns	r2, r2
10009536:	401a      	ands	r2, r3
10009538:	0011      	movs	r1, r2
1000953a:	687a      	ldr	r2, [r7, #4]
1000953c:	23d6      	movs	r3, #214	; 0xd6
1000953e:	005b      	lsls	r3, r3, #1
10009540:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
10009542:	46c0      	nop			; (mov r8, r8)
10009544:	46bd      	mov	sp, r7
10009546:	b002      	add	sp, #8
10009548:	bd80      	pop	{r7, pc}

1000954a <hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
1000954a:	b580      	push	{r7, lr}
1000954c:	b082      	sub	sp, #8
1000954e:	af00      	add	r7, sp, #0
10009550:	6078      	str	r0, [r7, #4]
10009552:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg |= mask;
10009554:	687a      	ldr	r2, [r7, #4]
10009556:	23d8      	movs	r3, #216	; 0xd8
10009558:	005b      	lsls	r3, r3, #1
1000955a:	58d2      	ldr	r2, [r2, r3]
1000955c:	683b      	ldr	r3, [r7, #0]
1000955e:	431a      	orrs	r2, r3
10009560:	0011      	movs	r1, r2
10009562:	687a      	ldr	r2, [r7, #4]
10009564:	23d8      	movs	r3, #216	; 0xd8
10009566:	005b      	lsls	r3, r3, #1
10009568:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
1000956a:	46c0      	nop			; (mov r8, r8)
1000956c:	46bd      	mov	sp, r7
1000956e:	b002      	add	sp, #8
10009570:	bd80      	pop	{r7, pc}

10009572 <hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_reg>:
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_4_reg_t mask)
{
10009572:	b580      	push	{r7, lr}
10009574:	b082      	sub	sp, #8
10009576:	af00      	add	r7, sp, #0
10009578:	6078      	str	r0, [r7, #4]
1000957a:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_4.reg &= ~mask;
1000957c:	687a      	ldr	r2, [r7, #4]
1000957e:	23d8      	movs	r3, #216	; 0xd8
10009580:	005b      	lsls	r3, r3, #1
10009582:	58d3      	ldr	r3, [r2, r3]
10009584:	683a      	ldr	r2, [r7, #0]
10009586:	43d2      	mvns	r2, r2
10009588:	401a      	ands	r2, r3
1000958a:	0011      	movs	r1, r2
1000958c:	687a      	ldr	r2, [r7, #4]
1000958e:	23d8      	movs	r3, #216	; 0xd8
10009590:	005b      	lsls	r3, r3, #1
10009592:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
10009594:	46c0      	nop			; (mov r8, r8)
10009596:	46bd      	mov	sp, r7
10009598:	b002      	add	sp, #8
1000959a:	bd80      	pop	{r7, pc}

1000959c <hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_reg>:
	return tmp;
}

static inline void hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                                       hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
1000959c:	b580      	push	{r7, lr}
1000959e:	b082      	sub	sp, #8
100095a0:	af00      	add	r7, sp, #0
100095a2:	6078      	str	r0, [r7, #4]
100095a4:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg |= mask;
100095a6:	687a      	ldr	r2, [r7, #4]
100095a8:	23da      	movs	r3, #218	; 0xda
100095aa:	005b      	lsls	r3, r3, #1
100095ac:	58d2      	ldr	r2, [r2, r3]
100095ae:	683b      	ldr	r3, [r7, #0]
100095b0:	431a      	orrs	r2, r3
100095b2:	0011      	movs	r1, r2
100095b4:	687a      	ldr	r2, [r7, #4]
100095b6:	23da      	movs	r3, #218	; 0xda
100095b8:	005b      	lsls	r3, r3, #1
100095ba:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100095bc:	46c0      	nop			; (mov r8, r8)
100095be:	46bd      	mov	sp, r7
100095c0:	b002      	add	sp, #8
100095c2:	bd80      	pop	{r7, pc}

100095c4 <hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_reg>:
}

static inline void
hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_reg(const void *const                           hw,
                                                      hri_lpmcu_misc_regs_mega_mux_io_sel_5_reg_t mask)
{
100095c4:	b580      	push	{r7, lr}
100095c6:	b082      	sub	sp, #8
100095c8:	af00      	add	r7, sp, #0
100095ca:	6078      	str	r0, [r7, #4]
100095cc:	6039      	str	r1, [r7, #0]
	LPMCU_MISC_REGS_CRITICAL_SECTION_ENTER();
	((LpmcuMiscRegs *)hw)->MEGA_MUX_IO_SEL_5.reg &= ~mask;
100095ce:	687a      	ldr	r2, [r7, #4]
100095d0:	23da      	movs	r3, #218	; 0xda
100095d2:	005b      	lsls	r3, r3, #1
100095d4:	58d3      	ldr	r3, [r2, r3]
100095d6:	683a      	ldr	r2, [r7, #0]
100095d8:	43d2      	mvns	r2, r2
100095da:	401a      	ands	r2, r3
100095dc:	0011      	movs	r1, r2
100095de:	687a      	ldr	r2, [r7, #4]
100095e0:	23da      	movs	r3, #218	; 0xda
100095e2:	005b      	lsls	r3, r3, #1
100095e4:	50d1      	str	r1, [r2, r3]
	LPMCU_MISC_REGS_CRITICAL_SECTION_LEAVE();
}
100095e6:	46c0      	nop			; (mov r8, r8)
100095e8:	46bd      	mov	sp, r7
100095ea:	b002      	add	sp, #8
100095ec:	bd80      	pop	{r7, pc}
	...

100095f0 <_gpio_set_direction>:
{
100095f0:	b580      	push	{r7, lr}
100095f2:	b084      	sub	sp, #16
100095f4:	af00      	add	r7, sp, #0
100095f6:	6039      	str	r1, [r7, #0]
100095f8:	0011      	movs	r1, r2
100095fa:	1dfb      	adds	r3, r7, #7
100095fc:	1c02      	adds	r2, r0, #0
100095fe:	701a      	strb	r2, [r3, #0]
10009600:	1dbb      	adds	r3, r7, #6
10009602:	1c0a      	adds	r2, r1, #0
10009604:	701a      	strb	r2, [r3, #0]
	uint32_t mask_gpio1 = mask >> 16;
10009606:	683b      	ldr	r3, [r7, #0]
10009608:	0c1b      	lsrs	r3, r3, #16
1000960a:	60fb      	str	r3, [r7, #12]
	if (port == GPIO_PORTA) {
1000960c:	1dfb      	adds	r3, r7, #7
1000960e:	781b      	ldrb	r3, [r3, #0]
10009610:	2b00      	cmp	r3, #0
10009612:	d147      	bne.n	100096a4 <_gpio_set_direction+0xb4>
		switch (direction) {
10009614:	1dbb      	adds	r3, r7, #6
10009616:	781b      	ldrb	r3, [r3, #0]
10009618:	2b01      	cmp	r3, #1
1000961a:	d016      	beq.n	1000964a <_gpio_set_direction+0x5a>
1000961c:	2b02      	cmp	r3, #2
1000961e:	d027      	beq.n	10009670 <_gpio_set_direction+0x80>
10009620:	2b00      	cmp	r3, #0
10009622:	d138      	bne.n	10009696 <_gpio_set_direction+0xa6>
			if (mask_gpio1 == 0) {
10009624:	68fb      	ldr	r3, [r7, #12]
10009626:	2b00      	cmp	r3, #0
10009628:	d107      	bne.n	1000963a <_gpio_set_direction+0x4a>
				hri_gpio_clear_OUTENSET_reg(GPIO0, mask);
1000962a:	683b      	ldr	r3, [r7, #0]
1000962c:	b29b      	uxth	r3, r3
1000962e:	4a1f      	ldr	r2, [pc, #124]	; (100096ac <_gpio_set_direction+0xbc>)
10009630:	0019      	movs	r1, r3
10009632:	0010      	movs	r0, r2
10009634:	4b1e      	ldr	r3, [pc, #120]	; (100096b0 <_gpio_set_direction+0xc0>)
10009636:	4798      	blx	r3
			break;
10009638:	e034      	b.n	100096a4 <_gpio_set_direction+0xb4>
				hri_gpio_clear_OUTENSET_reg(GPIO1, mask_gpio1);
1000963a:	68fb      	ldr	r3, [r7, #12]
1000963c:	b29b      	uxth	r3, r3
1000963e:	4a1d      	ldr	r2, [pc, #116]	; (100096b4 <_gpio_set_direction+0xc4>)
10009640:	0019      	movs	r1, r3
10009642:	0010      	movs	r0, r2
10009644:	4b1a      	ldr	r3, [pc, #104]	; (100096b0 <_gpio_set_direction+0xc0>)
10009646:	4798      	blx	r3
			break;
10009648:	e02c      	b.n	100096a4 <_gpio_set_direction+0xb4>
			if (mask_gpio1 == 0) {
1000964a:	68fb      	ldr	r3, [r7, #12]
1000964c:	2b00      	cmp	r3, #0
1000964e:	d107      	bne.n	10009660 <_gpio_set_direction+0x70>
				hri_gpio_clear_OUTENSET_reg(GPIO0, mask);
10009650:	683b      	ldr	r3, [r7, #0]
10009652:	b29b      	uxth	r3, r3
10009654:	4a15      	ldr	r2, [pc, #84]	; (100096ac <_gpio_set_direction+0xbc>)
10009656:	0019      	movs	r1, r3
10009658:	0010      	movs	r0, r2
1000965a:	4b15      	ldr	r3, [pc, #84]	; (100096b0 <_gpio_set_direction+0xc0>)
1000965c:	4798      	blx	r3
			break;
1000965e:	e021      	b.n	100096a4 <_gpio_set_direction+0xb4>
				hri_gpio_clear_OUTENSET_reg(GPIO1, mask_gpio1);
10009660:	68fb      	ldr	r3, [r7, #12]
10009662:	b29b      	uxth	r3, r3
10009664:	4a13      	ldr	r2, [pc, #76]	; (100096b4 <_gpio_set_direction+0xc4>)
10009666:	0019      	movs	r1, r3
10009668:	0010      	movs	r0, r2
1000966a:	4b11      	ldr	r3, [pc, #68]	; (100096b0 <_gpio_set_direction+0xc0>)
1000966c:	4798      	blx	r3
			break;
1000966e:	e019      	b.n	100096a4 <_gpio_set_direction+0xb4>
			if (mask_gpio1 == 0) {
10009670:	68fb      	ldr	r3, [r7, #12]
10009672:	2b00      	cmp	r3, #0
10009674:	d107      	bne.n	10009686 <_gpio_set_direction+0x96>
				hri_gpio_set_OUTENSET_reg(GPIO0, mask);
10009676:	683b      	ldr	r3, [r7, #0]
10009678:	b29b      	uxth	r3, r3
1000967a:	4a0c      	ldr	r2, [pc, #48]	; (100096ac <_gpio_set_direction+0xbc>)
1000967c:	0019      	movs	r1, r3
1000967e:	0010      	movs	r0, r2
10009680:	4b0d      	ldr	r3, [pc, #52]	; (100096b8 <_gpio_set_direction+0xc8>)
10009682:	4798      	blx	r3
			break;
10009684:	e00e      	b.n	100096a4 <_gpio_set_direction+0xb4>
				hri_gpio_set_OUTENSET_reg(GPIO1, mask_gpio1);
10009686:	68fb      	ldr	r3, [r7, #12]
10009688:	b29b      	uxth	r3, r3
1000968a:	4a0a      	ldr	r2, [pc, #40]	; (100096b4 <_gpio_set_direction+0xc4>)
1000968c:	0019      	movs	r1, r3
1000968e:	0010      	movs	r0, r2
10009690:	4b09      	ldr	r3, [pc, #36]	; (100096b8 <_gpio_set_direction+0xc8>)
10009692:	4798      	blx	r3
			break;
10009694:	e006      	b.n	100096a4 <_gpio_set_direction+0xb4>
			ASSERT(false);
10009696:	4b09      	ldr	r3, [pc, #36]	; (100096bc <_gpio_set_direction+0xcc>)
10009698:	2251      	movs	r2, #81	; 0x51
1000969a:	0019      	movs	r1, r3
1000969c:	2000      	movs	r0, #0
1000969e:	4b08      	ldr	r3, [pc, #32]	; (100096c0 <_gpio_set_direction+0xd0>)
100096a0:	4798      	blx	r3
}
100096a2:	e7ff      	b.n	100096a4 <_gpio_set_direction+0xb4>
100096a4:	46c0      	nop			; (mov r8, r8)
100096a6:	46bd      	mov	sp, r7
100096a8:	b004      	add	sp, #16
100096aa:	bd80      	pop	{r7, pc}
100096ac:	40010000 	.word	0x40010000
100096b0:	10009317 	.word	0x10009317
100096b4:	40011000 	.word	0x40011000
100096b8:	100092ef 	.word	0x100092ef
100096bc:	1000fe28 	.word	0x1000fe28
100096c0:	1000a5e1 	.word	0x1000a5e1

100096c4 <_gpio_set_level>:
{
100096c4:	b580      	push	{r7, lr}
100096c6:	b084      	sub	sp, #16
100096c8:	af00      	add	r7, sp, #0
100096ca:	6039      	str	r1, [r7, #0]
100096cc:	0011      	movs	r1, r2
100096ce:	1dfb      	adds	r3, r7, #7
100096d0:	1c02      	adds	r2, r0, #0
100096d2:	701a      	strb	r2, [r3, #0]
100096d4:	1dbb      	adds	r3, r7, #6
100096d6:	1c0a      	adds	r2, r1, #0
100096d8:	701a      	strb	r2, [r3, #0]
	uint32_t mask_gpio1 = mask >> 16;
100096da:	683b      	ldr	r3, [r7, #0]
100096dc:	0c1b      	lsrs	r3, r3, #16
100096de:	60fb      	str	r3, [r7, #12]
	if (port == GPIO_PORTA) {
100096e0:	1dfb      	adds	r3, r7, #7
100096e2:	781b      	ldrb	r3, [r3, #0]
100096e4:	2b00      	cmp	r3, #0
100096e6:	d128      	bne.n	1000973a <_gpio_set_level+0x76>
		if (level) {
100096e8:	1dbb      	adds	r3, r7, #6
100096ea:	781b      	ldrb	r3, [r3, #0]
100096ec:	2b00      	cmp	r3, #0
100096ee:	d012      	beq.n	10009716 <_gpio_set_level+0x52>
			if (mask_gpio1 == 0) {
100096f0:	68fb      	ldr	r3, [r7, #12]
100096f2:	2b00      	cmp	r3, #0
100096f4:	d107      	bne.n	10009706 <_gpio_set_level+0x42>
				hri_gpio_set_DATAOUT_reg(GPIO0, mask);
100096f6:	683b      	ldr	r3, [r7, #0]
100096f8:	b29b      	uxth	r3, r3
100096fa:	4a12      	ldr	r2, [pc, #72]	; (10009744 <_gpio_set_level+0x80>)
100096fc:	0019      	movs	r1, r3
100096fe:	0010      	movs	r0, r2
10009700:	4b11      	ldr	r3, [pc, #68]	; (10009748 <_gpio_set_level+0x84>)
10009702:	4798      	blx	r3
}
10009704:	e019      	b.n	1000973a <_gpio_set_level+0x76>
				hri_gpio_set_DATAOUT_reg(GPIO1, mask_gpio1);
10009706:	68fb      	ldr	r3, [r7, #12]
10009708:	b29b      	uxth	r3, r3
1000970a:	4a10      	ldr	r2, [pc, #64]	; (1000974c <_gpio_set_level+0x88>)
1000970c:	0019      	movs	r1, r3
1000970e:	0010      	movs	r0, r2
10009710:	4b0d      	ldr	r3, [pc, #52]	; (10009748 <_gpio_set_level+0x84>)
10009712:	4798      	blx	r3
}
10009714:	e011      	b.n	1000973a <_gpio_set_level+0x76>
			if (mask_gpio1 == 0) {
10009716:	68fb      	ldr	r3, [r7, #12]
10009718:	2b00      	cmp	r3, #0
1000971a:	d107      	bne.n	1000972c <_gpio_set_level+0x68>
				hri_gpio_clear_DATAOUT_reg(GPIO0, mask);
1000971c:	683b      	ldr	r3, [r7, #0]
1000971e:	b29b      	uxth	r3, r3
10009720:	4a08      	ldr	r2, [pc, #32]	; (10009744 <_gpio_set_level+0x80>)
10009722:	0019      	movs	r1, r3
10009724:	0010      	movs	r0, r2
10009726:	4b0a      	ldr	r3, [pc, #40]	; (10009750 <_gpio_set_level+0x8c>)
10009728:	4798      	blx	r3
}
1000972a:	e006      	b.n	1000973a <_gpio_set_level+0x76>
				hri_gpio_clear_DATAOUT_reg(GPIO1, mask_gpio1);
1000972c:	68fb      	ldr	r3, [r7, #12]
1000972e:	b29b      	uxth	r3, r3
10009730:	4a06      	ldr	r2, [pc, #24]	; (1000974c <_gpio_set_level+0x88>)
10009732:	0019      	movs	r1, r3
10009734:	0010      	movs	r0, r2
10009736:	4b06      	ldr	r3, [pc, #24]	; (10009750 <_gpio_set_level+0x8c>)
10009738:	4798      	blx	r3
}
1000973a:	46c0      	nop			; (mov r8, r8)
1000973c:	46bd      	mov	sp, r7
1000973e:	b004      	add	sp, #16
10009740:	bd80      	pop	{r7, pc}
10009742:	46c0      	nop			; (mov r8, r8)
10009744:	40010000 	.word	0x40010000
10009748:	10009295 	.word	0x10009295
1000974c:	40011000 	.word	0x40011000
10009750:	100092bd 	.word	0x100092bd

10009754 <_gpio_set_pin_function>:

/**
 * \brief Set pin mux position
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
10009754:	b580      	push	{r7, lr}
10009756:	b084      	sub	sp, #16
10009758:	af00      	add	r7, sp, #0
1000975a:	6078      	str	r0, [r7, #4]
1000975c:	6039      	str	r1, [r7, #0]
	uint8_t port        = GPIO_PORT(gpio);
1000975e:	687b      	ldr	r3, [r7, #4]
10009760:	095a      	lsrs	r2, r3, #5
10009762:	230d      	movs	r3, #13
10009764:	18fb      	adds	r3, r7, r3
10009766:	701a      	strb	r2, [r3, #0]
	uint8_t pin         = GPIO_PIN(gpio);
10009768:	687b      	ldr	r3, [r7, #4]
1000976a:	b2da      	uxtb	r2, r3
1000976c:	230c      	movs	r3, #12
1000976e:	18fb      	adds	r3, r7, r3
10009770:	211f      	movs	r1, #31
10009772:	400a      	ands	r2, r1
10009774:	701a      	strb	r2, [r3, #0]
	uint8_t pin_pinmux  = (pin % 8) << 2;
10009776:	230c      	movs	r3, #12
10009778:	18fb      	adds	r3, r7, r3
1000977a:	781b      	ldrb	r3, [r3, #0]
1000977c:	009b      	lsls	r3, r3, #2
1000977e:	b2da      	uxtb	r2, r3
10009780:	230b      	movs	r3, #11
10009782:	18fb      	adds	r3, r7, r3
10009784:	211c      	movs	r1, #28
10009786:	400a      	ands	r2, r1
10009788:	701a      	strb	r2, [r3, #0]
	uint8_t pin_megamux = (pin % 4) << 3;
1000978a:	230c      	movs	r3, #12
1000978c:	18fb      	adds	r3, r7, r3
1000978e:	781b      	ldrb	r3, [r3, #0]
10009790:	00db      	lsls	r3, r3, #3
10009792:	b2da      	uxtb	r2, r3
10009794:	230a      	movs	r3, #10
10009796:	18fb      	adds	r3, r7, r3
10009798:	2118      	movs	r1, #24
1000979a:	400a      	ands	r2, r1
1000979c:	701a      	strb	r2, [r3, #0]
	uint8_t megamux     = (function >> 8) & 0xFF;
1000979e:	683b      	ldr	r3, [r7, #0]
100097a0:	0a1a      	lsrs	r2, r3, #8
100097a2:	230f      	movs	r3, #15
100097a4:	18fb      	adds	r3, r7, r3
100097a6:	701a      	strb	r2, [r3, #0]
	uint8_t muxsel      = function & 0xFF;
100097a8:	230e      	movs	r3, #14
100097aa:	18fb      	adds	r3, r7, r3
100097ac:	683a      	ldr	r2, [r7, #0]
100097ae:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
100097b0:	683b      	ldr	r3, [r7, #0]
100097b2:	3301      	adds	r3, #1
100097b4:	d107      	bne.n	100097c6 <_gpio_set_pin_function+0x72>
		megamux = 0;
100097b6:	230f      	movs	r3, #15
100097b8:	18fb      	adds	r3, r7, r3
100097ba:	2200      	movs	r2, #0
100097bc:	701a      	strb	r2, [r3, #0]
		muxsel  = 0;
100097be:	230e      	movs	r3, #14
100097c0:	18fb      	adds	r3, r7, r3
100097c2:	2200      	movs	r2, #0
100097c4:	701a      	strb	r2, [r3, #0]
	}

	if (port == GPIO_PORTA) {
100097c6:	230d      	movs	r3, #13
100097c8:	18fb      	adds	r3, r7, r3
100097ca:	781b      	ldrb	r3, [r3, #0]
100097cc:	2b00      	cmp	r3, #0
100097ce:	d000      	beq.n	100097d2 <_gpio_set_pin_function+0x7e>
100097d0:	e12e      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
		if (pin <= 7) {
100097d2:	230c      	movs	r3, #12
100097d4:	18fb      	adds	r3, r7, r3
100097d6:	781b      	ldrb	r3, [r3, #0]
100097d8:	2b07      	cmp	r3, #7
100097da:	d860      	bhi.n	1000989e <_gpio_set_pin_function+0x14a>
			hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_0_reg(LPMCU_MISC_REGS0, (7 << pin_pinmux));
100097dc:	230b      	movs	r3, #11
100097de:	18fb      	adds	r3, r7, r3
100097e0:	781b      	ldrb	r3, [r3, #0]
100097e2:	2207      	movs	r2, #7
100097e4:	409a      	lsls	r2, r3
100097e6:	0013      	movs	r3, r2
100097e8:	001a      	movs	r2, r3
100097ea:	4b93      	ldr	r3, [pc, #588]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
100097ec:	0011      	movs	r1, r2
100097ee:	0018      	movs	r0, r3
100097f0:	4b92      	ldr	r3, [pc, #584]	; (10009a3c <_gpio_set_pin_function+0x2e8>)
100097f2:	4798      	blx	r3
			hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_0_reg(LPMCU_MISC_REGS0, (muxsel << pin_pinmux));
100097f4:	230e      	movs	r3, #14
100097f6:	18fb      	adds	r3, r7, r3
100097f8:	781a      	ldrb	r2, [r3, #0]
100097fa:	230b      	movs	r3, #11
100097fc:	18fb      	adds	r3, r7, r3
100097fe:	781b      	ldrb	r3, [r3, #0]
10009800:	409a      	lsls	r2, r3
10009802:	0013      	movs	r3, r2
10009804:	001a      	movs	r2, r3
10009806:	4b8c      	ldr	r3, [pc, #560]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009808:	0011      	movs	r1, r2
1000980a:	0018      	movs	r0, r3
1000980c:	4b8c      	ldr	r3, [pc, #560]	; (10009a40 <_gpio_set_pin_function+0x2ec>)
1000980e:	4798      	blx	r3
			if (muxsel == 0x01) {
10009810:	230e      	movs	r3, #14
10009812:	18fb      	adds	r3, r7, r3
10009814:	781b      	ldrb	r3, [r3, #0]
10009816:	2b01      	cmp	r3, #1
10009818:	d000      	beq.n	1000981c <_gpio_set_pin_function+0xc8>
1000981a:	e109      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
				if (pin <= 3) {
1000981c:	230c      	movs	r3, #12
1000981e:	18fb      	adds	r3, r7, r3
10009820:	781b      	ldrb	r3, [r3, #0]
10009822:	2b03      	cmp	r3, #3
10009824:	d81a      	bhi.n	1000985c <_gpio_set_pin_function+0x108>
					hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_0_reg(LPMCU_MISC_REGS0, (0x3F << pin_megamux));
10009826:	230a      	movs	r3, #10
10009828:	18fb      	adds	r3, r7, r3
1000982a:	781b      	ldrb	r3, [r3, #0]
1000982c:	223f      	movs	r2, #63	; 0x3f
1000982e:	409a      	lsls	r2, r3
10009830:	0013      	movs	r3, r2
10009832:	001a      	movs	r2, r3
10009834:	4b80      	ldr	r3, [pc, #512]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009836:	0011      	movs	r1, r2
10009838:	0018      	movs	r0, r3
1000983a:	4b82      	ldr	r3, [pc, #520]	; (10009a44 <_gpio_set_pin_function+0x2f0>)
1000983c:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_0_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
1000983e:	230f      	movs	r3, #15
10009840:	18fb      	adds	r3, r7, r3
10009842:	781a      	ldrb	r2, [r3, #0]
10009844:	230a      	movs	r3, #10
10009846:	18fb      	adds	r3, r7, r3
10009848:	781b      	ldrb	r3, [r3, #0]
1000984a:	409a      	lsls	r2, r3
1000984c:	0013      	movs	r3, r2
1000984e:	001a      	movs	r2, r3
10009850:	4b79      	ldr	r3, [pc, #484]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009852:	0011      	movs	r1, r2
10009854:	0018      	movs	r0, r3
10009856:	4b7c      	ldr	r3, [pc, #496]	; (10009a48 <_gpio_set_pin_function+0x2f4>)
10009858:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
				}
			}
		}
	}
}
1000985a:	e0e9      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
				} else if (pin <= 7) {
1000985c:	230c      	movs	r3, #12
1000985e:	18fb      	adds	r3, r7, r3
10009860:	781b      	ldrb	r3, [r3, #0]
10009862:	2b07      	cmp	r3, #7
10009864:	d900      	bls.n	10009868 <_gpio_set_pin_function+0x114>
10009866:	e0e3      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
					hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_1_reg(LPMCU_MISC_REGS0, (0x3F << pin_megamux));
10009868:	230a      	movs	r3, #10
1000986a:	18fb      	adds	r3, r7, r3
1000986c:	781b      	ldrb	r3, [r3, #0]
1000986e:	223f      	movs	r2, #63	; 0x3f
10009870:	409a      	lsls	r2, r3
10009872:	0013      	movs	r3, r2
10009874:	001a      	movs	r2, r3
10009876:	4b70      	ldr	r3, [pc, #448]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009878:	0011      	movs	r1, r2
1000987a:	0018      	movs	r0, r3
1000987c:	4b73      	ldr	r3, [pc, #460]	; (10009a4c <_gpio_set_pin_function+0x2f8>)
1000987e:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_1_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
10009880:	230f      	movs	r3, #15
10009882:	18fb      	adds	r3, r7, r3
10009884:	781a      	ldrb	r2, [r3, #0]
10009886:	230a      	movs	r3, #10
10009888:	18fb      	adds	r3, r7, r3
1000988a:	781b      	ldrb	r3, [r3, #0]
1000988c:	409a      	lsls	r2, r3
1000988e:	0013      	movs	r3, r2
10009890:	001a      	movs	r2, r3
10009892:	4b69      	ldr	r3, [pc, #420]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009894:	0011      	movs	r1, r2
10009896:	0018      	movs	r0, r3
10009898:	4b6d      	ldr	r3, [pc, #436]	; (10009a50 <_gpio_set_pin_function+0x2fc>)
1000989a:	4798      	blx	r3
}
1000989c:	e0c8      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
		} else if (pin <= 15) {
1000989e:	230c      	movs	r3, #12
100098a0:	18fb      	adds	r3, r7, r3
100098a2:	781b      	ldrb	r3, [r3, #0]
100098a4:	2b0f      	cmp	r3, #15
100098a6:	d860      	bhi.n	1000996a <_gpio_set_pin_function+0x216>
			hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_1_reg(LPMCU_MISC_REGS0, (7 << pin_pinmux));
100098a8:	230b      	movs	r3, #11
100098aa:	18fb      	adds	r3, r7, r3
100098ac:	781b      	ldrb	r3, [r3, #0]
100098ae:	2207      	movs	r2, #7
100098b0:	409a      	lsls	r2, r3
100098b2:	0013      	movs	r3, r2
100098b4:	001a      	movs	r2, r3
100098b6:	4b60      	ldr	r3, [pc, #384]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
100098b8:	0011      	movs	r1, r2
100098ba:	0018      	movs	r0, r3
100098bc:	4b65      	ldr	r3, [pc, #404]	; (10009a54 <_gpio_set_pin_function+0x300>)
100098be:	4798      	blx	r3
			hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_1_reg(LPMCU_MISC_REGS0, (muxsel << pin_pinmux));
100098c0:	230e      	movs	r3, #14
100098c2:	18fb      	adds	r3, r7, r3
100098c4:	781a      	ldrb	r2, [r3, #0]
100098c6:	230b      	movs	r3, #11
100098c8:	18fb      	adds	r3, r7, r3
100098ca:	781b      	ldrb	r3, [r3, #0]
100098cc:	409a      	lsls	r2, r3
100098ce:	0013      	movs	r3, r2
100098d0:	001a      	movs	r2, r3
100098d2:	4b59      	ldr	r3, [pc, #356]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
100098d4:	0011      	movs	r1, r2
100098d6:	0018      	movs	r0, r3
100098d8:	4b5f      	ldr	r3, [pc, #380]	; (10009a58 <_gpio_set_pin_function+0x304>)
100098da:	4798      	blx	r3
			if (muxsel == 0x01) {
100098dc:	230e      	movs	r3, #14
100098de:	18fb      	adds	r3, r7, r3
100098e0:	781b      	ldrb	r3, [r3, #0]
100098e2:	2b01      	cmp	r3, #1
100098e4:	d000      	beq.n	100098e8 <_gpio_set_pin_function+0x194>
100098e6:	e0a3      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
				if (pin <= 11) {
100098e8:	230c      	movs	r3, #12
100098ea:	18fb      	adds	r3, r7, r3
100098ec:	781b      	ldrb	r3, [r3, #0]
100098ee:	2b0b      	cmp	r3, #11
100098f0:	d81a      	bhi.n	10009928 <_gpio_set_pin_function+0x1d4>
					hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_2_reg(LPMCU_MISC_REGS0, (0x3F << pin_megamux));
100098f2:	230a      	movs	r3, #10
100098f4:	18fb      	adds	r3, r7, r3
100098f6:	781b      	ldrb	r3, [r3, #0]
100098f8:	223f      	movs	r2, #63	; 0x3f
100098fa:	409a      	lsls	r2, r3
100098fc:	0013      	movs	r3, r2
100098fe:	001a      	movs	r2, r3
10009900:	4b4d      	ldr	r3, [pc, #308]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009902:	0011      	movs	r1, r2
10009904:	0018      	movs	r0, r3
10009906:	4b55      	ldr	r3, [pc, #340]	; (10009a5c <_gpio_set_pin_function+0x308>)
10009908:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_2_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
1000990a:	230f      	movs	r3, #15
1000990c:	18fb      	adds	r3, r7, r3
1000990e:	781a      	ldrb	r2, [r3, #0]
10009910:	230a      	movs	r3, #10
10009912:	18fb      	adds	r3, r7, r3
10009914:	781b      	ldrb	r3, [r3, #0]
10009916:	409a      	lsls	r2, r3
10009918:	0013      	movs	r3, r2
1000991a:	001a      	movs	r2, r3
1000991c:	4b46      	ldr	r3, [pc, #280]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
1000991e:	0011      	movs	r1, r2
10009920:	0018      	movs	r0, r3
10009922:	4b4f      	ldr	r3, [pc, #316]	; (10009a60 <_gpio_set_pin_function+0x30c>)
10009924:	4798      	blx	r3
}
10009926:	e083      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
				} else if (pin <= 15) {
10009928:	230c      	movs	r3, #12
1000992a:	18fb      	adds	r3, r7, r3
1000992c:	781b      	ldrb	r3, [r3, #0]
1000992e:	2b0f      	cmp	r3, #15
10009930:	d900      	bls.n	10009934 <_gpio_set_pin_function+0x1e0>
10009932:	e07d      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
					hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_3_reg(LPMCU_MISC_REGS0, (0x3F << pin_megamux));
10009934:	230a      	movs	r3, #10
10009936:	18fb      	adds	r3, r7, r3
10009938:	781b      	ldrb	r3, [r3, #0]
1000993a:	223f      	movs	r2, #63	; 0x3f
1000993c:	409a      	lsls	r2, r3
1000993e:	0013      	movs	r3, r2
10009940:	001a      	movs	r2, r3
10009942:	4b3d      	ldr	r3, [pc, #244]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009944:	0011      	movs	r1, r2
10009946:	0018      	movs	r0, r3
10009948:	4b46      	ldr	r3, [pc, #280]	; (10009a64 <_gpio_set_pin_function+0x310>)
1000994a:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_3_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
1000994c:	230f      	movs	r3, #15
1000994e:	18fb      	adds	r3, r7, r3
10009950:	781a      	ldrb	r2, [r3, #0]
10009952:	230a      	movs	r3, #10
10009954:	18fb      	adds	r3, r7, r3
10009956:	781b      	ldrb	r3, [r3, #0]
10009958:	409a      	lsls	r2, r3
1000995a:	0013      	movs	r3, r2
1000995c:	001a      	movs	r2, r3
1000995e:	4b36      	ldr	r3, [pc, #216]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009960:	0011      	movs	r1, r2
10009962:	0018      	movs	r0, r3
10009964:	4b40      	ldr	r3, [pc, #256]	; (10009a68 <_gpio_set_pin_function+0x314>)
10009966:	4798      	blx	r3
}
10009968:	e062      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
		} else if (pin <= 23) {
1000996a:	230c      	movs	r3, #12
1000996c:	18fb      	adds	r3, r7, r3
1000996e:	781b      	ldrb	r3, [r3, #0]
10009970:	2b17      	cmp	r3, #23
10009972:	d85d      	bhi.n	10009a30 <_gpio_set_pin_function+0x2dc>
			hri_lpmcumiscregsmiscregs_clear_PINMUX_SEL_2_reg(LPMCU_MISC_REGS0, (7 << pin_pinmux));
10009974:	230b      	movs	r3, #11
10009976:	18fb      	adds	r3, r7, r3
10009978:	781b      	ldrb	r3, [r3, #0]
1000997a:	2207      	movs	r2, #7
1000997c:	409a      	lsls	r2, r3
1000997e:	0013      	movs	r3, r2
10009980:	001a      	movs	r2, r3
10009982:	4b2d      	ldr	r3, [pc, #180]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009984:	0011      	movs	r1, r2
10009986:	0018      	movs	r0, r3
10009988:	4b38      	ldr	r3, [pc, #224]	; (10009a6c <_gpio_set_pin_function+0x318>)
1000998a:	4798      	blx	r3
			hri_lpmcumiscregsmiscregs_set_PINMUX_SEL_2_reg(LPMCU_MISC_REGS0, (muxsel << pin_pinmux));
1000998c:	230e      	movs	r3, #14
1000998e:	18fb      	adds	r3, r7, r3
10009990:	781a      	ldrb	r2, [r3, #0]
10009992:	230b      	movs	r3, #11
10009994:	18fb      	adds	r3, r7, r3
10009996:	781b      	ldrb	r3, [r3, #0]
10009998:	409a      	lsls	r2, r3
1000999a:	0013      	movs	r3, r2
1000999c:	001a      	movs	r2, r3
1000999e:	4b26      	ldr	r3, [pc, #152]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
100099a0:	0011      	movs	r1, r2
100099a2:	0018      	movs	r0, r3
100099a4:	4b32      	ldr	r3, [pc, #200]	; (10009a70 <_gpio_set_pin_function+0x31c>)
100099a6:	4798      	blx	r3
			if (muxsel == 0x01) {
100099a8:	230e      	movs	r3, #14
100099aa:	18fb      	adds	r3, r7, r3
100099ac:	781b      	ldrb	r3, [r3, #0]
100099ae:	2b01      	cmp	r3, #1
100099b0:	d13e      	bne.n	10009a30 <_gpio_set_pin_function+0x2dc>
				if (pin <= 19) {
100099b2:	230c      	movs	r3, #12
100099b4:	18fb      	adds	r3, r7, r3
100099b6:	781b      	ldrb	r3, [r3, #0]
100099b8:	2b13      	cmp	r3, #19
100099ba:	d81a      	bhi.n	100099f2 <_gpio_set_pin_function+0x29e>
					hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_4_reg(LPMCU_MISC_REGS0, (0x3F << pin_megamux));
100099bc:	230a      	movs	r3, #10
100099be:	18fb      	adds	r3, r7, r3
100099c0:	781b      	ldrb	r3, [r3, #0]
100099c2:	223f      	movs	r2, #63	; 0x3f
100099c4:	409a      	lsls	r2, r3
100099c6:	0013      	movs	r3, r2
100099c8:	001a      	movs	r2, r3
100099ca:	4b1b      	ldr	r3, [pc, #108]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
100099cc:	0011      	movs	r1, r2
100099ce:	0018      	movs	r0, r3
100099d0:	4b28      	ldr	r3, [pc, #160]	; (10009a74 <_gpio_set_pin_function+0x320>)
100099d2:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_4_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
100099d4:	230f      	movs	r3, #15
100099d6:	18fb      	adds	r3, r7, r3
100099d8:	781a      	ldrb	r2, [r3, #0]
100099da:	230a      	movs	r3, #10
100099dc:	18fb      	adds	r3, r7, r3
100099de:	781b      	ldrb	r3, [r3, #0]
100099e0:	409a      	lsls	r2, r3
100099e2:	0013      	movs	r3, r2
100099e4:	001a      	movs	r2, r3
100099e6:	4b14      	ldr	r3, [pc, #80]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
100099e8:	0011      	movs	r1, r2
100099ea:	0018      	movs	r0, r3
100099ec:	4b22      	ldr	r3, [pc, #136]	; (10009a78 <_gpio_set_pin_function+0x324>)
100099ee:	4798      	blx	r3
}
100099f0:	e01e      	b.n	10009a30 <_gpio_set_pin_function+0x2dc>
				} else if (pin <= 23) {
100099f2:	230c      	movs	r3, #12
100099f4:	18fb      	adds	r3, r7, r3
100099f6:	781b      	ldrb	r3, [r3, #0]
100099f8:	2b17      	cmp	r3, #23
100099fa:	d819      	bhi.n	10009a30 <_gpio_set_pin_function+0x2dc>
					hri_lpmcumiscregsmiscregs_clear_MEGA_MUX_IO_SEL_5_reg(LPMCU_MISC_REGS0, (0x3F << pin_megamux));
100099fc:	230a      	movs	r3, #10
100099fe:	18fb      	adds	r3, r7, r3
10009a00:	781b      	ldrb	r3, [r3, #0]
10009a02:	223f      	movs	r2, #63	; 0x3f
10009a04:	409a      	lsls	r2, r3
10009a06:	0013      	movs	r3, r2
10009a08:	001a      	movs	r2, r3
10009a0a:	4b0b      	ldr	r3, [pc, #44]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009a0c:	0011      	movs	r1, r2
10009a0e:	0018      	movs	r0, r3
10009a10:	4b1a      	ldr	r3, [pc, #104]	; (10009a7c <_gpio_set_pin_function+0x328>)
10009a12:	4798      	blx	r3
					hri_lpmcumiscregsmiscregs_set_MEGA_MUX_IO_SEL_5_reg(LPMCU_MISC_REGS0, (megamux << pin_megamux));
10009a14:	230f      	movs	r3, #15
10009a16:	18fb      	adds	r3, r7, r3
10009a18:	781a      	ldrb	r2, [r3, #0]
10009a1a:	230a      	movs	r3, #10
10009a1c:	18fb      	adds	r3, r7, r3
10009a1e:	781b      	ldrb	r3, [r3, #0]
10009a20:	409a      	lsls	r2, r3
10009a22:	0013      	movs	r3, r2
10009a24:	001a      	movs	r2, r3
10009a26:	4b04      	ldr	r3, [pc, #16]	; (10009a38 <_gpio_set_pin_function+0x2e4>)
10009a28:	0011      	movs	r1, r2
10009a2a:	0018      	movs	r0, r3
10009a2c:	4b14      	ldr	r3, [pc, #80]	; (10009a80 <_gpio_set_pin_function+0x32c>)
10009a2e:	4798      	blx	r3
}
10009a30:	46c0      	nop			; (mov r8, r8)
10009a32:	46bd      	mov	sp, r7
10009a34:	b004      	add	sp, #16
10009a36:	bd80      	pop	{r7, pc}
10009a38:	4000b000 	.word	0x4000b000
10009a3c:	10009367 	.word	0x10009367
10009a40:	10009349 	.word	0x10009349
10009a44:	1000942b 	.word	0x1000942b
10009a48:	10009403 	.word	0x10009403
10009a4c:	1000947d 	.word	0x1000947d
10009a50:	10009455 	.word	0x10009455
10009a54:	100093a5 	.word	0x100093a5
10009a58:	10009387 	.word	0x10009387
10009a5c:	100094cf 	.word	0x100094cf
10009a60:	100094a7 	.word	0x100094a7
10009a64:	10009521 	.word	0x10009521
10009a68:	100094f9 	.word	0x100094f9
10009a6c:	100093e3 	.word	0x100093e3
10009a70:	100093c5 	.word	0x100093c5
10009a74:	10009573 	.word	0x10009573
10009a78:	1000954b 	.word	0x1000954b
10009a7c:	100095c5 	.word	0x100095c5
10009a80:	1000959d 	.word	0x1000959d

10009a84 <gpio_set_pin_function>:
{
10009a84:	b580      	push	{r7, lr}
10009a86:	b082      	sub	sp, #8
10009a88:	af00      	add	r7, sp, #0
10009a8a:	6078      	str	r0, [r7, #4]
10009a8c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
10009a8e:	683a      	ldr	r2, [r7, #0]
10009a90:	687b      	ldr	r3, [r7, #4]
10009a92:	0011      	movs	r1, r2
10009a94:	0018      	movs	r0, r3
10009a96:	4b03      	ldr	r3, [pc, #12]	; (10009aa4 <gpio_set_pin_function+0x20>)
10009a98:	4798      	blx	r3
}
10009a9a:	46c0      	nop			; (mov r8, r8)
10009a9c:	46bd      	mov	sp, r7
10009a9e:	b002      	add	sp, #8
10009aa0:	bd80      	pop	{r7, pc}
10009aa2:	46c0      	nop			; (mov r8, r8)
10009aa4:	10009755 	.word	0x10009755

10009aa8 <gpio_set_pin_direction>:
{
10009aa8:	b580      	push	{r7, lr}
10009aaa:	b082      	sub	sp, #8
10009aac:	af00      	add	r7, sp, #0
10009aae:	0002      	movs	r2, r0
10009ab0:	1dfb      	adds	r3, r7, #7
10009ab2:	701a      	strb	r2, [r3, #0]
10009ab4:	1dbb      	adds	r3, r7, #6
10009ab6:	1c0a      	adds	r2, r1, #0
10009ab8:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
10009aba:	1dfb      	adds	r3, r7, #7
10009abc:	781b      	ldrb	r3, [r3, #0]
10009abe:	095b      	lsrs	r3, r3, #5
10009ac0:	b2d8      	uxtb	r0, r3
10009ac2:	1dfb      	adds	r3, r7, #7
10009ac4:	781b      	ldrb	r3, [r3, #0]
10009ac6:	221f      	movs	r2, #31
10009ac8:	4013      	ands	r3, r2
10009aca:	2201      	movs	r2, #1
10009acc:	409a      	lsls	r2, r3
10009ace:	0011      	movs	r1, r2
10009ad0:	1dbb      	adds	r3, r7, #6
10009ad2:	781b      	ldrb	r3, [r3, #0]
10009ad4:	001a      	movs	r2, r3
10009ad6:	4b03      	ldr	r3, [pc, #12]	; (10009ae4 <gpio_set_pin_direction+0x3c>)
10009ad8:	4798      	blx	r3
}
10009ada:	46c0      	nop			; (mov r8, r8)
10009adc:	46bd      	mov	sp, r7
10009ade:	b002      	add	sp, #8
10009ae0:	bd80      	pop	{r7, pc}
10009ae2:	46c0      	nop			; (mov r8, r8)
10009ae4:	100095f1 	.word	0x100095f1

10009ae8 <gpio_set_pin_level>:
{
10009ae8:	b580      	push	{r7, lr}
10009aea:	b082      	sub	sp, #8
10009aec:	af00      	add	r7, sp, #0
10009aee:	0002      	movs	r2, r0
10009af0:	1dfb      	adds	r3, r7, #7
10009af2:	701a      	strb	r2, [r3, #0]
10009af4:	1dbb      	adds	r3, r7, #6
10009af6:	1c0a      	adds	r2, r1, #0
10009af8:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
10009afa:	1dfb      	adds	r3, r7, #7
10009afc:	781b      	ldrb	r3, [r3, #0]
10009afe:	095b      	lsrs	r3, r3, #5
10009b00:	b2d8      	uxtb	r0, r3
10009b02:	1dfb      	adds	r3, r7, #7
10009b04:	781b      	ldrb	r3, [r3, #0]
10009b06:	221f      	movs	r2, #31
10009b08:	4013      	ands	r3, r2
10009b0a:	2201      	movs	r2, #1
10009b0c:	409a      	lsls	r2, r3
10009b0e:	0011      	movs	r1, r2
10009b10:	1dbb      	adds	r3, r7, #6
10009b12:	781b      	ldrb	r3, [r3, #0]
10009b14:	001a      	movs	r2, r3
10009b16:	4b03      	ldr	r3, [pc, #12]	; (10009b24 <gpio_set_pin_level+0x3c>)
10009b18:	4798      	blx	r3
}
10009b1a:	46c0      	nop			; (mov r8, r8)
10009b1c:	46bd      	mov	sp, r7
10009b1e:	b002      	add	sp, #8
10009b20:	bd80      	pop	{r7, pc}
10009b22:	46c0      	nop			; (mov r8, r8)
10009b24:	100096c5 	.word	0x100096c5

10009b28 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
10009b28:	b580      	push	{r7, lr}
10009b2a:	af00      	add	r7, sp, #0
	_init_chip();
10009b2c:	4b02      	ldr	r3, [pc, #8]	; (10009b38 <init_mcu+0x10>)
10009b2e:	4798      	blx	r3
}
10009b30:	46c0      	nop			; (mov r8, r8)
10009b32:	46bd      	mov	sp, r7
10009b34:	bd80      	pop	{r7, pc}
10009b36:	46c0      	nop			; (mov r8, r8)
10009b38:	1000aa01 	.word	0x1000aa01

10009b3c <TIMER_0_init>:
	wdt_init(&WDT_0, WDT0);
	wdt_disable(&WDT_0);
}

static void TIMER_0_init(void)
{
10009b3c:	b580      	push	{r7, lr}
10009b3e:	af00      	add	r7, sp, #0
	//see AON_SLEEP_TIMER_TICK to tune the timer
	timer_init(&TIMER_0, AON_SLEEP_TIMER0, _aon_get_timer());
10009b40:	4b05      	ldr	r3, [pc, #20]	; (10009b58 <TIMER_0_init+0x1c>)
10009b42:	4798      	blx	r3
10009b44:	0002      	movs	r2, r0
10009b46:	4905      	ldr	r1, [pc, #20]	; (10009b5c <TIMER_0_init+0x20>)
10009b48:	4b05      	ldr	r3, [pc, #20]	; (10009b60 <TIMER_0_init+0x24>)
10009b4a:	0018      	movs	r0, r3
10009b4c:	4b05      	ldr	r3, [pc, #20]	; (10009b64 <TIMER_0_init+0x28>)
10009b4e:	4798      	blx	r3
}
10009b50:	46c0      	nop			; (mov r8, r8)
10009b52:	46bd      	mov	sp, r7
10009b54:	bd80      	pop	{r7, pc}
10009b56:	46c0      	nop			; (mov r8, r8)
10009b58:	1000a9f5 	.word	0x1000a9f5
10009b5c:	4000d000 	.word	0x4000d000
10009b60:	10011284 	.word	0x10011284
10009b64:	1000a255 	.word	0x1000a255

10009b68 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
10009b68:	b580      	push	{r7, lr}
10009b6a:	af00      	add	r7, sp, #0
	gpio_set_pin_function(LP_GPIO_9, PINMUX_LP_GPIO_9_M_I2C0_SCL);
10009b6c:	4b06      	ldr	r3, [pc, #24]	; (10009b88 <I2C_0_PORT_init+0x20>)
10009b6e:	0019      	movs	r1, r3
10009b70:	2009      	movs	r0, #9
10009b72:	4b06      	ldr	r3, [pc, #24]	; (10009b8c <I2C_0_PORT_init+0x24>)
10009b74:	4798      	blx	r3
	gpio_set_pin_function(LP_GPIO_8, PINMUX_LP_GPIO_8_M_I2C0_SDA);
10009b76:	4b06      	ldr	r3, [pc, #24]	; (10009b90 <I2C_0_PORT_init+0x28>)
10009b78:	0019      	movs	r1, r3
10009b7a:	2008      	movs	r0, #8
10009b7c:	4b03      	ldr	r3, [pc, #12]	; (10009b8c <I2C_0_PORT_init+0x24>)
10009b7e:	4798      	blx	r3
}
10009b80:	46c0      	nop			; (mov r8, r8)
10009b82:	46bd      	mov	sp, r7
10009b84:	bd80      	pop	{r7, pc}
10009b86:	46c0      	nop			; (mov r8, r8)
10009b88:	00090901 	.word	0x00090901
10009b8c:	10009a85 	.word	0x10009a85
10009b90:	00080801 	.word	0x00080801

10009b94 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
10009b94:	b580      	push	{r7, lr}
10009b96:	af00      	add	r7, sp, #0
}
10009b98:	46c0      	nop			; (mov r8, r8)
10009b9a:	46bd      	mov	sp, r7
10009b9c:	bd80      	pop	{r7, pc}
	...

10009ba0 <I2C_0_init>:

void I2C_0_init(void)
{
10009ba0:	b580      	push	{r7, lr}
10009ba2:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
10009ba4:	4b06      	ldr	r3, [pc, #24]	; (10009bc0 <I2C_0_init+0x20>)
10009ba6:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, I2C0);
10009ba8:	4a06      	ldr	r2, [pc, #24]	; (10009bc4 <I2C_0_init+0x24>)
10009baa:	4b07      	ldr	r3, [pc, #28]	; (10009bc8 <I2C_0_init+0x28>)
10009bac:	0011      	movs	r1, r2
10009bae:	0018      	movs	r0, r3
10009bb0:	4b06      	ldr	r3, [pc, #24]	; (10009bcc <I2C_0_init+0x2c>)
10009bb2:	4798      	blx	r3
	I2C_0_PORT_init();
10009bb4:	4b06      	ldr	r3, [pc, #24]	; (10009bd0 <I2C_0_init+0x30>)
10009bb6:	4798      	blx	r3
}
10009bb8:	46c0      	nop			; (mov r8, r8)
10009bba:	46bd      	mov	sp, r7
10009bbc:	bd80      	pop	{r7, pc}
10009bbe:	46c0      	nop			; (mov r8, r8)
10009bc0:	10009b95 	.word	0x10009b95
10009bc4:	40003000 	.word	0x40003000
10009bc8:	10011264 	.word	0x10011264
10009bcc:	10009e41 	.word	0x10009e41
10009bd0:	10009b69 	.word	0x10009b69

10009bd4 <I2C0_register_isr>:

void I2C0_register_isr(void)
{
10009bd4:	b580      	push	{r7, lr}
10009bd6:	af00      	add	r7, sp, #0
	uint32_t *temp;
}
10009bd8:	46c0      	nop			; (mov r8, r8)
10009bda:	46bd      	mov	sp, r7
10009bdc:	bd80      	pop	{r7, pc}
	...

10009be0 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
10009be0:	b580      	push	{r7, lr}
10009be2:	af00      	add	r7, sp, #0
	//gpio_set_pin_direction(LP_GPIO_5, GPIO_DIRECTION_IN);
	//gpio_set_pin_pull_mode(LP_GPIO_5, GPIO_PULL_OFF);
	//gpio_set_pin_function(LP_GPIO_5, PINMUX_LP_GPIO_5_SPI0_MISO);

	// Set pin direction to output
	gpio_set_pin_direction(LP_GPIO_11, GPIO_DIRECTION_OUT);
10009be4:	2102      	movs	r1, #2
10009be6:	200b      	movs	r0, #11
10009be8:	4b1e      	ldr	r3, [pc, #120]	; (10009c64 <SPI_0_PORT_init+0x84>)
10009bea:	4798      	blx	r3
	gpio_set_pin_level(LP_GPIO_11, false);
10009bec:	2100      	movs	r1, #0
10009bee:	200b      	movs	r0, #11
10009bf0:	4b1d      	ldr	r3, [pc, #116]	; (10009c68 <SPI_0_PORT_init+0x88>)
10009bf2:	4798      	blx	r3
	gpio_set_pin_function(LP_GPIO_11, PINMUX_LP_GPIO_11_SPI0_MOSI);
10009bf4:	4b1d      	ldr	r3, [pc, #116]	; (10009c6c <SPI_0_PORT_init+0x8c>)
10009bf6:	0019      	movs	r1, r3
10009bf8:	200b      	movs	r0, #11
10009bfa:	4b1d      	ldr	r3, [pc, #116]	; (10009c70 <SPI_0_PORT_init+0x90>)
10009bfc:	4798      	blx	r3

	// Set pin direction to output
	gpio_set_pin_direction(LP_GPIO_10, GPIO_DIRECTION_OUT);
10009bfe:	2102      	movs	r1, #2
10009c00:	200a      	movs	r0, #10
10009c02:	4b18      	ldr	r3, [pc, #96]	; (10009c64 <SPI_0_PORT_init+0x84>)
10009c04:	4798      	blx	r3
	gpio_set_pin_level(LP_GPIO_10, false);
10009c06:	2100      	movs	r1, #0
10009c08:	200a      	movs	r0, #10
10009c0a:	4b17      	ldr	r3, [pc, #92]	; (10009c68 <SPI_0_PORT_init+0x88>)
10009c0c:	4798      	blx	r3
	gpio_set_pin_function(LP_GPIO_10, PINMUX_LP_GPIO_10_SPI0_SCK);
10009c0e:	4b19      	ldr	r3, [pc, #100]	; (10009c74 <SPI_0_PORT_init+0x94>)
10009c10:	0019      	movs	r1, r3
10009c12:	200a      	movs	r0, #10
10009c14:	4b16      	ldr	r3, [pc, #88]	; (10009c70 <SPI_0_PORT_init+0x90>)
10009c16:	4798      	blx	r3
	
	//Chip select
	gpio_set_pin_direction(LP_GPIO_12, GPIO_DIRECTION_OUT);
10009c18:	2102      	movs	r1, #2
10009c1a:	200c      	movs	r0, #12
10009c1c:	4b11      	ldr	r3, [pc, #68]	; (10009c64 <SPI_0_PORT_init+0x84>)
10009c1e:	4798      	blx	r3
	gpio_set_pin_level(LP_GPIO_12, false);
10009c20:	2100      	movs	r1, #0
10009c22:	200c      	movs	r0, #12
10009c24:	4b10      	ldr	r3, [pc, #64]	; (10009c68 <SPI_0_PORT_init+0x88>)
10009c26:	4798      	blx	r3
	
	//Initalize TFT_RESET
	gpio_set_pin_direction(LP_GPIO_13, GPIO_DIRECTION_OUT);
10009c28:	2102      	movs	r1, #2
10009c2a:	200d      	movs	r0, #13
10009c2c:	4b0d      	ldr	r3, [pc, #52]	; (10009c64 <SPI_0_PORT_init+0x84>)
10009c2e:	4798      	blx	r3
	gpio_set_pin_level(LP_GPIO_13, true);
10009c30:	2101      	movs	r1, #1
10009c32:	200d      	movs	r0, #13
10009c34:	4b0c      	ldr	r3, [pc, #48]	; (10009c68 <SPI_0_PORT_init+0x88>)
10009c36:	4798      	blx	r3
	
	//A0 register control
	gpio_set_pin_direction(LP_GPIO_7, GPIO_DIRECTION_OUT);
10009c38:	2102      	movs	r1, #2
10009c3a:	2007      	movs	r0, #7
10009c3c:	4b09      	ldr	r3, [pc, #36]	; (10009c64 <SPI_0_PORT_init+0x84>)
10009c3e:	4798      	blx	r3
	
	//LED_EN
	gpio_set_pin_direction(LP_GPIO_3, GPIO_DIRECTION_OUT);
10009c40:	2102      	movs	r1, #2
10009c42:	2003      	movs	r0, #3
10009c44:	4b07      	ldr	r3, [pc, #28]	; (10009c64 <SPI_0_PORT_init+0x84>)
10009c46:	4798      	blx	r3
	gpio_set_pin_level(LP_GPIO_3, true);
10009c48:	2101      	movs	r1, #1
10009c4a:	2003      	movs	r0, #3
10009c4c:	4b06      	ldr	r3, [pc, #24]	; (10009c68 <SPI_0_PORT_init+0x88>)
10009c4e:	4798      	blx	r3
	//gpio_set_pin_pull_mode(LP_GPIO_3, GPIO_PULL_OFF);
	
	gpio_set_pin_function(LP_GPIO_8, GPIO_PIN_FUNCTION_OFF);
10009c50:	2301      	movs	r3, #1
10009c52:	425b      	negs	r3, r3
10009c54:	0019      	movs	r1, r3
10009c56:	2008      	movs	r0, #8
10009c58:	4b05      	ldr	r3, [pc, #20]	; (10009c70 <SPI_0_PORT_init+0x90>)
10009c5a:	4798      	blx	r3
}
10009c5c:	46c0      	nop			; (mov r8, r8)
10009c5e:	46bd      	mov	sp, r7
10009c60:	bd80      	pop	{r7, pc}
10009c62:	46c0      	nop			; (mov r8, r8)
10009c64:	10009aa9 	.word	0x10009aa9
10009c68:	10009ae9 	.word	0x10009ae9
10009c6c:	000b0002 	.word	0x000b0002
10009c70:	10009a85 	.word	0x10009a85
10009c74:	000a0002 	.word	0x000a0002

10009c78 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
10009c78:	b580      	push	{r7, lr}
10009c7a:	af00      	add	r7, sp, #0
}
10009c7c:	46c0      	nop			; (mov r8, r8)
10009c7e:	46bd      	mov	sp, r7
10009c80:	bd80      	pop	{r7, pc}
	...

10009c84 <SPI_0_init>:
	temp  = (uint32_t *)((RAM_ISR_TABLE_SPITX0 + (0 << 1)) * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = (uint32_t)SPI0_TX_Handler;
}

void SPI_0_init(void)
{
10009c84:	b580      	push	{r7, lr}
10009c86:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init(); //useless?
10009c88:	4b06      	ldr	r3, [pc, #24]	; (10009ca4 <SPI_0_init+0x20>)
10009c8a:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
10009c8c:	4a06      	ldr	r2, [pc, #24]	; (10009ca8 <SPI_0_init+0x24>)
10009c8e:	4b07      	ldr	r3, [pc, #28]	; (10009cac <SPI_0_init+0x28>)
10009c90:	0011      	movs	r1, r2
10009c92:	0018      	movs	r0, r3
10009c94:	4b06      	ldr	r3, [pc, #24]	; (10009cb0 <SPI_0_init+0x2c>)
10009c96:	4798      	blx	r3
	SPI_0_PORT_init();
10009c98:	4b06      	ldr	r3, [pc, #24]	; (10009cb4 <SPI_0_init+0x30>)
10009c9a:	4798      	blx	r3
}
10009c9c:	46c0      	nop			; (mov r8, r8)
10009c9e:	46bd      	mov	sp, r7
10009ca0:	bd80      	pop	{r7, pc}
10009ca2:	46c0      	nop			; (mov r8, r8)
10009ca4:	10009c79 	.word	0x10009c79
10009ca8:	40006000 	.word	0x40006000
10009cac:	10011250 	.word	0x10011250
10009cb0:	10009fdd 	.word	0x10009fdd
10009cb4:	10009be1 	.word	0x10009be1

10009cb8 <AON_SLEEP_TIMER0_register_isr>:

void AON_SLEEP_TIMER0_register_isr(void)
{
10009cb8:	b580      	push	{r7, lr}
10009cba:	b082      	sub	sp, #8
10009cbc:	af00      	add	r7, sp, #0
	uint32_t *temp;

	temp  = (uint32_t *)((RAM_ISR_TABLE_AON_SLEEP_TIMER + 0) * 4 + ISR_RAM_MAP_START_ADDRESS);
10009cbe:	4b04      	ldr	r3, [pc, #16]	; (10009cd0 <AON_SLEEP_TIMER0_register_isr+0x18>)
10009cc0:	607b      	str	r3, [r7, #4]
	*temp = (uint32_t)AON_SLEEP_TIMER0_Handler;
10009cc2:	4a04      	ldr	r2, [pc, #16]	; (10009cd4 <AON_SLEEP_TIMER0_register_isr+0x1c>)
10009cc4:	687b      	ldr	r3, [r7, #4]
10009cc6:	601a      	str	r2, [r3, #0]
}
10009cc8:	46c0      	nop			; (mov r8, r8)
10009cca:	46bd      	mov	sp, r7
10009ccc:	b002      	add	sp, #8
10009cce:	bd80      	pop	{r7, pc}
10009cd0:	100000ac 	.word	0x100000ac
10009cd4:	1000a811 	.word	0x1000a811

10009cd8 <system_init>:

void system_init(void)
{
10009cd8:	b580      	push	{r7, lr}
10009cda:	af00      	add	r7, sp, #0
	init_mcu();
10009cdc:	4b07      	ldr	r3, [pc, #28]	; (10009cfc <system_init+0x24>)
10009cde:	4798      	blx	r3
	
	AON_SLEEP_TIMER0_register_isr();
10009ce0:	4b07      	ldr	r3, [pc, #28]	; (10009d00 <system_init+0x28>)
10009ce2:	4798      	blx	r3
	TIMER_0_init();
10009ce4:	4b07      	ldr	r3, [pc, #28]	; (10009d04 <system_init+0x2c>)
10009ce6:	4798      	blx	r3
	
	//WDT_0_init(); //Seems to have drastic consequences on the operation of everything
	
	//SPI0_register_isr();
	SPI_0_init();
10009ce8:	4b07      	ldr	r3, [pc, #28]	; (10009d08 <system_init+0x30>)
10009cea:	4798      	blx	r3
	
	I2C0_register_isr();
10009cec:	4b07      	ldr	r3, [pc, #28]	; (10009d0c <system_init+0x34>)
10009cee:	4798      	blx	r3
	I2C_0_init();
10009cf0:	4b07      	ldr	r3, [pc, #28]	; (10009d10 <system_init+0x38>)
10009cf2:	4798      	blx	r3
}
10009cf4:	46c0      	nop			; (mov r8, r8)
10009cf6:	46bd      	mov	sp, r7
10009cf8:	bd80      	pop	{r7, pc}
10009cfa:	46c0      	nop			; (mov r8, r8)
10009cfc:	10009b29 	.word	0x10009b29
10009d00:	10009cb9 	.word	0x10009cb9
10009d04:	10009b3d 	.word	0x10009b3d
10009d08:	10009c85 	.word	0x10009c85
10009d0c:	10009bd5 	.word	0x10009bd5
10009d10:	10009ba1 	.word	0x10009ba1

10009d14 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
10009d14:	b580      	push	{r7, lr}
10009d16:	b084      	sub	sp, #16
10009d18:	af00      	add	r7, sp, #0
10009d1a:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10009d1c:	f3ef 8310 	mrs	r3, PRIMASK
10009d20:	60fb      	str	r3, [r7, #12]
  return(result);
10009d22:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
10009d24:	687b      	ldr	r3, [r7, #4]
10009d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
10009d28:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
10009d2a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
10009d2e:	46c0      	nop			; (mov r8, r8)
10009d30:	46bd      	mov	sp, r7
10009d32:	b004      	add	sp, #16
10009d34:	bd80      	pop	{r7, pc}

10009d36 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
10009d36:	b580      	push	{r7, lr}
10009d38:	b084      	sub	sp, #16
10009d3a:	af00      	add	r7, sp, #0
10009d3c:	6078      	str	r0, [r7, #4]
10009d3e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
10009d42:	687b      	ldr	r3, [r7, #4]
10009d44:	681b      	ldr	r3, [r3, #0]
10009d46:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10009d48:	68fb      	ldr	r3, [r7, #12]
10009d4a:	f383 8810 	msr	PRIMASK, r3
}
10009d4e:	46c0      	nop			; (mov r8, r8)
10009d50:	46bd      	mov	sp, r7
10009d52:	b004      	add	sp, #16
10009d54:	bd80      	pop	{r7, pc}
	...

10009d58 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
10009d58:	b580      	push	{r7, lr}
10009d5a:	b08a      	sub	sp, #40	; 0x28
10009d5c:	af00      	add	r7, sp, #0
10009d5e:	60f8      	str	r0, [r7, #12]
10009d60:	60b9      	str	r1, [r7, #8]
10009d62:	1dbb      	adds	r3, r7, #6
10009d64:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
10009d66:	68fb      	ldr	r3, [r7, #12]
10009d68:	3b14      	subs	r3, #20
10009d6a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
10009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009d6e:	8b9a      	ldrh	r2, [r3, #28]
10009d70:	2314      	movs	r3, #20
10009d72:	18fb      	adds	r3, r7, r3
10009d74:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
10009d76:	1dbb      	adds	r3, r7, #6
10009d78:	881a      	ldrh	r2, [r3, #0]
10009d7a:	2314      	movs	r3, #20
10009d7c:	18fb      	adds	r3, r7, r3
10009d7e:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
10009d80:	2314      	movs	r3, #20
10009d82:	18fb      	adds	r3, r7, r3
10009d84:	4a0f      	ldr	r2, [pc, #60]	; (10009dc4 <i2c_m_sync_read+0x6c>)
10009d86:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
10009d88:	2314      	movs	r3, #20
10009d8a:	18fb      	adds	r3, r7, r3
10009d8c:	68ba      	ldr	r2, [r7, #8]
10009d8e:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
10009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009d92:	2214      	movs	r2, #20
10009d94:	18ba      	adds	r2, r7, r2
10009d96:	0011      	movs	r1, r2
10009d98:	0018      	movs	r0, r3
10009d9a:	4b0b      	ldr	r3, [pc, #44]	; (10009dc8 <i2c_m_sync_read+0x70>)
10009d9c:	4798      	blx	r3
10009d9e:	0003      	movs	r3, r0
10009da0:	623b      	str	r3, [r7, #32]

	return (((int32_t)n) > i2c->device.service.msg.len) ? (((int32_t)n) - i2c->device.service.msg.len) : ret;
10009da2:	1dbb      	adds	r3, r7, #6
10009da4:	881a      	ldrh	r2, [r3, #0]
10009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009da8:	685b      	ldr	r3, [r3, #4]
10009daa:	429a      	cmp	r2, r3
10009dac:	dd05      	ble.n	10009dba <i2c_m_sync_read+0x62>
10009dae:	1dbb      	adds	r3, r7, #6
10009db0:	881a      	ldrh	r2, [r3, #0]
10009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009db4:	685b      	ldr	r3, [r3, #4]
10009db6:	1ad3      	subs	r3, r2, r3
10009db8:	e000      	b.n	10009dbc <i2c_m_sync_read+0x64>
10009dba:	6a3b      	ldr	r3, [r7, #32]
}
10009dbc:	0018      	movs	r0, r3
10009dbe:	46bd      	mov	sp, r7
10009dc0:	b00a      	add	sp, #40	; 0x28
10009dc2:	bd80      	pop	{r7, pc}
10009dc4:	ffff8001 	.word	0xffff8001
10009dc8:	1000aee5 	.word	0x1000aee5

10009dcc <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
10009dcc:	b580      	push	{r7, lr}
10009dce:	b08a      	sub	sp, #40	; 0x28
10009dd0:	af00      	add	r7, sp, #0
10009dd2:	60f8      	str	r0, [r7, #12]
10009dd4:	60b9      	str	r1, [r7, #8]
10009dd6:	1dbb      	adds	r3, r7, #6
10009dd8:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
10009dda:	68fb      	ldr	r3, [r7, #12]
10009ddc:	3b14      	subs	r3, #20
10009dde:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
10009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009de2:	8b9a      	ldrh	r2, [r3, #28]
10009de4:	2314      	movs	r3, #20
10009de6:	18fb      	adds	r3, r7, r3
10009de8:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
10009dea:	1dbb      	adds	r3, r7, #6
10009dec:	881a      	ldrh	r2, [r3, #0]
10009dee:	2314      	movs	r3, #20
10009df0:	18fb      	adds	r3, r7, r3
10009df2:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
10009df4:	2314      	movs	r3, #20
10009df6:	18fb      	adds	r3, r7, r3
10009df8:	4a0f      	ldr	r2, [pc, #60]	; (10009e38 <i2c_m_sync_write+0x6c>)
10009dfa:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
10009dfc:	2314      	movs	r3, #20
10009dfe:	18fb      	adds	r3, r7, r3
10009e00:	68ba      	ldr	r2, [r7, #8]
10009e02:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
10009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009e06:	2214      	movs	r2, #20
10009e08:	18ba      	adds	r2, r7, r2
10009e0a:	0011      	movs	r1, r2
10009e0c:	0018      	movs	r0, r3
10009e0e:	4b0b      	ldr	r3, [pc, #44]	; (10009e3c <i2c_m_sync_write+0x70>)
10009e10:	4798      	blx	r3
10009e12:	0003      	movs	r3, r0
10009e14:	623b      	str	r3, [r7, #32]

	return (((int32_t)n) > i2c->device.service.msg.len) ? (((int32_t)n) - i2c->device.service.msg.len) : ret;
10009e16:	1dbb      	adds	r3, r7, #6
10009e18:	881a      	ldrh	r2, [r3, #0]
10009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009e1c:	685b      	ldr	r3, [r3, #4]
10009e1e:	429a      	cmp	r2, r3
10009e20:	dd05      	ble.n	10009e2e <i2c_m_sync_write+0x62>
10009e22:	1dbb      	adds	r3, r7, #6
10009e24:	881a      	ldrh	r2, [r3, #0]
10009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10009e28:	685b      	ldr	r3, [r3, #4]
10009e2a:	1ad3      	subs	r3, r2, r3
10009e2c:	e000      	b.n	10009e30 <i2c_m_sync_write+0x64>
10009e2e:	6a3b      	ldr	r3, [r7, #32]
}
10009e30:	0018      	movs	r0, r3
10009e32:	46bd      	mov	sp, r7
10009e34:	b00a      	add	sp, #40	; 0x28
10009e36:	bd80      	pop	{r7, pc}
10009e38:	ffff8000 	.word	0xffff8000
10009e3c:	1000aee5 	.word	0x1000aee5

10009e40 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
10009e40:	b580      	push	{r7, lr}
10009e42:	b084      	sub	sp, #16
10009e44:	af00      	add	r7, sp, #0
10009e46:	6078      	str	r0, [r7, #4]
10009e48:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
10009e4a:	687b      	ldr	r3, [r7, #4]
10009e4c:	1e5a      	subs	r2, r3, #1
10009e4e:	4193      	sbcs	r3, r2
10009e50:	b2db      	uxtb	r3, r3
10009e52:	490e      	ldr	r1, [pc, #56]	; (10009e8c <i2c_m_sync_init+0x4c>)
10009e54:	2271      	movs	r2, #113	; 0x71
10009e56:	0018      	movs	r0, r3
10009e58:	4b0d      	ldr	r3, [pc, #52]	; (10009e90 <i2c_m_sync_init+0x50>)
10009e5a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
10009e5c:	687b      	ldr	r3, [r7, #4]
10009e5e:	683a      	ldr	r2, [r7, #0]
10009e60:	0011      	movs	r1, r2
10009e62:	0018      	movs	r0, r3
10009e64:	4b0b      	ldr	r3, [pc, #44]	; (10009e94 <i2c_m_sync_init+0x54>)
10009e66:	4798      	blx	r3
10009e68:	0003      	movs	r3, r0
10009e6a:	60fb      	str	r3, [r7, #12]
	if (init_status) {
10009e6c:	68fb      	ldr	r3, [r7, #12]
10009e6e:	2b00      	cmp	r3, #0
10009e70:	d001      	beq.n	10009e76 <i2c_m_sync_init+0x36>
		return init_status;
10009e72:	68fb      	ldr	r3, [r7, #12]
10009e74:	e006      	b.n	10009e84 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
10009e76:	687b      	ldr	r3, [r7, #4]
10009e78:	4a07      	ldr	r2, [pc, #28]	; (10009e98 <i2c_m_sync_init+0x58>)
10009e7a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
10009e7c:	687b      	ldr	r3, [r7, #4]
10009e7e:	4a07      	ldr	r2, [pc, #28]	; (10009e9c <i2c_m_sync_init+0x5c>)
10009e80:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
10009e82:	2300      	movs	r3, #0
}
10009e84:	0018      	movs	r0, r3
10009e86:	46bd      	mov	sp, r7
10009e88:	b004      	add	sp, #16
10009e8a:	bd80      	pop	{r7, pc}
10009e8c:	1000fe60 	.word	0x1000fe60
10009e90:	1000a5e1 	.word	0x1000a5e1
10009e94:	1000b0b9 	.word	0x1000b0b9
10009e98:	10009d59 	.word	0x10009d59
10009e9c:	10009dcd 	.word	0x10009dcd

10009ea0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
10009ea0:	b580      	push	{r7, lr}
10009ea2:	b082      	sub	sp, #8
10009ea4:	af00      	add	r7, sp, #0
10009ea6:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
10009ea8:	687b      	ldr	r3, [r7, #4]
10009eaa:	0018      	movs	r0, r3
10009eac:	4b03      	ldr	r3, [pc, #12]	; (10009ebc <i2c_m_sync_enable+0x1c>)
10009eae:	4798      	blx	r3
10009eb0:	0003      	movs	r3, r0
}
10009eb2:	0018      	movs	r0, r3
10009eb4:	46bd      	mov	sp, r7
10009eb6:	b002      	add	sp, #8
10009eb8:	bd80      	pop	{r7, pc}
10009eba:	46c0      	nop			; (mov r8, r8)
10009ebc:	1000ad65 	.word	0x1000ad65

10009ec0 <i2c_m_sync_cmd_read_multi>:
	return ERR_NONE;
}

//PATCHED FUNCTION
int32_t i2c_m_sync_cmd_read_multi(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *value, uint8_t len)
{
10009ec0:	b580      	push	{r7, lr}
10009ec2:	b088      	sub	sp, #32
10009ec4:	af00      	add	r7, sp, #0
10009ec6:	60f8      	str	r0, [r7, #12]
10009ec8:	0008      	movs	r0, r1
10009eca:	607a      	str	r2, [r7, #4]
10009ecc:	0019      	movs	r1, r3
10009ece:	230b      	movs	r3, #11
10009ed0:	18fb      	adds	r3, r7, r3
10009ed2:	1c02      	adds	r2, r0, #0
10009ed4:	701a      	strb	r2, [r3, #0]
10009ed6:	230a      	movs	r3, #10
10009ed8:	18fb      	adds	r3, r7, r3
10009eda:	1c0a      	adds	r2, r1, #0
10009edc:	701a      	strb	r2, [r3, #0]
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
10009ede:	68fb      	ldr	r3, [r7, #12]
10009ee0:	8b9a      	ldrh	r2, [r3, #28]
10009ee2:	2310      	movs	r3, #16
10009ee4:	18fb      	adds	r3, r7, r3
10009ee6:	801a      	strh	r2, [r3, #0]
	msg.len    = 1;
10009ee8:	2310      	movs	r3, #16
10009eea:	18fb      	adds	r3, r7, r3
10009eec:	2201      	movs	r2, #1
10009eee:	605a      	str	r2, [r3, #4]
	msg.flags  = 0;
10009ef0:	2310      	movs	r3, #16
10009ef2:	18fb      	adds	r3, r7, r3
10009ef4:	2200      	movs	r2, #0
10009ef6:	805a      	strh	r2, [r3, #2]
	msg.buffer = &reg;
10009ef8:	2310      	movs	r3, #16
10009efa:	18fb      	adds	r3, r7, r3
10009efc:	220b      	movs	r2, #11
10009efe:	18ba      	adds	r2, r7, r2
10009f00:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
10009f02:	68fb      	ldr	r3, [r7, #12]
10009f04:	2210      	movs	r2, #16
10009f06:	18ba      	adds	r2, r7, r2
10009f08:	0011      	movs	r1, r2
10009f0a:	0018      	movs	r0, r3
10009f0c:	4b14      	ldr	r3, [pc, #80]	; (10009f60 <i2c_m_sync_cmd_read_multi+0xa0>)
10009f0e:	4798      	blx	r3
10009f10:	0003      	movs	r3, r0
10009f12:	61fb      	str	r3, [r7, #28]

	if (ret != 0) {
10009f14:	69fb      	ldr	r3, [r7, #28]
10009f16:	2b00      	cmp	r3, #0
10009f18:	d001      	beq.n	10009f1e <i2c_m_sync_cmd_read_multi+0x5e>
		/* error occurred */
		return ret;
10009f1a:	69fb      	ldr	r3, [r7, #28]
10009f1c:	e01c      	b.n	10009f58 <i2c_m_sync_cmd_read_multi+0x98>
	}

	msg.len = len; //THIS LINE IS A PATCH
10009f1e:	230a      	movs	r3, #10
10009f20:	18fb      	adds	r3, r7, r3
10009f22:	781a      	ldrb	r2, [r3, #0]
10009f24:	2310      	movs	r3, #16
10009f26:	18fb      	adds	r3, r7, r3
10009f28:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
10009f2a:	2310      	movs	r3, #16
10009f2c:	18fb      	adds	r3, r7, r3
10009f2e:	4a0d      	ldr	r2, [pc, #52]	; (10009f64 <i2c_m_sync_cmd_read_multi+0xa4>)
10009f30:	805a      	strh	r2, [r3, #2]
	msg.buffer = value;
10009f32:	2310      	movs	r3, #16
10009f34:	18fb      	adds	r3, r7, r3
10009f36:	687a      	ldr	r2, [r7, #4]
10009f38:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
10009f3a:	68fb      	ldr	r3, [r7, #12]
10009f3c:	2210      	movs	r2, #16
10009f3e:	18ba      	adds	r2, r7, r2
10009f40:	0011      	movs	r1, r2
10009f42:	0018      	movs	r0, r3
10009f44:	4b06      	ldr	r3, [pc, #24]	; (10009f60 <i2c_m_sync_cmd_read_multi+0xa0>)
10009f46:	4798      	blx	r3
10009f48:	0003      	movs	r3, r0
10009f4a:	61fb      	str	r3, [r7, #28]

	if (ret != 0) {
10009f4c:	69fb      	ldr	r3, [r7, #28]
10009f4e:	2b00      	cmp	r3, #0
10009f50:	d001      	beq.n	10009f56 <i2c_m_sync_cmd_read_multi+0x96>
		/* error occurred */
		return ret;
10009f52:	69fb      	ldr	r3, [r7, #28]
10009f54:	e000      	b.n	10009f58 <i2c_m_sync_cmd_read_multi+0x98>
	}

	return ERR_NONE;
10009f56:	2300      	movs	r3, #0
}
10009f58:	0018      	movs	r0, r3
10009f5a:	46bd      	mov	sp, r7
10009f5c:	b008      	add	sp, #32
10009f5e:	bd80      	pop	{r7, pc}
10009f60:	1000aee5 	.word	0x1000aee5
10009f64:	ffff8001 	.word	0xffff8001

10009f68 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
10009f68:	b580      	push	{r7, lr}
10009f6a:	b082      	sub	sp, #8
10009f6c:	af00      	add	r7, sp, #0
10009f6e:	6078      	str	r0, [r7, #4]
10009f70:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
10009f72:	687b      	ldr	r3, [r7, #4]
10009f74:	3314      	adds	r3, #20
10009f76:	001a      	movs	r2, r3
10009f78:	683b      	ldr	r3, [r7, #0]
10009f7a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
10009f7c:	2300      	movs	r3, #0
}
10009f7e:	0018      	movs	r0, r3
10009f80:	46bd      	mov	sp, r7
10009f82:	b002      	add	sp, #8
10009f84:	bd80      	pop	{r7, pc}
	...

10009f88 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
10009f88:	b580      	push	{r7, lr}
10009f8a:	b084      	sub	sp, #16
10009f8c:	af00      	add	r7, sp, #0
10009f8e:	60f8      	str	r0, [r7, #12]
10009f90:	60b9      	str	r1, [r7, #8]
10009f92:	1dbb      	adds	r3, r7, #6
10009f94:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
10009f96:	68fb      	ldr	r3, [r7, #12]
10009f98:	2b00      	cmp	r3, #0
10009f9a:	d004      	beq.n	10009fa6 <io_write+0x1e>
10009f9c:	68bb      	ldr	r3, [r7, #8]
10009f9e:	2b00      	cmp	r3, #0
10009fa0:	d001      	beq.n	10009fa6 <io_write+0x1e>
10009fa2:	2301      	movs	r3, #1
10009fa4:	e000      	b.n	10009fa8 <io_write+0x20>
10009fa6:	2300      	movs	r3, #0
10009fa8:	1c1a      	adds	r2, r3, #0
10009faa:	2301      	movs	r3, #1
10009fac:	4013      	ands	r3, r2
10009fae:	b2db      	uxtb	r3, r3
10009fb0:	4908      	ldr	r1, [pc, #32]	; (10009fd4 <io_write+0x4c>)
10009fb2:	223e      	movs	r2, #62	; 0x3e
10009fb4:	0018      	movs	r0, r3
10009fb6:	4b08      	ldr	r3, [pc, #32]	; (10009fd8 <io_write+0x50>)
10009fb8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
10009fba:	68fb      	ldr	r3, [r7, #12]
10009fbc:	681b      	ldr	r3, [r3, #0]
10009fbe:	1dba      	adds	r2, r7, #6
10009fc0:	8812      	ldrh	r2, [r2, #0]
10009fc2:	68b9      	ldr	r1, [r7, #8]
10009fc4:	68f8      	ldr	r0, [r7, #12]
10009fc6:	4798      	blx	r3
10009fc8:	0003      	movs	r3, r0
}
10009fca:	0018      	movs	r0, r3
10009fcc:	46bd      	mov	sp, r7
10009fce:	b004      	add	sp, #16
10009fd0:	bd80      	pop	{r7, pc}
10009fd2:	46c0      	nop			; (mov r8, r8)
10009fd4:	1000fe7c 	.word	0x1000fe7c
10009fd8:	1000a5e1 	.word	0x1000a5e1

10009fdc <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
10009fdc:	b580      	push	{r7, lr}
10009fde:	b084      	sub	sp, #16
10009fe0:	af00      	add	r7, sp, #0
10009fe2:	6078      	str	r0, [r7, #4]
10009fe4:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
10009fe6:	2300      	movs	r3, #0
10009fe8:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
10009fea:	687b      	ldr	r3, [r7, #4]
10009fec:	2b00      	cmp	r3, #0
10009fee:	d004      	beq.n	10009ffa <spi_m_sync_init+0x1e>
10009ff0:	683b      	ldr	r3, [r7, #0]
10009ff2:	2b00      	cmp	r3, #0
10009ff4:	d001      	beq.n	10009ffa <spi_m_sync_init+0x1e>
10009ff6:	2301      	movs	r3, #1
10009ff8:	e000      	b.n	10009ffc <spi_m_sync_init+0x20>
10009ffa:	2300      	movs	r3, #0
10009ffc:	1c1a      	adds	r2, r3, #0
10009ffe:	2301      	movs	r3, #1
1000a000:	4013      	ands	r3, r2
1000a002:	b2db      	uxtb	r3, r3
1000a004:	4911      	ldr	r1, [pc, #68]	; (1000a04c <spi_m_sync_init+0x70>)
1000a006:	2242      	movs	r2, #66	; 0x42
1000a008:	0018      	movs	r0, r3
1000a00a:	4b11      	ldr	r3, [pc, #68]	; (1000a050 <spi_m_sync_init+0x74>)
1000a00c:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
1000a00e:	687b      	ldr	r3, [r7, #4]
1000a010:	683a      	ldr	r2, [r7, #0]
1000a012:	601a      	str	r2, [r3, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
1000a014:	687b      	ldr	r3, [r7, #4]
1000a016:	683a      	ldr	r2, [r7, #0]
1000a018:	0011      	movs	r1, r2
1000a01a:	0018      	movs	r0, r3
1000a01c:	4b0d      	ldr	r3, [pc, #52]	; (1000a054 <spi_m_sync_init+0x78>)
1000a01e:	4798      	blx	r3
1000a020:	0003      	movs	r3, r0
1000a022:	60fb      	str	r3, [r7, #12]
	if (rc < 0) {
1000a024:	68fb      	ldr	r3, [r7, #12]
1000a026:	2b00      	cmp	r3, #0
1000a028:	da01      	bge.n	1000a02e <spi_m_sync_init+0x52>
		return rc;
1000a02a:	68fb      	ldr	r3, [r7, #12]
1000a02c:	e009      	b.n	1000a042 <spi_m_sync_init+0x66>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
1000a02e:	687b      	ldr	r3, [r7, #4]
1000a030:	4a09      	ldr	r2, [pc, #36]	; (1000a058 <spi_m_sync_init+0x7c>)
1000a032:	821a      	strh	r2, [r3, #16]
	spi->io.read  = _spi_m_sync_io_read;
1000a034:	687b      	ldr	r3, [r7, #4]
1000a036:	4a09      	ldr	r2, [pc, #36]	; (1000a05c <spi_m_sync_init+0x80>)
1000a038:	60da      	str	r2, [r3, #12]
	spi->io.write = _spi_m_sync_io_write;
1000a03a:	687b      	ldr	r3, [r7, #4]
1000a03c:	4a08      	ldr	r2, [pc, #32]	; (1000a060 <spi_m_sync_init+0x84>)
1000a03e:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
1000a040:	2300      	movs	r3, #0
}
1000a042:	0018      	movs	r0, r3
1000a044:	46bd      	mov	sp, r7
1000a046:	b004      	add	sp, #16
1000a048:	bd80      	pop	{r7, pc}
1000a04a:	46c0      	nop			; (mov r8, r8)
1000a04c:	1000fe90 	.word	0x1000fe90
1000a050:	1000a5e1 	.word	0x1000a5e1
1000a054:	1000b49d 	.word	0x1000b49d
1000a058:	ffff8000 	.word	0xffff8000
1000a05c:	1000a09d 	.word	0x1000a09d
1000a060:	1000a101 	.word	0x1000a101

1000a064 <spi_m_sync_enable>:

	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
1000a064:	b580      	push	{r7, lr}
1000a066:	b082      	sub	sp, #8
1000a068:	af00      	add	r7, sp, #0
1000a06a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
1000a06c:	687b      	ldr	r3, [r7, #4]
1000a06e:	1e5a      	subs	r2, r3, #1
1000a070:	4193      	sbcs	r3, r2
1000a072:	b2db      	uxtb	r3, r3
1000a074:	4906      	ldr	r1, [pc, #24]	; (1000a090 <spi_m_sync_enable+0x2c>)
1000a076:	225b      	movs	r2, #91	; 0x5b
1000a078:	0018      	movs	r0, r3
1000a07a:	4b06      	ldr	r3, [pc, #24]	; (1000a094 <spi_m_sync_enable+0x30>)
1000a07c:	4798      	blx	r3

	_spi_m_sync_enable(&spi->dev);
1000a07e:	687b      	ldr	r3, [r7, #4]
1000a080:	0018      	movs	r0, r3
1000a082:	4b05      	ldr	r3, [pc, #20]	; (1000a098 <spi_m_sync_enable+0x34>)
1000a084:	4798      	blx	r3
}
1000a086:	46c0      	nop			; (mov r8, r8)
1000a088:	46bd      	mov	sp, r7
1000a08a:	b002      	add	sp, #8
1000a08c:	bd80      	pop	{r7, pc}
1000a08e:	46c0      	nop			; (mov r8, r8)
1000a090:	1000fe90 	.word	0x1000fe90
1000a094:	1000a5e1 	.word	0x1000a5e1
1000a098:	1000b5a5 	.word	0x1000b5a5

1000a09c <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
1000a09c:	b580      	push	{r7, lr}
1000a09e:	b088      	sub	sp, #32
1000a0a0:	af00      	add	r7, sp, #0
1000a0a2:	60f8      	str	r0, [r7, #12]
1000a0a4:	60b9      	str	r1, [r7, #8]
1000a0a6:	1dbb      	adds	r3, r7, #6
1000a0a8:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
1000a0aa:	68fb      	ldr	r3, [r7, #12]
1000a0ac:	1e5a      	subs	r2, r3, #1
1000a0ae:	4193      	sbcs	r3, r2
1000a0b0:	b2db      	uxtb	r3, r3
1000a0b2:	4910      	ldr	r1, [pc, #64]	; (1000a0f4 <_spi_m_sync_io_read+0x58>)
1000a0b4:	2291      	movs	r2, #145	; 0x91
1000a0b6:	0018      	movs	r0, r3
1000a0b8:	4b0f      	ldr	r3, [pc, #60]	; (1000a0f8 <_spi_m_sync_io_read+0x5c>)
1000a0ba:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
1000a0bc:	68fb      	ldr	r3, [r7, #12]
1000a0be:	3b08      	subs	r3, #8
1000a0c0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
1000a0c2:	2310      	movs	r3, #16
1000a0c4:	18fb      	adds	r3, r7, r3
1000a0c6:	68ba      	ldr	r2, [r7, #8]
1000a0c8:	605a      	str	r2, [r3, #4]
	xfer.txbuf = 0;
1000a0ca:	2310      	movs	r3, #16
1000a0cc:	18fb      	adds	r3, r7, r3
1000a0ce:	2200      	movs	r2, #0
1000a0d0:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
1000a0d2:	1dbb      	adds	r3, r7, #6
1000a0d4:	881a      	ldrh	r2, [r3, #0]
1000a0d6:	2310      	movs	r3, #16
1000a0d8:	18fb      	adds	r3, r7, r3
1000a0da:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
1000a0dc:	2310      	movs	r3, #16
1000a0de:	18fa      	adds	r2, r7, r3
1000a0e0:	69fb      	ldr	r3, [r7, #28]
1000a0e2:	0011      	movs	r1, r2
1000a0e4:	0018      	movs	r0, r3
1000a0e6:	4b05      	ldr	r3, [pc, #20]	; (1000a0fc <_spi_m_sync_io_read+0x60>)
1000a0e8:	4798      	blx	r3
1000a0ea:	0003      	movs	r3, r0
}
1000a0ec:	0018      	movs	r0, r3
1000a0ee:	46bd      	mov	sp, r7
1000a0f0:	b008      	add	sp, #32
1000a0f2:	bd80      	pop	{r7, pc}
1000a0f4:	1000fe90 	.word	0x1000fe90
1000a0f8:	1000a5e1 	.word	0x1000a5e1
1000a0fc:	1000a165 	.word	0x1000a165

1000a100 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
1000a100:	b580      	push	{r7, lr}
1000a102:	b088      	sub	sp, #32
1000a104:	af00      	add	r7, sp, #0
1000a106:	60f8      	str	r0, [r7, #12]
1000a108:	60b9      	str	r1, [r7, #8]
1000a10a:	1dbb      	adds	r3, r7, #6
1000a10c:	801a      	strh	r2, [r3, #0]
	ASSERT(io);
1000a10e:	68fb      	ldr	r3, [r7, #12]
1000a110:	1e5a      	subs	r2, r3, #1
1000a112:	4193      	sbcs	r3, r2
1000a114:	b2db      	uxtb	r3, r3
1000a116:	4910      	ldr	r1, [pc, #64]	; (1000a158 <_spi_m_sync_io_write+0x58>)
1000a118:	22ad      	movs	r2, #173	; 0xad
1000a11a:	0018      	movs	r0, r3
1000a11c:	4b0f      	ldr	r3, [pc, #60]	; (1000a15c <_spi_m_sync_io_write+0x5c>)
1000a11e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
1000a120:	68fb      	ldr	r3, [r7, #12]
1000a122:	3b08      	subs	r3, #8
1000a124:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
1000a126:	2310      	movs	r3, #16
1000a128:	18fb      	adds	r3, r7, r3
1000a12a:	2200      	movs	r2, #0
1000a12c:	605a      	str	r2, [r3, #4]
	xfer.txbuf = (uint8_t *)buf;
1000a12e:	2310      	movs	r3, #16
1000a130:	18fb      	adds	r3, r7, r3
1000a132:	68ba      	ldr	r2, [r7, #8]
1000a134:	601a      	str	r2, [r3, #0]
	xfer.size  = length;
1000a136:	1dbb      	adds	r3, r7, #6
1000a138:	881a      	ldrh	r2, [r3, #0]
1000a13a:	2310      	movs	r3, #16
1000a13c:	18fb      	adds	r3, r7, r3
1000a13e:	609a      	str	r2, [r3, #8]

	return spi_m_sync_transfer(spi, &xfer);
1000a140:	2310      	movs	r3, #16
1000a142:	18fa      	adds	r2, r7, r3
1000a144:	69fb      	ldr	r3, [r7, #28]
1000a146:	0011      	movs	r1, r2
1000a148:	0018      	movs	r0, r3
1000a14a:	4b05      	ldr	r3, [pc, #20]	; (1000a160 <_spi_m_sync_io_write+0x60>)
1000a14c:	4798      	blx	r3
1000a14e:	0003      	movs	r3, r0
}
1000a150:	0018      	movs	r0, r3
1000a152:	46bd      	mov	sp, r7
1000a154:	b008      	add	sp, #32
1000a156:	bd80      	pop	{r7, pc}
1000a158:	1000fe90 	.word	0x1000fe90
1000a15c:	1000a5e1 	.word	0x1000a5e1
1000a160:	1000a165 	.word	0x1000a165

1000a164 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
1000a164:	b580      	push	{r7, lr}
1000a166:	b086      	sub	sp, #24
1000a168:	af00      	add	r7, sp, #0
1000a16a:	6078      	str	r0, [r7, #4]
1000a16c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
1000a16e:	687b      	ldr	r3, [r7, #4]
1000a170:	2b00      	cmp	r3, #0
1000a172:	d004      	beq.n	1000a17e <spi_m_sync_transfer+0x1a>
1000a174:	683b      	ldr	r3, [r7, #0]
1000a176:	2b00      	cmp	r3, #0
1000a178:	d001      	beq.n	1000a17e <spi_m_sync_transfer+0x1a>
1000a17a:	2301      	movs	r3, #1
1000a17c:	e000      	b.n	1000a180 <spi_m_sync_transfer+0x1c>
1000a17e:	2300      	movs	r3, #0
1000a180:	1c1a      	adds	r2, r3, #0
1000a182:	2301      	movs	r3, #1
1000a184:	4013      	ands	r3, r2
1000a186:	b2db      	uxtb	r3, r3
1000a188:	490f      	ldr	r1, [pc, #60]	; (1000a1c8 <spi_m_sync_transfer+0x64>)
1000a18a:	22bd      	movs	r2, #189	; 0xbd
1000a18c:	0018      	movs	r0, r3
1000a18e:	4b0f      	ldr	r3, [pc, #60]	; (1000a1cc <spi_m_sync_transfer+0x68>)
1000a190:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
1000a192:	683b      	ldr	r3, [r7, #0]
1000a194:	681a      	ldr	r2, [r3, #0]
1000a196:	230c      	movs	r3, #12
1000a198:	18fb      	adds	r3, r7, r3
1000a19a:	601a      	str	r2, [r3, #0]
	msg.rxbuf = p_xfer->rxbuf;
1000a19c:	683b      	ldr	r3, [r7, #0]
1000a19e:	685a      	ldr	r2, [r3, #4]
1000a1a0:	230c      	movs	r3, #12
1000a1a2:	18fb      	adds	r3, r7, r3
1000a1a4:	605a      	str	r2, [r3, #4]
	msg.size  = p_xfer->size;
1000a1a6:	683b      	ldr	r3, [r7, #0]
1000a1a8:	689a      	ldr	r2, [r3, #8]
1000a1aa:	230c      	movs	r3, #12
1000a1ac:	18fb      	adds	r3, r7, r3
1000a1ae:	609a      	str	r2, [r3, #8]

	return _spi_m_sync_trans(&spi->dev, &msg);
1000a1b0:	687b      	ldr	r3, [r7, #4]
1000a1b2:	220c      	movs	r2, #12
1000a1b4:	18ba      	adds	r2, r7, r2
1000a1b6:	0011      	movs	r1, r2
1000a1b8:	0018      	movs	r0, r3
1000a1ba:	4b05      	ldr	r3, [pc, #20]	; (1000a1d0 <spi_m_sync_transfer+0x6c>)
1000a1bc:	4798      	blx	r3
1000a1be:	0003      	movs	r3, r0
}
1000a1c0:	0018      	movs	r0, r3
1000a1c2:	46bd      	mov	sp, r7
1000a1c4:	b006      	add	sp, #24
1000a1c6:	bd80      	pop	{r7, pc}
1000a1c8:	1000fe90 	.word	0x1000fe90
1000a1cc:	1000a5e1 	.word	0x1000a5e1
1000a1d0:	1000b665 	.word	0x1000b665

1000a1d4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
1000a1d4:	b580      	push	{r7, lr}
1000a1d6:	b082      	sub	sp, #8
1000a1d8:	af00      	add	r7, sp, #0
1000a1da:	6078      	str	r0, [r7, #4]
1000a1dc:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
1000a1de:	687b      	ldr	r3, [r7, #4]
1000a1e0:	2b00      	cmp	r3, #0
1000a1e2:	d004      	beq.n	1000a1ee <spi_m_sync_get_io_descriptor+0x1a>
1000a1e4:	683b      	ldr	r3, [r7, #0]
1000a1e6:	2b00      	cmp	r3, #0
1000a1e8:	d001      	beq.n	1000a1ee <spi_m_sync_get_io_descriptor+0x1a>
1000a1ea:	2301      	movs	r3, #1
1000a1ec:	e000      	b.n	1000a1f0 <spi_m_sync_get_io_descriptor+0x1c>
1000a1ee:	2300      	movs	r3, #0
1000a1f0:	1c1a      	adds	r2, r3, #0
1000a1f2:	2301      	movs	r3, #1
1000a1f4:	4013      	ands	r3, r2
1000a1f6:	b2db      	uxtb	r3, r3
1000a1f8:	4907      	ldr	r1, [pc, #28]	; (1000a218 <spi_m_sync_get_io_descriptor+0x44>)
1000a1fa:	22c8      	movs	r2, #200	; 0xc8
1000a1fc:	0018      	movs	r0, r3
1000a1fe:	4b07      	ldr	r3, [pc, #28]	; (1000a21c <spi_m_sync_get_io_descriptor+0x48>)
1000a200:	4798      	blx	r3
	*io = &spi->io;
1000a202:	687b      	ldr	r3, [r7, #4]
1000a204:	3308      	adds	r3, #8
1000a206:	001a      	movs	r2, r3
1000a208:	683b      	ldr	r3, [r7, #0]
1000a20a:	601a      	str	r2, [r3, #0]
	return 0;
1000a20c:	2300      	movs	r3, #0
}
1000a20e:	0018      	movs	r0, r3
1000a210:	46bd      	mov	sp, r7
1000a212:	b002      	add	sp, #8
1000a214:	bd80      	pop	{r7, pc}
1000a216:	46c0      	nop			; (mov r8, r8)
1000a218:	1000fe90 	.word	0x1000fe90
1000a21c:	1000a5e1 	.word	0x1000a5e1

1000a220 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
1000a220:	b580      	push	{r7, lr}
1000a222:	b082      	sub	sp, #8
1000a224:	af00      	add	r7, sp, #0
1000a226:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
1000a228:	687b      	ldr	r3, [r7, #4]
1000a22a:	681b      	ldr	r3, [r3, #0]
}
1000a22c:	0018      	movs	r0, r3
1000a22e:	46bd      	mov	sp, r7
1000a230:	b002      	add	sp, #8
1000a232:	bd80      	pop	{r7, pc}

1000a234 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
1000a234:	b580      	push	{r7, lr}
1000a236:	b082      	sub	sp, #8
1000a238:	af00      	add	r7, sp, #0
1000a23a:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
1000a23c:	687b      	ldr	r3, [r7, #4]
1000a23e:	2b00      	cmp	r3, #0
1000a240:	d002      	beq.n	1000a248 <list_get_next_element+0x14>
1000a242:	687b      	ldr	r3, [r7, #4]
1000a244:	681b      	ldr	r3, [r3, #0]
1000a246:	e000      	b.n	1000a24a <list_get_next_element+0x16>
1000a248:	2300      	movs	r3, #0
}
1000a24a:	0018      	movs	r0, r3
1000a24c:	46bd      	mov	sp, r7
1000a24e:	b002      	add	sp, #8
1000a250:	bd80      	pop	{r7, pc}
	...

1000a254 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
1000a254:	b580      	push	{r7, lr}
1000a256:	b084      	sub	sp, #16
1000a258:	af00      	add	r7, sp, #0
1000a25a:	60f8      	str	r0, [r7, #12]
1000a25c:	60b9      	str	r1, [r7, #8]
1000a25e:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
1000a260:	68fb      	ldr	r3, [r7, #12]
1000a262:	2b00      	cmp	r3, #0
1000a264:	d004      	beq.n	1000a270 <timer_init+0x1c>
1000a266:	68bb      	ldr	r3, [r7, #8]
1000a268:	2b00      	cmp	r3, #0
1000a26a:	d001      	beq.n	1000a270 <timer_init+0x1c>
1000a26c:	2301      	movs	r3, #1
1000a26e:	e000      	b.n	1000a272 <timer_init+0x1e>
1000a270:	2300      	movs	r3, #0
1000a272:	1c1a      	adds	r2, r3, #0
1000a274:	2301      	movs	r3, #1
1000a276:	4013      	ands	r3, r2
1000a278:	b2db      	uxtb	r3, r3
1000a27a:	490b      	ldr	r1, [pc, #44]	; (1000a2a8 <timer_init+0x54>)
1000a27c:	2245      	movs	r2, #69	; 0x45
1000a27e:	0018      	movs	r0, r3
1000a280:	4b0a      	ldr	r3, [pc, #40]	; (1000a2ac <timer_init+0x58>)
1000a282:	4798      	blx	r3
	_timer_init(&descr->device, hw);
1000a284:	68fb      	ldr	r3, [r7, #12]
1000a286:	68ba      	ldr	r2, [r7, #8]
1000a288:	0011      	movs	r1, r2
1000a28a:	0018      	movs	r0, r3
1000a28c:	4b08      	ldr	r3, [pc, #32]	; (1000a2b0 <timer_init+0x5c>)
1000a28e:	4798      	blx	r3
	descr->time                           = 0;
1000a290:	68fb      	ldr	r3, [r7, #12]
1000a292:	2200      	movs	r2, #0
1000a294:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
1000a296:	68fb      	ldr	r3, [r7, #12]
1000a298:	4a06      	ldr	r2, [pc, #24]	; (1000a2b4 <timer_init+0x60>)
1000a29a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
1000a29c:	2300      	movs	r3, #0
}
1000a29e:	0018      	movs	r0, r3
1000a2a0:	46bd      	mov	sp, r7
1000a2a2:	b004      	add	sp, #16
1000a2a4:	bd80      	pop	{r7, pc}
1000a2a6:	46c0      	nop			; (mov r8, r8)
1000a2a8:	1000feac 	.word	0x1000feac
1000a2ac:	1000a5e1 	.word	0x1000a5e1
1000a2b0:	1000a851 	.word	0x1000a851
1000a2b4:	1000a51d 	.word	0x1000a51d

1000a2b8 <timer_start>:

/**
 * \brief Start timer
 */
int32_t timer_start(struct timer_descriptor *const descr)
{
1000a2b8:	b580      	push	{r7, lr}
1000a2ba:	b082      	sub	sp, #8
1000a2bc:	af00      	add	r7, sp, #0
1000a2be:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
1000a2c0:	687b      	ldr	r3, [r7, #4]
1000a2c2:	1e5a      	subs	r2, r3, #1
1000a2c4:	4193      	sbcs	r3, r2
1000a2c6:	b2db      	uxtb	r3, r3
1000a2c8:	490b      	ldr	r1, [pc, #44]	; (1000a2f8 <timer_start+0x40>)
1000a2ca:	225d      	movs	r2, #93	; 0x5d
1000a2cc:	0018      	movs	r0, r3
1000a2ce:	4b0b      	ldr	r3, [pc, #44]	; (1000a2fc <timer_start+0x44>)
1000a2d0:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
1000a2d2:	687b      	ldr	r3, [r7, #4]
1000a2d4:	0018      	movs	r0, r3
1000a2d6:	4b0a      	ldr	r3, [pc, #40]	; (1000a300 <timer_start+0x48>)
1000a2d8:	4798      	blx	r3
1000a2da:	1e03      	subs	r3, r0, #0
1000a2dc:	d002      	beq.n	1000a2e4 <timer_start+0x2c>
		return ERR_DENIED;
1000a2de:	2311      	movs	r3, #17
1000a2e0:	425b      	negs	r3, r3
1000a2e2:	e004      	b.n	1000a2ee <timer_start+0x36>
	}
	_timer_start(&descr->device);
1000a2e4:	687b      	ldr	r3, [r7, #4]
1000a2e6:	0018      	movs	r0, r3
1000a2e8:	4b06      	ldr	r3, [pc, #24]	; (1000a304 <timer_start+0x4c>)
1000a2ea:	4798      	blx	r3

	return ERR_NONE;
1000a2ec:	2300      	movs	r3, #0
}
1000a2ee:	0018      	movs	r0, r3
1000a2f0:	46bd      	mov	sp, r7
1000a2f2:	b002      	add	sp, #8
1000a2f4:	bd80      	pop	{r7, pc}
1000a2f6:	46c0      	nop			; (mov r8, r8)
1000a2f8:	1000feac 	.word	0x1000feac
1000a2fc:	1000a5e1 	.word	0x1000a5e1
1000a300:	1000a971 	.word	0x1000a971
1000a304:	1000a8d5 	.word	0x1000a8d5

1000a308 <timer_add_task>:

/**
 * \brief Add timer task
 */
int32_t timer_add_task(struct timer_descriptor *const descr, struct timer_task *const task)
{
1000a308:	b580      	push	{r7, lr}
1000a30a:	b084      	sub	sp, #16
1000a30c:	af00      	add	r7, sp, #0
1000a30e:	6078      	str	r0, [r7, #4]
1000a310:	6039      	str	r1, [r7, #0]
	ASSERT(descr && task);
1000a312:	687b      	ldr	r3, [r7, #4]
1000a314:	2b00      	cmp	r3, #0
1000a316:	d004      	beq.n	1000a322 <timer_add_task+0x1a>
1000a318:	683b      	ldr	r3, [r7, #0]
1000a31a:	2b00      	cmp	r3, #0
1000a31c:	d001      	beq.n	1000a322 <timer_add_task+0x1a>
1000a31e:	2301      	movs	r3, #1
1000a320:	e000      	b.n	1000a324 <timer_add_task+0x1c>
1000a322:	2300      	movs	r3, #0
1000a324:	1c1a      	adds	r2, r3, #0
1000a326:	2301      	movs	r3, #1
1000a328:	4013      	ands	r3, r2
1000a32a:	b2db      	uxtb	r3, r3
1000a32c:	492e      	ldr	r1, [pc, #184]	; (1000a3e8 <timer_add_task+0xe0>)
1000a32e:	2284      	movs	r2, #132	; 0x84
1000a330:	0018      	movs	r0, r3
1000a332:	4b2e      	ldr	r3, [pc, #184]	; (1000a3ec <timer_add_task+0xe4>)
1000a334:	4798      	blx	r3

	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
1000a336:	687b      	ldr	r3, [r7, #4]
1000a338:	7e1b      	ldrb	r3, [r3, #24]
1000a33a:	b2db      	uxtb	r3, r3
1000a33c:	2201      	movs	r2, #1
1000a33e:	4313      	orrs	r3, r2
1000a340:	b2da      	uxtb	r2, r3
1000a342:	687b      	ldr	r3, [r7, #4]
1000a344:	761a      	strb	r2, [r3, #24]
	if (is_list_element(&descr->tasks, task)) {
1000a346:	687b      	ldr	r3, [r7, #4]
1000a348:	3314      	adds	r3, #20
1000a34a:	683a      	ldr	r2, [r7, #0]
1000a34c:	0011      	movs	r1, r2
1000a34e:	0018      	movs	r0, r3
1000a350:	4b27      	ldr	r3, [pc, #156]	; (1000a3f0 <timer_add_task+0xe8>)
1000a352:	4798      	blx	r3
1000a354:	1e03      	subs	r3, r0, #0
1000a356:	d010      	beq.n	1000a37a <timer_add_task+0x72>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
1000a358:	687b      	ldr	r3, [r7, #4]
1000a35a:	7e1b      	ldrb	r3, [r3, #24]
1000a35c:	b2db      	uxtb	r3, r3
1000a35e:	2201      	movs	r2, #1
1000a360:	4393      	bics	r3, r2
1000a362:	b2da      	uxtb	r2, r3
1000a364:	687b      	ldr	r3, [r7, #4]
1000a366:	761a      	strb	r2, [r3, #24]
		ASSERT(false);
1000a368:	4b1f      	ldr	r3, [pc, #124]	; (1000a3e8 <timer_add_task+0xe0>)
1000a36a:	2289      	movs	r2, #137	; 0x89
1000a36c:	0019      	movs	r1, r3
1000a36e:	2000      	movs	r0, #0
1000a370:	4b1e      	ldr	r3, [pc, #120]	; (1000a3ec <timer_add_task+0xe4>)
1000a372:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
1000a374:	2312      	movs	r3, #18
1000a376:	425b      	negs	r3, r3
1000a378:	e032      	b.n	1000a3e0 <timer_add_task+0xd8>
	}
	task->time_label = descr->time;
1000a37a:	687b      	ldr	r3, [r7, #4]
1000a37c:	691a      	ldr	r2, [r3, #16]
1000a37e:	683b      	ldr	r3, [r7, #0]
1000a380:	605a      	str	r2, [r3, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
1000a382:	687b      	ldr	r3, [r7, #4]
1000a384:	3314      	adds	r3, #20
1000a386:	0018      	movs	r0, r3
1000a388:	687b      	ldr	r3, [r7, #4]
1000a38a:	691a      	ldr	r2, [r3, #16]
1000a38c:	683b      	ldr	r3, [r7, #0]
1000a38e:	0019      	movs	r1, r3
1000a390:	4b18      	ldr	r3, [pc, #96]	; (1000a3f4 <timer_add_task+0xec>)
1000a392:	4798      	blx	r3

	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
1000a394:	687b      	ldr	r3, [r7, #4]
1000a396:	7e1b      	ldrb	r3, [r3, #24]
1000a398:	b2db      	uxtb	r3, r3
1000a39a:	2201      	movs	r2, #1
1000a39c:	4393      	bics	r3, r2
1000a39e:	b2da      	uxtb	r2, r3
1000a3a0:	687b      	ldr	r3, [r7, #4]
1000a3a2:	761a      	strb	r2, [r3, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
1000a3a4:	687b      	ldr	r3, [r7, #4]
1000a3a6:	7e1b      	ldrb	r3, [r3, #24]
1000a3a8:	b2db      	uxtb	r3, r3
1000a3aa:	001a      	movs	r2, r3
1000a3ac:	2302      	movs	r3, #2
1000a3ae:	4013      	ands	r3, r2
1000a3b0:	d015      	beq.n	1000a3de <timer_add_task+0xd6>
		CRITICAL_SECTION_ENTER()
1000a3b2:	230c      	movs	r3, #12
1000a3b4:	18fb      	adds	r3, r7, r3
1000a3b6:	0018      	movs	r0, r3
1000a3b8:	4b0f      	ldr	r3, [pc, #60]	; (1000a3f8 <timer_add_task+0xf0>)
1000a3ba:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
1000a3bc:	687b      	ldr	r3, [r7, #4]
1000a3be:	7e1b      	ldrb	r3, [r3, #24]
1000a3c0:	b2db      	uxtb	r3, r3
1000a3c2:	2202      	movs	r2, #2
1000a3c4:	4393      	bics	r3, r2
1000a3c6:	b2da      	uxtb	r2, r3
1000a3c8:	687b      	ldr	r3, [r7, #4]
1000a3ca:	761a      	strb	r2, [r3, #24]
		_timer_set_irq(&descr->device);
1000a3cc:	687b      	ldr	r3, [r7, #4]
1000a3ce:	0018      	movs	r0, r3
1000a3d0:	4b0a      	ldr	r3, [pc, #40]	; (1000a3fc <timer_add_task+0xf4>)
1000a3d2:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
1000a3d4:	230c      	movs	r3, #12
1000a3d6:	18fb      	adds	r3, r7, r3
1000a3d8:	0018      	movs	r0, r3
1000a3da:	4b09      	ldr	r3, [pc, #36]	; (1000a400 <timer_add_task+0xf8>)
1000a3dc:	4798      	blx	r3
	}

	return ERR_NONE;
1000a3de:	2300      	movs	r3, #0
}
1000a3e0:	0018      	movs	r0, r3
1000a3e2:	46bd      	mov	sp, r7
1000a3e4:	b004      	add	sp, #16
1000a3e6:	bd80      	pop	{r7, pc}
1000a3e8:	1000feac 	.word	0x1000feac
1000a3ec:	1000a5e1 	.word	0x1000a5e1
1000a3f0:	1000a60d 	.word	0x1000a60d
1000a3f4:	1000a459 	.word	0x1000a459
1000a3f8:	10009d15 	.word	0x10009d15
1000a3fc:	1000a9c1 	.word	0x1000a9c1
1000a400:	10009d37 	.word	0x10009d37

1000a404 <timer_get_clock_cycles_in_tick>:

/**
 * \brief Retrieve the amount of clock cycles in a tick
 */
int32_t timer_get_clock_cycles_in_tick(const struct timer_descriptor *const descr, uint32_t *const cycles)
{
1000a404:	b580      	push	{r7, lr}
1000a406:	b082      	sub	sp, #8
1000a408:	af00      	add	r7, sp, #0
1000a40a:	6078      	str	r0, [r7, #4]
1000a40c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && cycles);
1000a40e:	687b      	ldr	r3, [r7, #4]
1000a410:	2b00      	cmp	r3, #0
1000a412:	d004      	beq.n	1000a41e <timer_get_clock_cycles_in_tick+0x1a>
1000a414:	683b      	ldr	r3, [r7, #0]
1000a416:	2b00      	cmp	r3, #0
1000a418:	d001      	beq.n	1000a41e <timer_get_clock_cycles_in_tick+0x1a>
1000a41a:	2301      	movs	r3, #1
1000a41c:	e000      	b.n	1000a420 <timer_get_clock_cycles_in_tick+0x1c>
1000a41e:	2300      	movs	r3, #0
1000a420:	1c1a      	adds	r2, r3, #0
1000a422:	2301      	movs	r3, #1
1000a424:	4013      	ands	r3, r2
1000a426:	b2db      	uxtb	r3, r3
1000a428:	4908      	ldr	r1, [pc, #32]	; (1000a44c <timer_get_clock_cycles_in_tick+0x48>)
1000a42a:	22b9      	movs	r2, #185	; 0xb9
1000a42c:	0018      	movs	r0, r3
1000a42e:	4b08      	ldr	r3, [pc, #32]	; (1000a450 <timer_get_clock_cycles_in_tick+0x4c>)
1000a430:	4798      	blx	r3
	*cycles = _timer_get_period(&descr->device);
1000a432:	687b      	ldr	r3, [r7, #4]
1000a434:	0018      	movs	r0, r3
1000a436:	4b07      	ldr	r3, [pc, #28]	; (1000a454 <timer_get_clock_cycles_in_tick+0x50>)
1000a438:	4798      	blx	r3
1000a43a:	0002      	movs	r2, r0
1000a43c:	683b      	ldr	r3, [r7, #0]
1000a43e:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
1000a440:	2300      	movs	r3, #0
}
1000a442:	0018      	movs	r0, r3
1000a444:	46bd      	mov	sp, r7
1000a446:	b002      	add	sp, #8
1000a448:	bd80      	pop	{r7, pc}
1000a44a:	46c0      	nop			; (mov r8, r8)
1000a44c:	1000feac 	.word	0x1000feac
1000a450:	1000a5e1 	.word	0x1000a5e1
1000a454:	1000a921 	.word	0x1000a921

1000a458 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
1000a458:	b580      	push	{r7, lr}
1000a45a:	b088      	sub	sp, #32
1000a45c:	af00      	add	r7, sp, #0
1000a45e:	60f8      	str	r0, [r7, #12]
1000a460:	60b9      	str	r1, [r7, #8]
1000a462:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
1000a464:	2300      	movs	r3, #0
1000a466:	61bb      	str	r3, [r7, #24]
1000a468:	68fb      	ldr	r3, [r7, #12]
1000a46a:	0018      	movs	r0, r3
1000a46c:	4b27      	ldr	r3, [pc, #156]	; (1000a50c <timer_add_timer_task+0xb4>)
1000a46e:	4798      	blx	r3
1000a470:	0003      	movs	r3, r0
1000a472:	613b      	str	r3, [r7, #16]

	if (!head) {
1000a474:	693b      	ldr	r3, [r7, #16]
1000a476:	2b00      	cmp	r3, #0
1000a478:	d106      	bne.n	1000a488 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
1000a47a:	68ba      	ldr	r2, [r7, #8]
1000a47c:	68fb      	ldr	r3, [r7, #12]
1000a47e:	0011      	movs	r1, r2
1000a480:	0018      	movs	r0, r3
1000a482:	4b23      	ldr	r3, [pc, #140]	; (1000a510 <timer_add_timer_task+0xb8>)
1000a484:	4798      	blx	r3
		return;
1000a486:	e03d      	b.n	1000a504 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
1000a488:	693b      	ldr	r3, [r7, #16]
1000a48a:	61fb      	str	r3, [r7, #28]
1000a48c:	e024      	b.n	1000a4d8 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
1000a48e:	69fb      	ldr	r3, [r7, #28]
1000a490:	685a      	ldr	r2, [r3, #4]
1000a492:	687b      	ldr	r3, [r7, #4]
1000a494:	429a      	cmp	r2, r3
1000a496:	d808      	bhi.n	1000a4aa <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
1000a498:	69fb      	ldr	r3, [r7, #28]
1000a49a:	689a      	ldr	r2, [r3, #8]
1000a49c:	69fb      	ldr	r3, [r7, #28]
1000a49e:	6859      	ldr	r1, [r3, #4]
1000a4a0:	687b      	ldr	r3, [r7, #4]
1000a4a2:	1acb      	subs	r3, r1, r3
1000a4a4:	18d3      	adds	r3, r2, r3
1000a4a6:	617b      	str	r3, [r7, #20]
1000a4a8:	e009      	b.n	1000a4be <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
1000a4aa:	69fb      	ldr	r3, [r7, #28]
1000a4ac:	689a      	ldr	r2, [r3, #8]
1000a4ae:	69fb      	ldr	r3, [r7, #28]
1000a4b0:	685b      	ldr	r3, [r3, #4]
1000a4b2:	18d2      	adds	r2, r2, r3
1000a4b4:	687b      	ldr	r3, [r7, #4]
1000a4b6:	425b      	negs	r3, r3
1000a4b8:	18d3      	adds	r3, r2, r3
1000a4ba:	3301      	adds	r3, #1
1000a4bc:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
1000a4be:	68bb      	ldr	r3, [r7, #8]
1000a4c0:	689a      	ldr	r2, [r3, #8]
1000a4c2:	697b      	ldr	r3, [r7, #20]
1000a4c4:	429a      	cmp	r2, r3
1000a4c6:	d90b      	bls.n	1000a4e0 <timer_add_timer_task+0x88>
			break;
		prev = it;
1000a4c8:	69fb      	ldr	r3, [r7, #28]
1000a4ca:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
1000a4cc:	69fb      	ldr	r3, [r7, #28]
1000a4ce:	0018      	movs	r0, r3
1000a4d0:	4b10      	ldr	r3, [pc, #64]	; (1000a514 <timer_add_timer_task+0xbc>)
1000a4d2:	4798      	blx	r3
1000a4d4:	0003      	movs	r3, r0
1000a4d6:	61fb      	str	r3, [r7, #28]
1000a4d8:	69fb      	ldr	r3, [r7, #28]
1000a4da:	2b00      	cmp	r3, #0
1000a4dc:	d1d7      	bne.n	1000a48e <timer_add_timer_task+0x36>
1000a4de:	e000      	b.n	1000a4e2 <timer_add_timer_task+0x8a>
			break;
1000a4e0:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
1000a4e2:	69fa      	ldr	r2, [r7, #28]
1000a4e4:	693b      	ldr	r3, [r7, #16]
1000a4e6:	429a      	cmp	r2, r3
1000a4e8:	d106      	bne.n	1000a4f8 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
1000a4ea:	68ba      	ldr	r2, [r7, #8]
1000a4ec:	68fb      	ldr	r3, [r7, #12]
1000a4ee:	0011      	movs	r1, r2
1000a4f0:	0018      	movs	r0, r3
1000a4f2:	4b07      	ldr	r3, [pc, #28]	; (1000a510 <timer_add_timer_task+0xb8>)
1000a4f4:	4798      	blx	r3
1000a4f6:	e005      	b.n	1000a504 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
1000a4f8:	68ba      	ldr	r2, [r7, #8]
1000a4fa:	69bb      	ldr	r3, [r7, #24]
1000a4fc:	0011      	movs	r1, r2
1000a4fe:	0018      	movs	r0, r3
1000a500:	4b05      	ldr	r3, [pc, #20]	; (1000a518 <timer_add_timer_task+0xc0>)
1000a502:	4798      	blx	r3
	}
}
1000a504:	46bd      	mov	sp, r7
1000a506:	b008      	add	sp, #32
1000a508:	bd80      	pop	{r7, pc}
1000a50a:	46c0      	nop			; (mov r8, r8)
1000a50c:	1000a221 	.word	0x1000a221
1000a510:	1000a641 	.word	0x1000a641
1000a514:	1000a235 	.word	0x1000a235
1000a518:	1000a699 	.word	0x1000a699

1000a51c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
1000a51c:	b580      	push	{r7, lr}
1000a51e:	b086      	sub	sp, #24
1000a520:	af00      	add	r7, sp, #0
1000a522:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
1000a524:	687b      	ldr	r3, [r7, #4]
1000a526:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
1000a528:	693b      	ldr	r3, [r7, #16]
1000a52a:	3314      	adds	r3, #20
1000a52c:	0018      	movs	r0, r3
1000a52e:	4b29      	ldr	r3, [pc, #164]	; (1000a5d4 <timer_process_counted+0xb8>)
1000a530:	4798      	blx	r3
1000a532:	0003      	movs	r3, r0
1000a534:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
1000a536:	693b      	ldr	r3, [r7, #16]
1000a538:	691b      	ldr	r3, [r3, #16]
1000a53a:	1c5a      	adds	r2, r3, #1
1000a53c:	693b      	ldr	r3, [r7, #16]
1000a53e:	611a      	str	r2, [r3, #16]
1000a540:	693b      	ldr	r3, [r7, #16]
1000a542:	691b      	ldr	r3, [r3, #16]
1000a544:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
1000a546:	693b      	ldr	r3, [r7, #16]
1000a548:	7e1b      	ldrb	r3, [r3, #24]
1000a54a:	b2db      	uxtb	r3, r3
1000a54c:	001a      	movs	r2, r3
1000a54e:	2301      	movs	r3, #1
1000a550:	4013      	ands	r3, r2
1000a552:	d106      	bne.n	1000a562 <timer_process_counted+0x46>
1000a554:	693b      	ldr	r3, [r7, #16]
1000a556:	7e1b      	ldrb	r3, [r3, #24]
1000a558:	b2db      	uxtb	r3, r3
1000a55a:	001a      	movs	r2, r3
1000a55c:	2302      	movs	r3, #2
1000a55e:	4013      	ands	r3, r2
1000a560:	d029      	beq.n	1000a5b6 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
1000a562:	693b      	ldr	r3, [r7, #16]
1000a564:	7e1b      	ldrb	r3, [r3, #24]
1000a566:	b2db      	uxtb	r3, r3
1000a568:	2202      	movs	r2, #2
1000a56a:	4313      	orrs	r3, r2
1000a56c:	b2da      	uxtb	r2, r3
1000a56e:	693b      	ldr	r3, [r7, #16]
1000a570:	761a      	strb	r2, [r3, #24]
		return;
1000a572:	e02b      	b.n	1000a5cc <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
1000a574:	697b      	ldr	r3, [r7, #20]
1000a576:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
1000a578:	693b      	ldr	r3, [r7, #16]
1000a57a:	3314      	adds	r3, #20
1000a57c:	0018      	movs	r0, r3
1000a57e:	4b16      	ldr	r3, [pc, #88]	; (1000a5d8 <timer_process_counted+0xbc>)
1000a580:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
1000a582:	68bb      	ldr	r3, [r7, #8]
1000a584:	7c1b      	ldrb	r3, [r3, #16]
1000a586:	2b01      	cmp	r3, #1
1000a588:	d109      	bne.n	1000a59e <timer_process_counted+0x82>
			tmp->time_label = time;
1000a58a:	68bb      	ldr	r3, [r7, #8]
1000a58c:	68fa      	ldr	r2, [r7, #12]
1000a58e:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
1000a590:	693b      	ldr	r3, [r7, #16]
1000a592:	3314      	adds	r3, #20
1000a594:	68fa      	ldr	r2, [r7, #12]
1000a596:	68b9      	ldr	r1, [r7, #8]
1000a598:	0018      	movs	r0, r3
1000a59a:	4b10      	ldr	r3, [pc, #64]	; (1000a5dc <timer_process_counted+0xc0>)
1000a59c:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
1000a59e:	693b      	ldr	r3, [r7, #16]
1000a5a0:	3314      	adds	r3, #20
1000a5a2:	0018      	movs	r0, r3
1000a5a4:	4b0b      	ldr	r3, [pc, #44]	; (1000a5d4 <timer_process_counted+0xb8>)
1000a5a6:	4798      	blx	r3
1000a5a8:	0003      	movs	r3, r0
1000a5aa:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
1000a5ac:	68bb      	ldr	r3, [r7, #8]
1000a5ae:	68db      	ldr	r3, [r3, #12]
1000a5b0:	68ba      	ldr	r2, [r7, #8]
1000a5b2:	0010      	movs	r0, r2
1000a5b4:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
1000a5b6:	697b      	ldr	r3, [r7, #20]
1000a5b8:	2b00      	cmp	r3, #0
1000a5ba:	d007      	beq.n	1000a5cc <timer_process_counted+0xb0>
1000a5bc:	697b      	ldr	r3, [r7, #20]
1000a5be:	685b      	ldr	r3, [r3, #4]
1000a5c0:	68fa      	ldr	r2, [r7, #12]
1000a5c2:	1ad2      	subs	r2, r2, r3
1000a5c4:	697b      	ldr	r3, [r7, #20]
1000a5c6:	689b      	ldr	r3, [r3, #8]
1000a5c8:	429a      	cmp	r2, r3
1000a5ca:	d2d3      	bcs.n	1000a574 <timer_process_counted+0x58>
	}
}
1000a5cc:	46bd      	mov	sp, r7
1000a5ce:	b006      	add	sp, #24
1000a5d0:	bd80      	pop	{r7, pc}
1000a5d2:	46c0      	nop			; (mov r8, r8)
1000a5d4:	1000a221 	.word	0x1000a221
1000a5d8:	1000a6b9 	.word	0x1000a6b9
1000a5dc:	1000a459 	.word	0x1000a459

1000a5e0 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
1000a5e0:	b580      	push	{r7, lr}
1000a5e2:	b084      	sub	sp, #16
1000a5e4:	af00      	add	r7, sp, #0
1000a5e6:	60b9      	str	r1, [r7, #8]
1000a5e8:	607a      	str	r2, [r7, #4]
1000a5ea:	230f      	movs	r3, #15
1000a5ec:	18fb      	adds	r3, r7, r3
1000a5ee:	1c02      	adds	r2, r0, #0
1000a5f0:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
1000a5f2:	230f      	movs	r3, #15
1000a5f4:	18fb      	adds	r3, r7, r3
1000a5f6:	781b      	ldrb	r3, [r3, #0]
1000a5f8:	2201      	movs	r2, #1
1000a5fa:	4053      	eors	r3, r2
1000a5fc:	b2db      	uxtb	r3, r3
1000a5fe:	2b00      	cmp	r3, #0
1000a600:	d000      	beq.n	1000a604 <assert+0x24>
		__asm("BKPT #0");
1000a602:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
1000a604:	46c0      	nop			; (mov r8, r8)
1000a606:	46bd      	mov	sp, r7
1000a608:	b004      	add	sp, #16
1000a60a:	bd80      	pop	{r7, pc}

1000a60c <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
1000a60c:	b580      	push	{r7, lr}
1000a60e:	b084      	sub	sp, #16
1000a610:	af00      	add	r7, sp, #0
1000a612:	6078      	str	r0, [r7, #4]
1000a614:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
1000a616:	687b      	ldr	r3, [r7, #4]
1000a618:	681b      	ldr	r3, [r3, #0]
1000a61a:	60fb      	str	r3, [r7, #12]
1000a61c:	e008      	b.n	1000a630 <is_list_element+0x24>
		if (it == element) {
1000a61e:	68fa      	ldr	r2, [r7, #12]
1000a620:	683b      	ldr	r3, [r7, #0]
1000a622:	429a      	cmp	r2, r3
1000a624:	d101      	bne.n	1000a62a <is_list_element+0x1e>
			return true;
1000a626:	2301      	movs	r3, #1
1000a628:	e006      	b.n	1000a638 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
1000a62a:	68fb      	ldr	r3, [r7, #12]
1000a62c:	681b      	ldr	r3, [r3, #0]
1000a62e:	60fb      	str	r3, [r7, #12]
1000a630:	68fb      	ldr	r3, [r7, #12]
1000a632:	2b00      	cmp	r3, #0
1000a634:	d1f3      	bne.n	1000a61e <is_list_element+0x12>
		}
	}

	return false;
1000a636:	2300      	movs	r3, #0
}
1000a638:	0018      	movs	r0, r3
1000a63a:	46bd      	mov	sp, r7
1000a63c:	b004      	add	sp, #16
1000a63e:	bd80      	pop	{r7, pc}

1000a640 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
1000a640:	b580      	push	{r7, lr}
1000a642:	b082      	sub	sp, #8
1000a644:	af00      	add	r7, sp, #0
1000a646:	6078      	str	r0, [r7, #4]
1000a648:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
1000a64a:	683a      	ldr	r2, [r7, #0]
1000a64c:	687b      	ldr	r3, [r7, #4]
1000a64e:	0011      	movs	r1, r2
1000a650:	0018      	movs	r0, r3
1000a652:	4b0e      	ldr	r3, [pc, #56]	; (1000a68c <list_insert_as_head+0x4c>)
1000a654:	4798      	blx	r3
1000a656:	0003      	movs	r3, r0
1000a658:	1e5a      	subs	r2, r3, #1
1000a65a:	4193      	sbcs	r3, r2
1000a65c:	b2db      	uxtb	r3, r3
1000a65e:	2201      	movs	r2, #1
1000a660:	4053      	eors	r3, r2
1000a662:	b2db      	uxtb	r3, r3
1000a664:	1c1a      	adds	r2, r3, #0
1000a666:	2301      	movs	r3, #1
1000a668:	4013      	ands	r3, r2
1000a66a:	b2db      	uxtb	r3, r3
1000a66c:	4908      	ldr	r1, [pc, #32]	; (1000a690 <list_insert_as_head+0x50>)
1000a66e:	2243      	movs	r2, #67	; 0x43
1000a670:	0018      	movs	r0, r3
1000a672:	4b08      	ldr	r3, [pc, #32]	; (1000a694 <list_insert_as_head+0x54>)
1000a674:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
1000a676:	687b      	ldr	r3, [r7, #4]
1000a678:	681a      	ldr	r2, [r3, #0]
1000a67a:	683b      	ldr	r3, [r7, #0]
1000a67c:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
1000a67e:	687b      	ldr	r3, [r7, #4]
1000a680:	683a      	ldr	r2, [r7, #0]
1000a682:	601a      	str	r2, [r3, #0]
}
1000a684:	46c0      	nop			; (mov r8, r8)
1000a686:	46bd      	mov	sp, r7
1000a688:	b002      	add	sp, #8
1000a68a:	bd80      	pop	{r7, pc}
1000a68c:	1000a60d 	.word	0x1000a60d
1000a690:	1000fec4 	.word	0x1000fec4
1000a694:	1000a5e1 	.word	0x1000a5e1

1000a698 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
1000a698:	b580      	push	{r7, lr}
1000a69a:	b082      	sub	sp, #8
1000a69c:	af00      	add	r7, sp, #0
1000a69e:	6078      	str	r0, [r7, #4]
1000a6a0:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
1000a6a2:	687b      	ldr	r3, [r7, #4]
1000a6a4:	681a      	ldr	r2, [r3, #0]
1000a6a6:	683b      	ldr	r3, [r7, #0]
1000a6a8:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
1000a6aa:	687b      	ldr	r3, [r7, #4]
1000a6ac:	683a      	ldr	r2, [r7, #0]
1000a6ae:	601a      	str	r2, [r3, #0]
}
1000a6b0:	46c0      	nop			; (mov r8, r8)
1000a6b2:	46bd      	mov	sp, r7
1000a6b4:	b002      	add	sp, #8
1000a6b6:	bd80      	pop	{r7, pc}

1000a6b8 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
1000a6b8:	b580      	push	{r7, lr}
1000a6ba:	b084      	sub	sp, #16
1000a6bc:	af00      	add	r7, sp, #0
1000a6be:	6078      	str	r0, [r7, #4]
	if (list->head) {
1000a6c0:	687b      	ldr	r3, [r7, #4]
1000a6c2:	681b      	ldr	r3, [r3, #0]
1000a6c4:	2b00      	cmp	r3, #0
1000a6c6:	d009      	beq.n	1000a6dc <list_remove_head+0x24>
		struct list_element *tmp = list->head;
1000a6c8:	687b      	ldr	r3, [r7, #4]
1000a6ca:	681b      	ldr	r3, [r3, #0]
1000a6cc:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
1000a6ce:	687b      	ldr	r3, [r7, #4]
1000a6d0:	681b      	ldr	r3, [r3, #0]
1000a6d2:	681a      	ldr	r2, [r3, #0]
1000a6d4:	687b      	ldr	r3, [r7, #4]
1000a6d6:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
1000a6d8:	68fb      	ldr	r3, [r7, #12]
1000a6da:	e000      	b.n	1000a6de <list_remove_head+0x26>
	}

	return NULL;
1000a6dc:	2300      	movs	r3, #0
}
1000a6de:	0018      	movs	r0, r3
1000a6e0:	46bd      	mov	sp, r7
1000a6e2:	b004      	add	sp, #16
1000a6e4:	bd80      	pop	{r7, pc}
	...

1000a6e8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
1000a6e8:	b580      	push	{r7, lr}
1000a6ea:	b084      	sub	sp, #16
1000a6ec:	af00      	add	r7, sp, #0
1000a6ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
1000a6f0:	4b0a      	ldr	r3, [pc, #40]	; (1000a71c <_sbrk+0x34>)
1000a6f2:	681b      	ldr	r3, [r3, #0]
1000a6f4:	2b00      	cmp	r3, #0
1000a6f6:	d102      	bne.n	1000a6fe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
1000a6f8:	4b08      	ldr	r3, [pc, #32]	; (1000a71c <_sbrk+0x34>)
1000a6fa:	4a09      	ldr	r2, [pc, #36]	; (1000a720 <_sbrk+0x38>)
1000a6fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
1000a6fe:	4b07      	ldr	r3, [pc, #28]	; (1000a71c <_sbrk+0x34>)
1000a700:	681b      	ldr	r3, [r3, #0]
1000a702:	60fb      	str	r3, [r7, #12]

	heap += incr;
1000a704:	4b05      	ldr	r3, [pc, #20]	; (1000a71c <_sbrk+0x34>)
1000a706:	681a      	ldr	r2, [r3, #0]
1000a708:	687b      	ldr	r3, [r7, #4]
1000a70a:	18d2      	adds	r2, r2, r3
1000a70c:	4b03      	ldr	r3, [pc, #12]	; (1000a71c <_sbrk+0x34>)
1000a70e:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
1000a710:	68fb      	ldr	r3, [r7, #12]
}
1000a712:	0018      	movs	r0, r3
1000a714:	46bd      	mov	sp, r7
1000a716:	b004      	add	sp, #16
1000a718:	bd80      	pop	{r7, pc}
1000a71a:	46c0      	nop			; (mov r8, r8)
1000a71c:	10011128 	.word	0x10011128
1000a720:	100197e8 	.word	0x100197e8

1000a724 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000a724:	b580      	push	{r7, lr}
1000a726:	b082      	sub	sp, #8
1000a728:	af00      	add	r7, sp, #0
1000a72a:	0002      	movs	r2, r0
1000a72c:	1dfb      	adds	r3, r7, #7
1000a72e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a730:	4b06      	ldr	r3, [pc, #24]	; (1000a74c <NVIC_EnableIRQ+0x28>)
1000a732:	1dfa      	adds	r2, r7, #7
1000a734:	7812      	ldrb	r2, [r2, #0]
1000a736:	0011      	movs	r1, r2
1000a738:	221f      	movs	r2, #31
1000a73a:	400a      	ands	r2, r1
1000a73c:	2101      	movs	r1, #1
1000a73e:	4091      	lsls	r1, r2
1000a740:	000a      	movs	r2, r1
1000a742:	601a      	str	r2, [r3, #0]
}
1000a744:	46c0      	nop			; (mov r8, r8)
1000a746:	46bd      	mov	sp, r7
1000a748:	b002      	add	sp, #8
1000a74a:	bd80      	pop	{r7, pc}
1000a74c:	e000e100 	.word	0xe000e100

1000a750 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
1000a750:	b580      	push	{r7, lr}
1000a752:	b082      	sub	sp, #8
1000a754:	af00      	add	r7, sp, #0
1000a756:	0002      	movs	r2, r0
1000a758:	1dfb      	adds	r3, r7, #7
1000a75a:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a75c:	4a08      	ldr	r2, [pc, #32]	; (1000a780 <NVIC_SetPendingIRQ+0x30>)
1000a75e:	1dfb      	adds	r3, r7, #7
1000a760:	781b      	ldrb	r3, [r3, #0]
1000a762:	0019      	movs	r1, r3
1000a764:	231f      	movs	r3, #31
1000a766:	400b      	ands	r3, r1
1000a768:	2101      	movs	r1, #1
1000a76a:	4099      	lsls	r1, r3
1000a76c:	000b      	movs	r3, r1
1000a76e:	0019      	movs	r1, r3
1000a770:	2380      	movs	r3, #128	; 0x80
1000a772:	005b      	lsls	r3, r3, #1
1000a774:	50d1      	str	r1, [r2, r3]
}
1000a776:	46c0      	nop			; (mov r8, r8)
1000a778:	46bd      	mov	sp, r7
1000a77a:	b002      	add	sp, #8
1000a77c:	bd80      	pop	{r7, pc}
1000a77e:	46c0      	nop			; (mov r8, r8)
1000a780:	e000e100 	.word	0xe000e100

1000a784 <hri_aonsleeptimersleeptimer_set_CONTROL_RELOAD_ENABLE_bit>:
typedef uint32_t hri_aon_sleep_timer_control_reg_t;
typedef uint32_t hri_aon_sleep_timer_current_count_value_reg_t;
typedef uint32_t hri_aon_sleep_timer_single_count_duration_reg_t;

static inline void hri_aonsleeptimersleeptimer_set_CONTROL_RELOAD_ENABLE_bit(const void *const hw)
{
1000a784:	b580      	push	{r7, lr}
1000a786:	b082      	sub	sp, #8
1000a788:	af00      	add	r7, sp, #0
1000a78a:	6078      	str	r0, [r7, #4]
	AON_SLEEP_TIMER_CRITICAL_SECTION_ENTER();
	((AonSleepTimer *)hw)->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE_Msk;
1000a78c:	687b      	ldr	r3, [r7, #4]
1000a78e:	681b      	ldr	r3, [r3, #0]
1000a790:	2201      	movs	r2, #1
1000a792:	431a      	orrs	r2, r3
1000a794:	687b      	ldr	r3, [r7, #4]
1000a796:	601a      	str	r2, [r3, #0]
	AON_SLEEP_TIMER_CRITICAL_SECTION_LEAVE();
}
1000a798:	46c0      	nop			; (mov r8, r8)
1000a79a:	46bd      	mov	sp, r7
1000a79c:	b002      	add	sp, #8
1000a79e:	bd80      	pop	{r7, pc}

1000a7a0 <hri_aonsleeptimersleeptimer_set_CONTROL_IRQ_CLEAR_bit>:
	((AonSleepTimer *)hw)->CONTROL.reg ^= AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE_Msk;
	AON_SLEEP_TIMER_CRITICAL_SECTION_LEAVE();
}

static inline void hri_aonsleeptimersleeptimer_set_CONTROL_IRQ_CLEAR_bit(const void *const hw)
{
1000a7a0:	b580      	push	{r7, lr}
1000a7a2:	b082      	sub	sp, #8
1000a7a4:	af00      	add	r7, sp, #0
1000a7a6:	6078      	str	r0, [r7, #4]
	AON_SLEEP_TIMER_CRITICAL_SECTION_ENTER();
	((AonSleepTimer *)hw)->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR_Msk;
1000a7a8:	687b      	ldr	r3, [r7, #4]
1000a7aa:	681b      	ldr	r3, [r3, #0]
1000a7ac:	2210      	movs	r2, #16
1000a7ae:	431a      	orrs	r2, r3
1000a7b0:	687b      	ldr	r3, [r7, #4]
1000a7b2:	601a      	str	r2, [r3, #0]
	AON_SLEEP_TIMER_CRITICAL_SECTION_LEAVE();
}
1000a7b4:	46c0      	nop			; (mov r8, r8)
1000a7b6:	46bd      	mov	sp, r7
1000a7b8:	b002      	add	sp, #8
1000a7ba:	bd80      	pop	{r7, pc}

1000a7bc <hri_aonsleeptimersleeptimer_get_CONTROL_SLEEP_TIMER_ACTIVE_bit>:
	((AonSleepTimer *)hw)->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_SLEEP_TIMER_ACTIVE_Msk;
	AON_SLEEP_TIMER_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_aonsleeptimersleeptimer_get_CONTROL_SLEEP_TIMER_ACTIVE_bit(const void *const hw)
{
1000a7bc:	b580      	push	{r7, lr}
1000a7be:	b084      	sub	sp, #16
1000a7c0:	af00      	add	r7, sp, #0
1000a7c2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((AonSleepTimer *)hw)->CONTROL.reg;
1000a7c4:	687b      	ldr	r3, [r7, #4]
1000a7c6:	681b      	ldr	r3, [r3, #0]
1000a7c8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & AON_SLEEP_TIMER_CONTROL_SLEEP_TIMER_ACTIVE_Msk) >> AON_SLEEP_TIMER_CONTROL_SLEEP_TIMER_ACTIVE_Pos;
1000a7ca:	68fb      	ldr	r3, [r7, #12]
1000a7cc:	0f9b      	lsrs	r3, r3, #30
1000a7ce:	2201      	movs	r2, #1
1000a7d0:	4013      	ands	r3, r2
1000a7d2:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
1000a7d4:	68fb      	ldr	r3, [r7, #12]
1000a7d6:	1e5a      	subs	r2, r3, #1
1000a7d8:	4193      	sbcs	r3, r2
1000a7da:	b2db      	uxtb	r3, r3
}
1000a7dc:	0018      	movs	r0, r3
1000a7de:	46bd      	mov	sp, r7
1000a7e0:	b004      	add	sp, #16
1000a7e2:	bd80      	pop	{r7, pc}

1000a7e4 <hri_aonsleeptimersleeptimer_write_SINGLE_COUNT_DURATION_reg>:
}

static inline void
hri_aonsleeptimersleeptimer_write_SINGLE_COUNT_DURATION_reg(const void *const                               hw,
                                                            hri_aon_sleep_timer_single_count_duration_reg_t data)
{
1000a7e4:	b580      	push	{r7, lr}
1000a7e6:	b082      	sub	sp, #8
1000a7e8:	af00      	add	r7, sp, #0
1000a7ea:	6078      	str	r0, [r7, #4]
1000a7ec:	6039      	str	r1, [r7, #0]
	AON_SLEEP_TIMER_CRITICAL_SECTION_ENTER();
	((AonSleepTimer *)hw)->SINGLE_COUNT_DURATION.reg = data;
1000a7ee:	687b      	ldr	r3, [r7, #4]
1000a7f0:	683a      	ldr	r2, [r7, #0]
1000a7f2:	605a      	str	r2, [r3, #4]
	AON_SLEEP_TIMER_CRITICAL_SECTION_LEAVE();
}
1000a7f4:	46c0      	nop			; (mov r8, r8)
1000a7f6:	46bd      	mov	sp, r7
1000a7f8:	b002      	add	sp, #8
1000a7fa:	bd80      	pop	{r7, pc}

1000a7fc <hri_aonsleeptimersleeptimer_read_CURRENT_COUNT_VALUE_reg>:
	return tmp;
}

static inline hri_aon_sleep_timer_current_count_value_reg_t
hri_aonsleeptimersleeptimer_read_CURRENT_COUNT_VALUE_reg(const void *const hw)
{
1000a7fc:	b580      	push	{r7, lr}
1000a7fe:	b082      	sub	sp, #8
1000a800:	af00      	add	r7, sp, #0
1000a802:	6078      	str	r0, [r7, #4]
	return ((AonSleepTimer *)hw)->CURRENT_COUNT_VALUE.reg;
1000a804:	687b      	ldr	r3, [r7, #4]
1000a806:	68db      	ldr	r3, [r3, #12]
}
1000a808:	0018      	movs	r0, r3
1000a80a:	46bd      	mov	sp, r7
1000a80c:	b002      	add	sp, #8
1000a80e:	bd80      	pop	{r7, pc}

1000a810 <AON_SLEEP_TIMER0_Handler>:
 * \internal AON Sleep Timer interrupt handler
 *
 * \param[in] p Interrupt handler parameter
 */
void AON_SLEEP_TIMER0_Handler(void)
{
1000a810:	b580      	push	{r7, lr}
1000a812:	b082      	sub	sp, #8
1000a814:	af00      	add	r7, sp, #0
	void *hw = _aon_timer_dev->hw;
1000a816:	4b0c      	ldr	r3, [pc, #48]	; (1000a848 <AON_SLEEP_TIMER0_Handler+0x38>)
1000a818:	681b      	ldr	r3, [r3, #0]
1000a81a:	68db      	ldr	r3, [r3, #12]
1000a81c:	607b      	str	r3, [r7, #4]

	/* Clear the interrupt status */
	hri_aonsleeptimersleeptimer_set_CONTROL_IRQ_CLEAR_bit(hw);
1000a81e:	687b      	ldr	r3, [r7, #4]
1000a820:	0018      	movs	r0, r3
1000a822:	4b0a      	ldr	r3, [pc, #40]	; (1000a84c <AON_SLEEP_TIMER0_Handler+0x3c>)
1000a824:	4798      	blx	r3
	if (_aon_timer_dev->timer_cb.period_expired) {
1000a826:	4b08      	ldr	r3, [pc, #32]	; (1000a848 <AON_SLEEP_TIMER0_Handler+0x38>)
1000a828:	681b      	ldr	r3, [r3, #0]
1000a82a:	681b      	ldr	r3, [r3, #0]
1000a82c:	2b00      	cmp	r3, #0
1000a82e:	d006      	beq.n	1000a83e <AON_SLEEP_TIMER0_Handler+0x2e>
		_aon_timer_dev->timer_cb.period_expired(_aon_timer_dev);
1000a830:	4b05      	ldr	r3, [pc, #20]	; (1000a848 <AON_SLEEP_TIMER0_Handler+0x38>)
1000a832:	681b      	ldr	r3, [r3, #0]
1000a834:	681a      	ldr	r2, [r3, #0]
1000a836:	4b04      	ldr	r3, [pc, #16]	; (1000a848 <AON_SLEEP_TIMER0_Handler+0x38>)
1000a838:	681b      	ldr	r3, [r3, #0]
1000a83a:	0018      	movs	r0, r3
1000a83c:	4790      	blx	r2
	}
}
1000a83e:	46c0      	nop			; (mov r8, r8)
1000a840:	46bd      	mov	sp, r7
1000a842:	b002      	add	sp, #8
1000a844:	bd80      	pop	{r7, pc}
1000a846:	46c0      	nop			; (mov r8, r8)
1000a848:	1001112c 	.word	0x1001112c
1000a84c:	1000a7a1 	.word	0x1000a7a1

1000a850 <_timer_init>:

int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
1000a850:	b580      	push	{r7, lr}
1000a852:	b082      	sub	sp, #8
1000a854:	af00      	add	r7, sp, #0
1000a856:	6078      	str	r0, [r7, #4]
1000a858:	6039      	str	r1, [r7, #0]
	ASSERT(device && hw);
1000a85a:	687b      	ldr	r3, [r7, #4]
1000a85c:	2b00      	cmp	r3, #0
1000a85e:	d004      	beq.n	1000a86a <_timer_init+0x1a>
1000a860:	683b      	ldr	r3, [r7, #0]
1000a862:	2b00      	cmp	r3, #0
1000a864:	d001      	beq.n	1000a86a <_timer_init+0x1a>
1000a866:	2301      	movs	r3, #1
1000a868:	e000      	b.n	1000a86c <_timer_init+0x1c>
1000a86a:	2300      	movs	r3, #0
1000a86c:	1c1a      	adds	r2, r3, #0
1000a86e:	2301      	movs	r3, #1
1000a870:	4013      	ands	r3, r2
1000a872:	b2db      	uxtb	r3, r3
1000a874:	4911      	ldr	r1, [pc, #68]	; (1000a8bc <_timer_init+0x6c>)
1000a876:	2247      	movs	r2, #71	; 0x47
1000a878:	0018      	movs	r0, r3
1000a87a:	4b11      	ldr	r3, [pc, #68]	; (1000a8c0 <_timer_init+0x70>)
1000a87c:	4798      	blx	r3

	if (hri_aonsleeptimersleeptimer_get_CONTROL_SLEEP_TIMER_ACTIVE_bit(hw)) {
1000a87e:	683b      	ldr	r3, [r7, #0]
1000a880:	0018      	movs	r0, r3
1000a882:	4b10      	ldr	r3, [pc, #64]	; (1000a8c4 <_timer_init+0x74>)
1000a884:	4798      	blx	r3
1000a886:	1e03      	subs	r3, r0, #0
1000a888:	d002      	beq.n	1000a890 <_timer_init+0x40>
		return ERR_DENIED;
1000a88a:	2311      	movs	r3, #17
1000a88c:	425b      	negs	r3, r3
1000a88e:	e010      	b.n	1000a8b2 <_timer_init+0x62>
	}

	hri_aonsleeptimersleeptimer_write_SINGLE_COUNT_DURATION_reg(hw, AON_SLEEP_TIMER_LOAD_VALUE);
1000a890:	23fa      	movs	r3, #250	; 0xfa
1000a892:	01da      	lsls	r2, r3, #7
1000a894:	683b      	ldr	r3, [r7, #0]
1000a896:	0011      	movs	r1, r2
1000a898:	0018      	movs	r0, r3
1000a89a:	4b0b      	ldr	r3, [pc, #44]	; (1000a8c8 <_timer_init+0x78>)
1000a89c:	4798      	blx	r3

	device->hw     = hw;
1000a89e:	687b      	ldr	r3, [r7, #4]
1000a8a0:	683a      	ldr	r2, [r7, #0]
1000a8a2:	60da      	str	r2, [r3, #12]
	_aon_timer_dev = device;
1000a8a4:	4b09      	ldr	r3, [pc, #36]	; (1000a8cc <_timer_init+0x7c>)
1000a8a6:	687a      	ldr	r2, [r7, #4]
1000a8a8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
1000a8aa:	201b      	movs	r0, #27
1000a8ac:	4b08      	ldr	r3, [pc, #32]	; (1000a8d0 <_timer_init+0x80>)
1000a8ae:	4798      	blx	r3

	return ERR_NONE;
1000a8b0:	2300      	movs	r3, #0
}
1000a8b2:	0018      	movs	r0, r3
1000a8b4:	46bd      	mov	sp, r7
1000a8b6:	b002      	add	sp, #8
1000a8b8:	bd80      	pop	{r7, pc}
1000a8ba:	46c0      	nop			; (mov r8, r8)
1000a8bc:	1000fee4 	.word	0x1000fee4
1000a8c0:	1000a5e1 	.word	0x1000a5e1
1000a8c4:	1000a7bd 	.word	0x1000a7bd
1000a8c8:	1000a7e5 	.word	0x1000a7e5
1000a8cc:	1001112c 	.word	0x1001112c
1000a8d0:	1000a725 	.word	0x1000a725

1000a8d4 <_timer_start>:
	hri_aonsleeptimersleeptimer_write_SINGLE_COUNT_DURATION_reg(hw, 0);
	hw = NULL;
}

void _timer_start(struct _timer_device *const device)
{
1000a8d4:	b580      	push	{r7, lr}
1000a8d6:	b082      	sub	sp, #8
1000a8d8:	af00      	add	r7, sp, #0
1000a8da:	6078      	str	r0, [r7, #4]
	ASSERT(device && device->hw);
1000a8dc:	687b      	ldr	r3, [r7, #4]
1000a8de:	2b00      	cmp	r3, #0
1000a8e0:	d005      	beq.n	1000a8ee <_timer_start+0x1a>
1000a8e2:	687b      	ldr	r3, [r7, #4]
1000a8e4:	68db      	ldr	r3, [r3, #12]
1000a8e6:	2b00      	cmp	r3, #0
1000a8e8:	d001      	beq.n	1000a8ee <_timer_start+0x1a>
1000a8ea:	2301      	movs	r3, #1
1000a8ec:	e000      	b.n	1000a8f0 <_timer_start+0x1c>
1000a8ee:	2300      	movs	r3, #0
1000a8f0:	1c1a      	adds	r2, r3, #0
1000a8f2:	2301      	movs	r3, #1
1000a8f4:	4013      	ands	r3, r2
1000a8f6:	b2db      	uxtb	r3, r3
1000a8f8:	4906      	ldr	r1, [pc, #24]	; (1000a914 <_timer_start+0x40>)
1000a8fa:	2264      	movs	r2, #100	; 0x64
1000a8fc:	0018      	movs	r0, r3
1000a8fe:	4b06      	ldr	r3, [pc, #24]	; (1000a918 <_timer_start+0x44>)
1000a900:	4798      	blx	r3

	hri_aonsleeptimersleeptimer_set_CONTROL_RELOAD_ENABLE_bit(device->hw);
1000a902:	687b      	ldr	r3, [r7, #4]
1000a904:	68db      	ldr	r3, [r3, #12]
1000a906:	0018      	movs	r0, r3
1000a908:	4b04      	ldr	r3, [pc, #16]	; (1000a91c <_timer_start+0x48>)
1000a90a:	4798      	blx	r3
}
1000a90c:	46c0      	nop			; (mov r8, r8)
1000a90e:	46bd      	mov	sp, r7
1000a910:	b002      	add	sp, #8
1000a912:	bd80      	pop	{r7, pc}
1000a914:	1000fee4 	.word	0x1000fee4
1000a918:	1000a5e1 	.word	0x1000a5e1
1000a91c:	1000a785 	.word	0x1000a785

1000a920 <_timer_get_period>:

	hri_aonsleeptimersleeptimer_write_SINGLE_COUNT_DURATION_reg(device->hw, clock_cycles);
}

uint32_t _timer_get_period(const struct _timer_device *const device)
{
1000a920:	b580      	push	{r7, lr}
1000a922:	b082      	sub	sp, #8
1000a924:	af00      	add	r7, sp, #0
1000a926:	6078      	str	r0, [r7, #4]
	ASSERT(device && device->hw);
1000a928:	687b      	ldr	r3, [r7, #4]
1000a92a:	2b00      	cmp	r3, #0
1000a92c:	d005      	beq.n	1000a93a <_timer_get_period+0x1a>
1000a92e:	687b      	ldr	r3, [r7, #4]
1000a930:	68db      	ldr	r3, [r3, #12]
1000a932:	2b00      	cmp	r3, #0
1000a934:	d001      	beq.n	1000a93a <_timer_get_period+0x1a>
1000a936:	2301      	movs	r3, #1
1000a938:	e000      	b.n	1000a93c <_timer_get_period+0x1c>
1000a93a:	2300      	movs	r3, #0
1000a93c:	1c1a      	adds	r2, r3, #0
1000a93e:	2301      	movs	r3, #1
1000a940:	4013      	ands	r3, r2
1000a942:	b2db      	uxtb	r3, r3
1000a944:	4907      	ldr	r1, [pc, #28]	; (1000a964 <_timer_get_period+0x44>)
1000a946:	2281      	movs	r2, #129	; 0x81
1000a948:	0018      	movs	r0, r3
1000a94a:	4b07      	ldr	r3, [pc, #28]	; (1000a968 <_timer_get_period+0x48>)
1000a94c:	4798      	blx	r3

	return hri_aonsleeptimersleeptimer_read_CURRENT_COUNT_VALUE_reg(device->hw);
1000a94e:	687b      	ldr	r3, [r7, #4]
1000a950:	68db      	ldr	r3, [r3, #12]
1000a952:	0018      	movs	r0, r3
1000a954:	4b05      	ldr	r3, [pc, #20]	; (1000a96c <_timer_get_period+0x4c>)
1000a956:	4798      	blx	r3
1000a958:	0003      	movs	r3, r0
}
1000a95a:	0018      	movs	r0, r3
1000a95c:	46bd      	mov	sp, r7
1000a95e:	b002      	add	sp, #8
1000a960:	bd80      	pop	{r7, pc}
1000a962:	46c0      	nop			; (mov r8, r8)
1000a964:	1000fee4 	.word	0x1000fee4
1000a968:	1000a5e1 	.word	0x1000a5e1
1000a96c:	1000a7fd 	.word	0x1000a7fd

1000a970 <_timer_is_started>:

bool _timer_is_started(const struct _timer_device *const device)
{
1000a970:	b580      	push	{r7, lr}
1000a972:	b082      	sub	sp, #8
1000a974:	af00      	add	r7, sp, #0
1000a976:	6078      	str	r0, [r7, #4]
	ASSERT(device && device->hw);
1000a978:	687b      	ldr	r3, [r7, #4]
1000a97a:	2b00      	cmp	r3, #0
1000a97c:	d005      	beq.n	1000a98a <_timer_is_started+0x1a>
1000a97e:	687b      	ldr	r3, [r7, #4]
1000a980:	68db      	ldr	r3, [r3, #12]
1000a982:	2b00      	cmp	r3, #0
1000a984:	d001      	beq.n	1000a98a <_timer_is_started+0x1a>
1000a986:	2301      	movs	r3, #1
1000a988:	e000      	b.n	1000a98c <_timer_is_started+0x1c>
1000a98a:	2300      	movs	r3, #0
1000a98c:	1c1a      	adds	r2, r3, #0
1000a98e:	2301      	movs	r3, #1
1000a990:	4013      	ands	r3, r2
1000a992:	b2db      	uxtb	r3, r3
1000a994:	4907      	ldr	r1, [pc, #28]	; (1000a9b4 <_timer_is_started+0x44>)
1000a996:	2288      	movs	r2, #136	; 0x88
1000a998:	0018      	movs	r0, r3
1000a99a:	4b07      	ldr	r3, [pc, #28]	; (1000a9b8 <_timer_is_started+0x48>)
1000a99c:	4798      	blx	r3

	return hri_aonsleeptimersleeptimer_get_CONTROL_SLEEP_TIMER_ACTIVE_bit(device->hw);
1000a99e:	687b      	ldr	r3, [r7, #4]
1000a9a0:	68db      	ldr	r3, [r3, #12]
1000a9a2:	0018      	movs	r0, r3
1000a9a4:	4b05      	ldr	r3, [pc, #20]	; (1000a9bc <_timer_is_started+0x4c>)
1000a9a6:	4798      	blx	r3
1000a9a8:	0003      	movs	r3, r0
}
1000a9aa:	0018      	movs	r0, r3
1000a9ac:	46bd      	mov	sp, r7
1000a9ae:	b002      	add	sp, #8
1000a9b0:	bd80      	pop	{r7, pc}
1000a9b2:	46c0      	nop			; (mov r8, r8)
1000a9b4:	1000fee4 	.word	0x1000fee4
1000a9b8:	1000a5e1 	.word	0x1000a5e1
1000a9bc:	1000a7bd 	.word	0x1000a7bd

1000a9c0 <_timer_set_irq>:

void _timer_set_irq(struct _timer_device *const device)
{
1000a9c0:	b580      	push	{r7, lr}
1000a9c2:	b082      	sub	sp, #8
1000a9c4:	af00      	add	r7, sp, #0
1000a9c6:	6078      	str	r0, [r7, #4]
	ASSERT(device);
1000a9c8:	687b      	ldr	r3, [r7, #4]
1000a9ca:	1e5a      	subs	r2, r3, #1
1000a9cc:	4193      	sbcs	r3, r2
1000a9ce:	b2db      	uxtb	r3, r3
1000a9d0:	4905      	ldr	r1, [pc, #20]	; (1000a9e8 <_timer_set_irq+0x28>)
1000a9d2:	228f      	movs	r2, #143	; 0x8f
1000a9d4:	0018      	movs	r0, r3
1000a9d6:	4b05      	ldr	r3, [pc, #20]	; (1000a9ec <_timer_set_irq+0x2c>)
1000a9d8:	4798      	blx	r3

	(void)device;

	NVIC_SetPendingIRQ(AON_SLEEP_TIMER0_IRQn);
1000a9da:	201b      	movs	r0, #27
1000a9dc:	4b04      	ldr	r3, [pc, #16]	; (1000a9f0 <_timer_set_irq+0x30>)
1000a9de:	4798      	blx	r3
}
1000a9e0:	46c0      	nop			; (mov r8, r8)
1000a9e2:	46bd      	mov	sp, r7
1000a9e4:	b002      	add	sp, #8
1000a9e6:	bd80      	pop	{r7, pc}
1000a9e8:	1000fee4 	.word	0x1000fee4
1000a9ec:	1000a5e1 	.word	0x1000a5e1
1000a9f0:	1000a751 	.word	0x1000a751

1000a9f4 <_aon_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_aon_get_timer(void)
{
1000a9f4:	b580      	push	{r7, lr}
1000a9f6:	af00      	add	r7, sp, #0
	return NULL;
1000a9f8:	2300      	movs	r3, #0
}
1000a9fa:	0018      	movs	r0, r3
1000a9fc:	46bd      	mov	sp, r7
1000a9fe:	bd80      	pop	{r7, pc}

1000aa00 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
1000aa00:	b580      	push	{r7, lr}
1000aa02:	af00      	add	r7, sp, #0
	_lpmcu_misc_regs_init();
1000aa04:	4b02      	ldr	r3, [pc, #8]	; (1000aa10 <_init_chip+0x10>)
1000aa06:	4798      	blx	r3
}
1000aa08:	46c0      	nop			; (mov r8, r8)
1000aa0a:	46bd      	mov	sp, r7
1000aa0c:	bd80      	pop	{r7, pc}
1000aa0e:	46c0      	nop			; (mov r8, r8)
1000aa10:	1000b18d 	.word	0x1000b18d

1000aa14 <hri_i2c_write_TRANSMIT_DATA_reg>:
typedef uint8_t  hri_i2c_status_reg_t;
typedef uint8_t  hri_i2c_transmit_status_reg_t;
typedef uint8_t  hri_i2c_tx_interrupt_mask_reg_t;

static inline void hri_i2c_write_TRANSMIT_DATA_reg(const void *const hw, hri_i2c_transmit_data_reg_t data)
{
1000aa14:	b580      	push	{r7, lr}
1000aa16:	b082      	sub	sp, #8
1000aa18:	af00      	add	r7, sp, #0
1000aa1a:	6078      	str	r0, [r7, #4]
1000aa1c:	000a      	movs	r2, r1
1000aa1e:	1cbb      	adds	r3, r7, #2
1000aa20:	801a      	strh	r2, [r3, #0]
	I2C_CRITICAL_SECTION_ENTER();
	((I2c *)hw)->TRANSMIT_DATA.reg = data;
1000aa22:	687b      	ldr	r3, [r7, #4]
1000aa24:	1cba      	adds	r2, r7, #2
1000aa26:	8812      	ldrh	r2, [r2, #0]
1000aa28:	801a      	strh	r2, [r3, #0]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000aa2a:	46c0      	nop			; (mov r8, r8)
1000aa2c:	46bd      	mov	sp, r7
1000aa2e:	b002      	add	sp, #8
1000aa30:	bd80      	pop	{r7, pc}

1000aa32 <hri_i2c_write_FLUSH_reg>:

static inline void hri_i2c_write_FLUSH_reg(const void *const hw, hri_i2c_flush_reg_t data)
{
1000aa32:	b580      	push	{r7, lr}
1000aa34:	b082      	sub	sp, #8
1000aa36:	af00      	add	r7, sp, #0
1000aa38:	6078      	str	r0, [r7, #4]
1000aa3a:	000a      	movs	r2, r1
1000aa3c:	1cfb      	adds	r3, r7, #3
1000aa3e:	701a      	strb	r2, [r3, #0]
	I2C_CRITICAL_SECTION_ENTER();
	((I2c *)hw)->I2C_FLUSH.reg = data;
1000aa40:	687b      	ldr	r3, [r7, #4]
1000aa42:	1cfa      	adds	r2, r7, #3
1000aa44:	2134      	movs	r1, #52	; 0x34
1000aa46:	7812      	ldrb	r2, [r2, #0]
1000aa48:	545a      	strb	r2, [r3, r1]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000aa4a:	46c0      	nop			; (mov r8, r8)
1000aa4c:	46bd      	mov	sp, r7
1000aa4e:	b002      	add	sp, #8
1000aa50:	bd80      	pop	{r7, pc}

1000aa52 <hri_i2c_write_CLOCK_SOURCE_SELECT_CLOCK_bf>:
	return tmp;
}

static inline void hri_i2c_write_CLOCK_SOURCE_SELECT_CLOCK_bf(const void *const                 hw,
                                                              hri_i2c_clock_source_select_reg_t data)
{
1000aa52:	b580      	push	{r7, lr}
1000aa54:	b084      	sub	sp, #16
1000aa56:	af00      	add	r7, sp, #0
1000aa58:	6078      	str	r0, [r7, #4]
1000aa5a:	000a      	movs	r2, r1
1000aa5c:	1cfb      	adds	r3, r7, #3
1000aa5e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	I2C_CRITICAL_SECTION_ENTER();
	tmp = ((I2c *)hw)->CLOCK_SOURCE_SELECT.reg;
1000aa60:	230f      	movs	r3, #15
1000aa62:	18fb      	adds	r3, r7, r3
1000aa64:	687a      	ldr	r2, [r7, #4]
1000aa66:	7c12      	ldrb	r2, [r2, #16]
1000aa68:	701a      	strb	r2, [r3, #0]
	tmp &= ~I2C_CLOCK_SOURCE_SELECT_CLOCK_Msk;
1000aa6a:	230f      	movs	r3, #15
1000aa6c:	18fb      	adds	r3, r7, r3
1000aa6e:	220f      	movs	r2, #15
1000aa70:	18ba      	adds	r2, r7, r2
1000aa72:	7812      	ldrb	r2, [r2, #0]
1000aa74:	2103      	movs	r1, #3
1000aa76:	438a      	bics	r2, r1
1000aa78:	701a      	strb	r2, [r3, #0]
	tmp |= I2C_CLOCK_SOURCE_SELECT_CLOCK(data);
1000aa7a:	1cfb      	adds	r3, r7, #3
1000aa7c:	781b      	ldrb	r3, [r3, #0]
1000aa7e:	2203      	movs	r2, #3
1000aa80:	4013      	ands	r3, r2
1000aa82:	b2d9      	uxtb	r1, r3
1000aa84:	230f      	movs	r3, #15
1000aa86:	18fb      	adds	r3, r7, r3
1000aa88:	220f      	movs	r2, #15
1000aa8a:	18ba      	adds	r2, r7, r2
1000aa8c:	7812      	ldrb	r2, [r2, #0]
1000aa8e:	430a      	orrs	r2, r1
1000aa90:	701a      	strb	r2, [r3, #0]
	((I2c *)hw)->CLOCK_SOURCE_SELECT.reg = tmp;
1000aa92:	687b      	ldr	r3, [r7, #4]
1000aa94:	220f      	movs	r2, #15
1000aa96:	18ba      	adds	r2, r7, r2
1000aa98:	7812      	ldrb	r2, [r2, #0]
1000aa9a:	741a      	strb	r2, [r3, #16]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000aa9c:	46c0      	nop			; (mov r8, r8)
1000aa9e:	46bd      	mov	sp, r7
1000aaa0:	b004      	add	sp, #16
1000aaa2:	bd80      	pop	{r7, pc}

1000aaa4 <hri_i2c_set_MODULE_ENABLE_ENABLE_bit>:
{
	return ((I2c *)hw)->CLOCK_SOURCE_SELECT.reg;
}

static inline void hri_i2c_set_MODULE_ENABLE_ENABLE_bit(const void *const hw)
{
1000aaa4:	b580      	push	{r7, lr}
1000aaa6:	b082      	sub	sp, #8
1000aaa8:	af00      	add	r7, sp, #0
1000aaaa:	6078      	str	r0, [r7, #4]
	I2C_CRITICAL_SECTION_ENTER();
	((I2c *)hw)->I2C_MODULE_ENABLE.reg |= I2C_MODULE_ENABLE_ENABLE;
1000aaac:	687b      	ldr	r3, [r7, #4]
1000aaae:	7d1b      	ldrb	r3, [r3, #20]
1000aab0:	b2db      	uxtb	r3, r3
1000aab2:	2201      	movs	r2, #1
1000aab4:	4313      	orrs	r3, r2
1000aab6:	b2da      	uxtb	r2, r3
1000aab8:	687b      	ldr	r3, [r7, #4]
1000aaba:	751a      	strb	r2, [r3, #20]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000aabc:	46c0      	nop			; (mov r8, r8)
1000aabe:	46bd      	mov	sp, r7
1000aac0:	b002      	add	sp, #8
1000aac2:	bd80      	pop	{r7, pc}

1000aac4 <hri_i2c_get_MODULE_ENABLE_ENABLE_bit>:

static inline bool hri_i2c_get_MODULE_ENABLE_ENABLE_bit(const void *const hw)
{
1000aac4:	b580      	push	{r7, lr}
1000aac6:	b084      	sub	sp, #16
1000aac8:	af00      	add	r7, sp, #0
1000aaca:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((I2c *)hw)->I2C_MODULE_ENABLE.reg;
1000aacc:	230f      	movs	r3, #15
1000aace:	18fb      	adds	r3, r7, r3
1000aad0:	687a      	ldr	r2, [r7, #4]
1000aad2:	7d12      	ldrb	r2, [r2, #20]
1000aad4:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & I2C_MODULE_ENABLE_ENABLE) >> I2C_MODULE_ENABLE_ENABLE_Pos;
1000aad6:	230f      	movs	r3, #15
1000aad8:	18fb      	adds	r3, r7, r3
1000aada:	220f      	movs	r2, #15
1000aadc:	18ba      	adds	r2, r7, r2
1000aade:	7812      	ldrb	r2, [r2, #0]
1000aae0:	2101      	movs	r1, #1
1000aae2:	400a      	ands	r2, r1
1000aae4:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
1000aae6:	230f      	movs	r3, #15
1000aae8:	18fb      	adds	r3, r7, r3
1000aaea:	781b      	ldrb	r3, [r3, #0]
1000aaec:	1e5a      	subs	r2, r3, #1
1000aaee:	4193      	sbcs	r3, r2
1000aaf0:	b2db      	uxtb	r3, r3
}
1000aaf2:	0018      	movs	r0, r3
1000aaf4:	46bd      	mov	sp, r7
1000aaf6:	b004      	add	sp, #16
1000aaf8:	bd80      	pop	{r7, pc}

1000aafa <hri_i2c_write_CLK_DIVIDER_I2C_DIVIDE_RATIO_bf>:
	tmp = (tmp & I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(mask)) >> I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO_Pos;
	return tmp;
}

static inline void hri_i2c_write_CLK_DIVIDER_I2C_DIVIDE_RATIO_bf(const void *const hw, hri_i2c_clk_divider_reg_t data)
{
1000aafa:	b580      	push	{r7, lr}
1000aafc:	b084      	sub	sp, #16
1000aafe:	af00      	add	r7, sp, #0
1000ab00:	6078      	str	r0, [r7, #4]
1000ab02:	000a      	movs	r2, r1
1000ab04:	1cbb      	adds	r3, r7, #2
1000ab06:	801a      	strh	r2, [r3, #0]
	uint16_t tmp;
	I2C_CRITICAL_SECTION_ENTER();
	tmp = ((I2c *)hw)->I2C_CLK_DIVIDER.reg;
1000ab08:	230e      	movs	r3, #14
1000ab0a:	18fb      	adds	r3, r7, r3
1000ab0c:	687a      	ldr	r2, [r7, #4]
1000ab0e:	8b12      	ldrh	r2, [r2, #24]
1000ab10:	801a      	strh	r2, [r3, #0]
	tmp &= ~I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO_Msk;
1000ab12:	230e      	movs	r3, #14
1000ab14:	18fb      	adds	r3, r7, r3
1000ab16:	2200      	movs	r2, #0
1000ab18:	801a      	strh	r2, [r3, #0]
	tmp |= I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(data);
1000ab1a:	230e      	movs	r3, #14
1000ab1c:	18fb      	adds	r3, r7, r3
1000ab1e:	220e      	movs	r2, #14
1000ab20:	18b9      	adds	r1, r7, r2
1000ab22:	1cba      	adds	r2, r7, #2
1000ab24:	8809      	ldrh	r1, [r1, #0]
1000ab26:	8812      	ldrh	r2, [r2, #0]
1000ab28:	430a      	orrs	r2, r1
1000ab2a:	801a      	strh	r2, [r3, #0]
	((I2c *)hw)->I2C_CLK_DIVIDER.reg = tmp;
1000ab2c:	687b      	ldr	r3, [r7, #4]
1000ab2e:	220e      	movs	r2, #14
1000ab30:	18ba      	adds	r2, r7, r2
1000ab32:	8812      	ldrh	r2, [r2, #0]
1000ab34:	831a      	strh	r2, [r3, #24]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000ab36:	46c0      	nop			; (mov r8, r8)
1000ab38:	46bd      	mov	sp, r7
1000ab3a:	b004      	add	sp, #16
1000ab3c:	bd80      	pop	{r7, pc}

1000ab3e <hri_i2c_set_MASTER_MODE_MASTER_ENABLE_bit>:
{
	return ((I2c *)hw)->I2C_CLK_DIVIDER.reg;
}

static inline void hri_i2c_set_MASTER_MODE_MASTER_ENABLE_bit(const void *const hw)
{
1000ab3e:	b580      	push	{r7, lr}
1000ab40:	b082      	sub	sp, #8
1000ab42:	af00      	add	r7, sp, #0
1000ab44:	6078      	str	r0, [r7, #4]
	I2C_CRITICAL_SECTION_ENTER();
	((I2c *)hw)->I2C_MASTER_MODE.reg |= I2C_MASTER_MODE_MASTER_ENABLE;
1000ab46:	687b      	ldr	r3, [r7, #4]
1000ab48:	7f1b      	ldrb	r3, [r3, #28]
1000ab4a:	b2db      	uxtb	r3, r3
1000ab4c:	2201      	movs	r2, #1
1000ab4e:	4313      	orrs	r3, r2
1000ab50:	b2da      	uxtb	r2, r3
1000ab52:	687b      	ldr	r3, [r7, #4]
1000ab54:	771a      	strb	r2, [r3, #28]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000ab56:	46c0      	nop			; (mov r8, r8)
1000ab58:	46bd      	mov	sp, r7
1000ab5a:	b002      	add	sp, #8
1000ab5c:	bd80      	pop	{r7, pc}

1000ab5e <hri_i2c_set_ONBUS_ONBUS_ENABLE_bit>:
{
	return ((I2c *)hw)->I2C_MASTER_MODE.reg;
}

static inline void hri_i2c_set_ONBUS_ONBUS_ENABLE_bit(const void *const hw)
{
1000ab5e:	b580      	push	{r7, lr}
1000ab60:	b082      	sub	sp, #8
1000ab62:	af00      	add	r7, sp, #0
1000ab64:	6078      	str	r0, [r7, #4]
	I2C_CRITICAL_SECTION_ENTER();
	((I2c *)hw)->I2C_ONBUS.reg |= I2C_ONBUS_ONBUS_ENABLE;
1000ab66:	687b      	ldr	r3, [r7, #4]
1000ab68:	2220      	movs	r2, #32
1000ab6a:	5c9b      	ldrb	r3, [r3, r2]
1000ab6c:	b2db      	uxtb	r3, r3
1000ab6e:	2201      	movs	r2, #1
1000ab70:	4313      	orrs	r3, r2
1000ab72:	b2d9      	uxtb	r1, r3
1000ab74:	687b      	ldr	r3, [r7, #4]
1000ab76:	2220      	movs	r2, #32
1000ab78:	5499      	strb	r1, [r3, r2]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000ab7a:	46c0      	nop			; (mov r8, r8)
1000ab7c:	46bd      	mov	sp, r7
1000ab7e:	b002      	add	sp, #8
1000ab80:	bd80      	pop	{r7, pc}

1000ab82 <hri_i2c_clear_ONBUS_ONBUS_ENABLE_bit>:
	((I2c *)hw)->I2C_ONBUS.reg = tmp;
	I2C_CRITICAL_SECTION_LEAVE();
}

static inline void hri_i2c_clear_ONBUS_ONBUS_ENABLE_bit(const void *const hw)
{
1000ab82:	b580      	push	{r7, lr}
1000ab84:	b082      	sub	sp, #8
1000ab86:	af00      	add	r7, sp, #0
1000ab88:	6078      	str	r0, [r7, #4]
	I2C_CRITICAL_SECTION_ENTER();
	((I2c *)hw)->I2C_ONBUS.reg &= ~I2C_ONBUS_ONBUS_ENABLE;
1000ab8a:	687b      	ldr	r3, [r7, #4]
1000ab8c:	2220      	movs	r2, #32
1000ab8e:	5c9b      	ldrb	r3, [r3, r2]
1000ab90:	b2db      	uxtb	r3, r3
1000ab92:	2201      	movs	r2, #1
1000ab94:	4393      	bics	r3, r2
1000ab96:	b2d9      	uxtb	r1, r3
1000ab98:	687b      	ldr	r3, [r7, #4]
1000ab9a:	2220      	movs	r2, #32
1000ab9c:	5499      	strb	r1, [r3, r2]
	I2C_CRITICAL_SECTION_LEAVE();
}
1000ab9e:	46c0      	nop			; (mov r8, r8)
1000aba0:	46bd      	mov	sp, r7
1000aba2:	b002      	add	sp, #8
1000aba4:	bd80      	pop	{r7, pc}

1000aba6 <hri_i2c_read_RECEIVE_DATA_RX_BYTE_bf>:
{
	return (((I2c *)hw)->RECEIVE_DATA.reg & I2C_RECEIVE_DATA_RX_BYTE(mask)) >> I2C_RECEIVE_DATA_RX_BYTE_Pos;
}

static inline hri_i2c_receive_data_reg_t hri_i2c_read_RECEIVE_DATA_RX_BYTE_bf(const void *const hw)
{
1000aba6:	b580      	push	{r7, lr}
1000aba8:	b082      	sub	sp, #8
1000abaa:	af00      	add	r7, sp, #0
1000abac:	6078      	str	r0, [r7, #4]
	return (((I2c *)hw)->RECEIVE_DATA.reg & I2C_RECEIVE_DATA_RX_BYTE_Msk) >> I2C_RECEIVE_DATA_RX_BYTE_Pos;
1000abae:	687b      	ldr	r3, [r7, #4]
1000abb0:	791b      	ldrb	r3, [r3, #4]
1000abb2:	b2db      	uxtb	r3, r3
}
1000abb4:	0018      	movs	r0, r3
1000abb6:	46bd      	mov	sp, r7
1000abb8:	b002      	add	sp, #8
1000abba:	bd80      	pop	{r7, pc}

1000abbc <hri_i2c_get_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_bit>:
{
	return ((I2c *)hw)->RECEIVE_DATA.reg;
}

static inline bool hri_i2c_get_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_bit(const void *const hw)
{
1000abbc:	b580      	push	{r7, lr}
1000abbe:	b082      	sub	sp, #8
1000abc0:	af00      	add	r7, sp, #0
1000abc2:	6078      	str	r0, [r7, #4]
	return (((I2c *)hw)->TRANSMIT_STATUS.reg & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk)
1000abc4:	687b      	ldr	r3, [r7, #4]
1000abc6:	7a1b      	ldrb	r3, [r3, #8]
1000abc8:	b2db      	uxtb	r3, r3
	       >> I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Pos;
1000abca:	001a      	movs	r2, r3
1000abcc:	2301      	movs	r3, #1
1000abce:	4013      	ands	r3, r2
1000abd0:	1e5a      	subs	r2, r3, #1
1000abd2:	4193      	sbcs	r3, r2
1000abd4:	b2db      	uxtb	r3, r3
}
1000abd6:	0018      	movs	r0, r3
1000abd8:	46bd      	mov	sp, r7
1000abda:	b002      	add	sp, #8
1000abdc:	bd80      	pop	{r7, pc}

1000abde <hri_i2c_get_TRANSMIT_STATUS_TX_FIFO_EMPTY_bit>:
	return (((I2c *)hw)->TRANSMIT_STATUS.reg & I2C_TRANSMIT_STATUS_TX_FIFO_0P75_EMPTY_Msk)
	       >> I2C_TRANSMIT_STATUS_TX_FIFO_0P75_EMPTY_Pos;
}

static inline bool hri_i2c_get_TRANSMIT_STATUS_TX_FIFO_EMPTY_bit(const void *const hw)
{
1000abde:	b580      	push	{r7, lr}
1000abe0:	b082      	sub	sp, #8
1000abe2:	af00      	add	r7, sp, #0
1000abe4:	6078      	str	r0, [r7, #4]
	return (((I2c *)hw)->TRANSMIT_STATUS.reg & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY_Msk)
1000abe6:	687b      	ldr	r3, [r7, #4]
1000abe8:	7a1b      	ldrb	r3, [r3, #8]
1000abea:	b2db      	uxtb	r3, r3
	       >> I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY_Pos;
1000abec:	091b      	lsrs	r3, r3, #4
1000abee:	2201      	movs	r2, #1
1000abf0:	4013      	ands	r3, r2
1000abf2:	1e5a      	subs	r2, r3, #1
1000abf4:	4193      	sbcs	r3, r2
1000abf6:	b2db      	uxtb	r3, r3
}
1000abf8:	0018      	movs	r0, r3
1000abfa:	46bd      	mov	sp, r7
1000abfc:	b002      	add	sp, #8
1000abfe:	bd80      	pop	{r7, pc}

1000ac00 <hri_i2c_get_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY_bit>:
{
	return ((I2c *)hw)->TRANSMIT_STATUS.reg;
}

static inline bool hri_i2c_get_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY_bit(const void *const hw)
{
1000ac00:	b580      	push	{r7, lr}
1000ac02:	b082      	sub	sp, #8
1000ac04:	af00      	add	r7, sp, #0
1000ac06:	6078      	str	r0, [r7, #4]
	return (((I2c *)hw)->RECEIVE_STATUS.reg & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY_Msk)
1000ac08:	687b      	ldr	r3, [r7, #4]
1000ac0a:	7b1b      	ldrb	r3, [r3, #12]
1000ac0c:	b2db      	uxtb	r3, r3
	       >> I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY_Pos;
1000ac0e:	001a      	movs	r2, r3
1000ac10:	2301      	movs	r3, #1
1000ac12:	4013      	ands	r3, r2
1000ac14:	1e5a      	subs	r2, r3, #1
1000ac16:	4193      	sbcs	r3, r2
1000ac18:	b2db      	uxtb	r3, r3
}
1000ac1a:	0018      	movs	r0, r3
1000ac1c:	46bd      	mov	sp, r7
1000ac1e:	b002      	add	sp, #8
1000ac20:	bd80      	pop	{r7, pc}

1000ac22 <hri_i2c_get_STATUS_I2C_ACTIVE_bit>:
{
	return ((I2c *)hw)->RECEIVE_STATUS.reg;
}

static inline bool hri_i2c_get_STATUS_I2C_ACTIVE_bit(const void *const hw)
{
1000ac22:	b580      	push	{r7, lr}
1000ac24:	b082      	sub	sp, #8
1000ac26:	af00      	add	r7, sp, #0
1000ac28:	6078      	str	r0, [r7, #4]
	return (((I2c *)hw)->I2C_STATUS.reg & I2C_STATUS_I2C_ACTIVE) >> I2C_STATUS_I2C_ACTIVE_Pos;
1000ac2a:	687b      	ldr	r3, [r7, #4]
1000ac2c:	2228      	movs	r2, #40	; 0x28
1000ac2e:	5c9b      	ldrb	r3, [r3, r2]
1000ac30:	b2db      	uxtb	r3, r3
1000ac32:	001a      	movs	r2, r3
1000ac34:	2301      	movs	r3, #1
1000ac36:	4013      	ands	r3, r2
1000ac38:	1e5a      	subs	r2, r3, #1
1000ac3a:	4193      	sbcs	r3, r2
1000ac3c:	b2db      	uxtb	r3, r3
}
1000ac3e:	0018      	movs	r0, r3
1000ac40:	46bd      	mov	sp, r7
1000ac42:	b002      	add	sp, #8
1000ac44:	bd80      	pop	{r7, pc}
	...

1000ac48 <_i2c_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of hardware instance
 */
static uint8_t _i2c_get_hardware_index(const void *const hw)
{
1000ac48:	b580      	push	{r7, lr}
1000ac4a:	b082      	sub	sp, #8
1000ac4c:	af00      	add	r7, sp, #0
1000ac4e:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)I2C0) >> 10;
1000ac50:	687b      	ldr	r3, [r7, #4]
1000ac52:	4a04      	ldr	r2, [pc, #16]	; (1000ac64 <_i2c_get_hardware_index+0x1c>)
1000ac54:	4694      	mov	ip, r2
1000ac56:	4463      	add	r3, ip
1000ac58:	0a9b      	lsrs	r3, r3, #10
1000ac5a:	b2db      	uxtb	r3, r3
}
1000ac5c:	0018      	movs	r0, r3
1000ac5e:	46bd      	mov	sp, r7
1000ac60:	b002      	add	sp, #8
1000ac62:	bd80      	pop	{r7, pc}
1000ac64:	bfffd000 	.word	0xbfffd000

1000ac68 <_get_m_i2c_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given i2c hardware instance
 */
static uint8_t _get_m_i2c_index(const void *const hw)
{
1000ac68:	b590      	push	{r4, r7, lr}
1000ac6a:	b085      	sub	sp, #20
1000ac6c:	af00      	add	r7, sp, #0
1000ac6e:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
1000ac70:	687b      	ldr	r3, [r7, #4]
1000ac72:	1e5a      	subs	r2, r3, #1
1000ac74:	4193      	sbcs	r3, r2
1000ac76:	b2db      	uxtb	r3, r3
1000ac78:	4918      	ldr	r1, [pc, #96]	; (1000acdc <_get_m_i2c_index+0x74>)
1000ac7a:	2283      	movs	r2, #131	; 0x83
1000ac7c:	0018      	movs	r0, r3
1000ac7e:	4b18      	ldr	r3, [pc, #96]	; (1000ace0 <_get_m_i2c_index+0x78>)
1000ac80:	4798      	blx	r3

	uint8_t offset = _i2c_get_hardware_index(hw);
1000ac82:	230e      	movs	r3, #14
1000ac84:	18fc      	adds	r4, r7, r3
1000ac86:	687b      	ldr	r3, [r7, #4]
1000ac88:	0018      	movs	r0, r3
1000ac8a:	4b16      	ldr	r3, [pc, #88]	; (1000ace4 <_get_m_i2c_index+0x7c>)
1000ac8c:	4798      	blx	r3
1000ac8e:	0003      	movs	r3, r0
1000ac90:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
1000ac92:	230f      	movs	r3, #15
1000ac94:	18fb      	adds	r3, r7, r3
1000ac96:	2200      	movs	r2, #0
1000ac98:	701a      	strb	r2, [r3, #0]
1000ac9a:	e015      	b.n	1000acc8 <_get_m_i2c_index+0x60>
		if (_i2cms[i].number == offset) {
1000ac9c:	230f      	movs	r3, #15
1000ac9e:	18fb      	adds	r3, r7, r3
1000aca0:	781a      	ldrb	r2, [r3, #0]
1000aca2:	4b11      	ldr	r3, [pc, #68]	; (1000ace8 <_get_m_i2c_index+0x80>)
1000aca4:	00d2      	lsls	r2, r2, #3
1000aca6:	5cd3      	ldrb	r3, [r2, r3]
1000aca8:	220e      	movs	r2, #14
1000acaa:	18ba      	adds	r2, r7, r2
1000acac:	7812      	ldrb	r2, [r2, #0]
1000acae:	429a      	cmp	r2, r3
1000acb0:	d103      	bne.n	1000acba <_get_m_i2c_index+0x52>
			return i;
1000acb2:	230f      	movs	r3, #15
1000acb4:	18fb      	adds	r3, r7, r3
1000acb6:	781b      	ldrb	r3, [r3, #0]
1000acb8:	e00c      	b.n	1000acd4 <_get_m_i2c_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
1000acba:	230f      	movs	r3, #15
1000acbc:	18fb      	adds	r3, r7, r3
1000acbe:	781a      	ldrb	r2, [r3, #0]
1000acc0:	230f      	movs	r3, #15
1000acc2:	18fb      	adds	r3, r7, r3
1000acc4:	3201      	adds	r2, #1
1000acc6:	701a      	strb	r2, [r3, #0]
1000acc8:	230f      	movs	r3, #15
1000acca:	18fb      	adds	r3, r7, r3
1000accc:	781b      	ldrb	r3, [r3, #0]
1000acce:	2b00      	cmp	r3, #0
1000acd0:	d0e4      	beq.n	1000ac9c <_get_m_i2c_index+0x34>
		}
	}

	return 0;
1000acd2:	2300      	movs	r3, #0
}
1000acd4:	0018      	movs	r0, r3
1000acd6:	46bd      	mov	sp, r7
1000acd8:	b005      	add	sp, #20
1000acda:	bd90      	pop	{r4, r7, pc}
1000acdc:	1000ff1c 	.word	0x1000ff1c
1000ace0:	1000a5e1 	.word	0x1000a5e1
1000ace4:	1000ac49 	.word	0x1000ac49
1000ace8:	1000ff14 	.word	0x1000ff14

1000acec <_i2c_wait_for_idle>:
 * \return The status of I2C bus
 * \retval ERR_NONE I2C module is in idle state
 * \retval ERR_TIMEOUT I2C bus timeout
 */
static int8_t _i2c_wait_for_idle(const void *const hw)
{
1000acec:	b580      	push	{r7, lr}
1000acee:	b084      	sub	sp, #16
1000acf0:	af00      	add	r7, sp, #0
1000acf2:	6078      	str	r0, [r7, #4]
	int timeout = 65535;
1000acf4:	4b0b      	ldr	r3, [pc, #44]	; (1000ad24 <_i2c_wait_for_idle+0x38>)
1000acf6:	60fb      	str	r3, [r7, #12]

	while (hri_i2c_get_STATUS_I2C_ACTIVE_bit(hw)) {
1000acf8:	e008      	b.n	1000ad0c <_i2c_wait_for_idle+0x20>
		timeout--;
1000acfa:	68fb      	ldr	r3, [r7, #12]
1000acfc:	3b01      	subs	r3, #1
1000acfe:	60fb      	str	r3, [r7, #12]
		if (timeout <= 0) {
1000ad00:	68fb      	ldr	r3, [r7, #12]
1000ad02:	2b00      	cmp	r3, #0
1000ad04:	dc02      	bgt.n	1000ad0c <_i2c_wait_for_idle+0x20>
			return ERR_TIMEOUT;
1000ad06:	2308      	movs	r3, #8
1000ad08:	425b      	negs	r3, r3
1000ad0a:	e006      	b.n	1000ad1a <_i2c_wait_for_idle+0x2e>
	while (hri_i2c_get_STATUS_I2C_ACTIVE_bit(hw)) {
1000ad0c:	687b      	ldr	r3, [r7, #4]
1000ad0e:	0018      	movs	r0, r3
1000ad10:	4b05      	ldr	r3, [pc, #20]	; (1000ad28 <_i2c_wait_for_idle+0x3c>)
1000ad12:	4798      	blx	r3
1000ad14:	1e03      	subs	r3, r0, #0
1000ad16:	d1f0      	bne.n	1000acfa <_i2c_wait_for_idle+0xe>
		}
	}

	return ERR_NONE;
1000ad18:	2300      	movs	r3, #0
}
1000ad1a:	0018      	movs	r0, r3
1000ad1c:	46bd      	mov	sp, r7
1000ad1e:	b004      	add	sp, #16
1000ad20:	bd80      	pop	{r7, pc}
1000ad22:	46c0      	nop			; (mov r8, r8)
1000ad24:	0000ffff 	.word	0x0000ffff
1000ad28:	1000ac23 	.word	0x1000ac23

1000ad2c <_i2c_send_start>:
 * \internal Send the i2c start condition
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _i2c_send_start(void *const hw)
{
1000ad2c:	b580      	push	{r7, lr}
1000ad2e:	b082      	sub	sp, #8
1000ad30:	af00      	add	r7, sp, #0
1000ad32:	6078      	str	r0, [r7, #4]
	hri_i2c_set_ONBUS_ONBUS_ENABLE_bit(hw);
1000ad34:	687b      	ldr	r3, [r7, #4]
1000ad36:	0018      	movs	r0, r3
1000ad38:	4b02      	ldr	r3, [pc, #8]	; (1000ad44 <_i2c_send_start+0x18>)
1000ad3a:	4798      	blx	r3
}
1000ad3c:	46c0      	nop			; (mov r8, r8)
1000ad3e:	46bd      	mov	sp, r7
1000ad40:	b002      	add	sp, #8
1000ad42:	bd80      	pop	{r7, pc}
1000ad44:	1000ab5f 	.word	0x1000ab5f

1000ad48 <_i2c_send_stop>:
 * \internal Send the i2c stop condition
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _i2c_send_stop(void *const hw)
{
1000ad48:	b580      	push	{r7, lr}
1000ad4a:	b082      	sub	sp, #8
1000ad4c:	af00      	add	r7, sp, #0
1000ad4e:	6078      	str	r0, [r7, #4]
	hri_i2c_clear_ONBUS_ONBUS_ENABLE_bit(hw);
1000ad50:	687b      	ldr	r3, [r7, #4]
1000ad52:	0018      	movs	r0, r3
1000ad54:	4b02      	ldr	r3, [pc, #8]	; (1000ad60 <_i2c_send_stop+0x18>)
1000ad56:	4798      	blx	r3
}
1000ad58:	46c0      	nop			; (mov r8, r8)
1000ad5a:	46bd      	mov	sp, r7
1000ad5c:	b002      	add	sp, #8
1000ad5e:	bd80      	pop	{r7, pc}
1000ad60:	1000ab83 	.word	0x1000ab83

1000ad64 <_i2c_m_sync_enable>:

int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
1000ad64:	b580      	push	{r7, lr}
1000ad66:	b082      	sub	sp, #8
1000ad68:	af00      	add	r7, sp, #0
1000ad6a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev && i2c_dev->hw);
1000ad6c:	687b      	ldr	r3, [r7, #4]
1000ad6e:	2b00      	cmp	r3, #0
1000ad70:	d005      	beq.n	1000ad7e <_i2c_m_sync_enable+0x1a>
1000ad72:	687b      	ldr	r3, [r7, #4]
1000ad74:	691b      	ldr	r3, [r3, #16]
1000ad76:	2b00      	cmp	r3, #0
1000ad78:	d001      	beq.n	1000ad7e <_i2c_m_sync_enable+0x1a>
1000ad7a:	2301      	movs	r3, #1
1000ad7c:	e000      	b.n	1000ad80 <_i2c_m_sync_enable+0x1c>
1000ad7e:	2300      	movs	r3, #0
1000ad80:	1c1a      	adds	r2, r3, #0
1000ad82:	2301      	movs	r3, #1
1000ad84:	4013      	ands	r3, r2
1000ad86:	b2db      	uxtb	r3, r3
1000ad88:	4907      	ldr	r1, [pc, #28]	; (1000ada8 <_i2c_m_sync_enable+0x44>)
1000ad8a:	22c5      	movs	r2, #197	; 0xc5
1000ad8c:	0018      	movs	r0, r3
1000ad8e:	4b07      	ldr	r3, [pc, #28]	; (1000adac <_i2c_m_sync_enable+0x48>)
1000ad90:	4798      	blx	r3

	hri_i2c_set_MODULE_ENABLE_ENABLE_bit(i2c_dev->hw);
1000ad92:	687b      	ldr	r3, [r7, #4]
1000ad94:	691b      	ldr	r3, [r3, #16]
1000ad96:	0018      	movs	r0, r3
1000ad98:	4b05      	ldr	r3, [pc, #20]	; (1000adb0 <_i2c_m_sync_enable+0x4c>)
1000ad9a:	4798      	blx	r3

	return ERR_NONE;
1000ad9c:	2300      	movs	r3, #0
}
1000ad9e:	0018      	movs	r0, r3
1000ada0:	46bd      	mov	sp, r7
1000ada2:	b002      	add	sp, #8
1000ada4:	bd80      	pop	{r7, pc}
1000ada6:	46c0      	nop			; (mov r8, r8)
1000ada8:	1000ff1c 	.word	0x1000ff1c
1000adac:	1000a5e1 	.word	0x1000a5e1
1000adb0:	1000aaa5 	.word	0x1000aaa5

1000adb4 <_i2c_send_address>:
 *
 * \return The status of I2C bus
 * \retval ERR_NONE Bus response status OK
 */
static int32_t _i2c_send_address(struct _i2c_m_msg *msg, void *const hw)
{
1000adb4:	b580      	push	{r7, lr}
1000adb6:	b082      	sub	sp, #8
1000adb8:	af00      	add	r7, sp, #0
1000adba:	6078      	str	r0, [r7, #4]
1000adbc:	6039      	str	r1, [r7, #0]
	ASSERT(msg && hw);
1000adbe:	687b      	ldr	r3, [r7, #4]
1000adc0:	2b00      	cmp	r3, #0
1000adc2:	d004      	beq.n	1000adce <_i2c_send_address+0x1a>
1000adc4:	683b      	ldr	r3, [r7, #0]
1000adc6:	2b00      	cmp	r3, #0
1000adc8:	d001      	beq.n	1000adce <_i2c_send_address+0x1a>
1000adca:	2301      	movs	r3, #1
1000adcc:	e000      	b.n	1000add0 <_i2c_send_address+0x1c>
1000adce:	2300      	movs	r3, #0
1000add0:	1c1a      	adds	r2, r3, #0
1000add2:	2301      	movs	r3, #1
1000add4:	4013      	ands	r3, r2
1000add6:	b2db      	uxtb	r3, r3
1000add8:	4910      	ldr	r1, [pc, #64]	; (1000ae1c <_i2c_send_address+0x68>)
1000adda:	22f2      	movs	r2, #242	; 0xf2
1000addc:	0018      	movs	r0, r3
1000adde:	4b10      	ldr	r3, [pc, #64]	; (1000ae20 <_i2c_send_address+0x6c>)
1000ade0:	4798      	blx	r3

	hri_i2c_write_TRANSMIT_DATA_reg(hw,
	                                I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | ((msg->addr & SEVEN_ADDR_MASK) << 1)
1000ade2:	687b      	ldr	r3, [r7, #4]
1000ade4:	881b      	ldrh	r3, [r3, #0]
1000ade6:	18db      	adds	r3, r3, r3
1000ade8:	b29b      	uxth	r3, r3
1000adea:	22ff      	movs	r2, #255	; 0xff
1000adec:	4013      	ands	r3, r2
1000adee:	b29a      	uxth	r2, r3
	                                    | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)); 
1000adf0:	687b      	ldr	r3, [r7, #4]
1000adf2:	885b      	ldrh	r3, [r3, #2]
1000adf4:	b29b      	uxth	r3, r3
1000adf6:	2101      	movs	r1, #1
1000adf8:	400b      	ands	r3, r1
1000adfa:	b29b      	uxth	r3, r3
1000adfc:	4313      	orrs	r3, r2
1000adfe:	b29b      	uxth	r3, r3
	hri_i2c_write_TRANSMIT_DATA_reg(hw,
1000ae00:	2280      	movs	r2, #128	; 0x80
1000ae02:	0052      	lsls	r2, r2, #1
1000ae04:	4313      	orrs	r3, r2
1000ae06:	b29a      	uxth	r2, r3
1000ae08:	683b      	ldr	r3, [r7, #0]
1000ae0a:	0011      	movs	r1, r2
1000ae0c:	0018      	movs	r0, r3
1000ae0e:	4b05      	ldr	r3, [pc, #20]	; (1000ae24 <_i2c_send_address+0x70>)
1000ae10:	4798      	blx	r3

	return ERR_NONE;
1000ae12:	2300      	movs	r3, #0
}
1000ae14:	0018      	movs	r0, r3
1000ae16:	46bd      	mov	sp, r7
1000ae18:	b002      	add	sp, #8
1000ae1a:	bd80      	pop	{r7, pc}
1000ae1c:	1000ff1c 	.word	0x1000ff1c
1000ae20:	1000a5e1 	.word	0x1000a5e1
1000ae24:	1000aa15 	.word	0x1000aa15

1000ae28 <_i2c_m_sync_init_impl>:
 * \return The status of initialization
 * \retval ERR_NONE I2C module initialed successfull
 * \retval ERR_DENIED Failed with I2C module is already enable
 */
static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
1000ae28:	b590      	push	{r4, r7, lr}
1000ae2a:	b085      	sub	sp, #20
1000ae2c:	af00      	add	r7, sp, #0
1000ae2e:	6078      	str	r0, [r7, #4]
1000ae30:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_m_i2c_index(hw);
1000ae32:	230f      	movs	r3, #15
1000ae34:	18fc      	adds	r4, r7, r3
1000ae36:	683b      	ldr	r3, [r7, #0]
1000ae38:	0018      	movs	r0, r3
1000ae3a:	4b22      	ldr	r3, [pc, #136]	; (1000aec4 <_i2c_m_sync_init_impl+0x9c>)
1000ae3c:	4798      	blx	r3
1000ae3e:	0003      	movs	r3, r0
1000ae40:	7023      	strb	r3, [r4, #0]

	ASSERT(service && hw);
1000ae42:	687b      	ldr	r3, [r7, #4]
1000ae44:	2b00      	cmp	r3, #0
1000ae46:	d004      	beq.n	1000ae52 <_i2c_m_sync_init_impl+0x2a>
1000ae48:	683b      	ldr	r3, [r7, #0]
1000ae4a:	2b00      	cmp	r3, #0
1000ae4c:	d001      	beq.n	1000ae52 <_i2c_m_sync_init_impl+0x2a>
1000ae4e:	2301      	movs	r3, #1
1000ae50:	e000      	b.n	1000ae54 <_i2c_m_sync_init_impl+0x2c>
1000ae52:	2300      	movs	r3, #0
1000ae54:	1c1a      	adds	r2, r3, #0
1000ae56:	2301      	movs	r3, #1
1000ae58:	4013      	ands	r3, r2
1000ae5a:	b2d8      	uxtb	r0, r3
1000ae5c:	230a      	movs	r3, #10
1000ae5e:	33ff      	adds	r3, #255	; 0xff
1000ae60:	001a      	movs	r2, r3
1000ae62:	4b19      	ldr	r3, [pc, #100]	; (1000aec8 <_i2c_m_sync_init_impl+0xa0>)
1000ae64:	0019      	movs	r1, r3
1000ae66:	4b19      	ldr	r3, [pc, #100]	; (1000aecc <_i2c_m_sync_init_impl+0xa4>)
1000ae68:	4798      	blx	r3

	if (hri_i2c_get_MODULE_ENABLE_ENABLE_bit(hw)) {
1000ae6a:	683b      	ldr	r3, [r7, #0]
1000ae6c:	0018      	movs	r0, r3
1000ae6e:	4b18      	ldr	r3, [pc, #96]	; (1000aed0 <_i2c_m_sync_init_impl+0xa8>)
1000ae70:	4798      	blx	r3
1000ae72:	1e03      	subs	r3, r0, #0
1000ae74:	d002      	beq.n	1000ae7c <_i2c_m_sync_init_impl+0x54>
		return ERR_DENIED;
1000ae76:	2311      	movs	r3, #17
1000ae78:	425b      	negs	r3, r3
1000ae7a:	e01e      	b.n	1000aeba <_i2c_m_sync_init_impl+0x92>
	}

	/* Set clock. */
	hri_i2c_write_CLOCK_SOURCE_SELECT_CLOCK_bf(hw, _i2cms[i].prescaler);
1000ae7c:	230f      	movs	r3, #15
1000ae7e:	18fb      	adds	r3, r7, r3
1000ae80:	781b      	ldrb	r3, [r3, #0]
1000ae82:	4a14      	ldr	r2, [pc, #80]	; (1000aed4 <_i2c_m_sync_init_impl+0xac>)
1000ae84:	00db      	lsls	r3, r3, #3
1000ae86:	18d3      	adds	r3, r2, r3
1000ae88:	3301      	adds	r3, #1
1000ae8a:	781a      	ldrb	r2, [r3, #0]
1000ae8c:	683b      	ldr	r3, [r7, #0]
1000ae8e:	0011      	movs	r1, r2
1000ae90:	0018      	movs	r0, r3
1000ae92:	4b11      	ldr	r3, [pc, #68]	; (1000aed8 <_i2c_m_sync_init_impl+0xb0>)
1000ae94:	4798      	blx	r3
	hri_i2c_write_CLK_DIVIDER_I2C_DIVIDE_RATIO_bf(hw, _i2cms[i].clock_divider);
1000ae96:	230f      	movs	r3, #15
1000ae98:	18fb      	adds	r3, r7, r3
1000ae9a:	781b      	ldrb	r3, [r3, #0]
1000ae9c:	4a0d      	ldr	r2, [pc, #52]	; (1000aed4 <_i2c_m_sync_init_impl+0xac>)
1000ae9e:	00db      	lsls	r3, r3, #3
1000aea0:	18d3      	adds	r3, r2, r3
1000aea2:	3302      	adds	r3, #2
1000aea4:	881a      	ldrh	r2, [r3, #0]
1000aea6:	683b      	ldr	r3, [r7, #0]
1000aea8:	0011      	movs	r1, r2
1000aeaa:	0018      	movs	r0, r3
1000aeac:	4b0b      	ldr	r3, [pc, #44]	; (1000aedc <_i2c_m_sync_init_impl+0xb4>)
1000aeae:	4798      	blx	r3
	/* Enable master mode. */
	hri_i2c_set_MASTER_MODE_MASTER_ENABLE_bit(hw);
1000aeb0:	683b      	ldr	r3, [r7, #0]
1000aeb2:	0018      	movs	r0, r3
1000aeb4:	4b0a      	ldr	r3, [pc, #40]	; (1000aee0 <_i2c_m_sync_init_impl+0xb8>)
1000aeb6:	4798      	blx	r3

	return ERR_NONE;
1000aeb8:	2300      	movs	r3, #0
}
1000aeba:	0018      	movs	r0, r3
1000aebc:	46bd      	mov	sp, r7
1000aebe:	b005      	add	sp, #20
1000aec0:	bd90      	pop	{r4, r7, pc}
1000aec2:	46c0      	nop			; (mov r8, r8)
1000aec4:	1000ac69 	.word	0x1000ac69
1000aec8:	1000ff1c 	.word	0x1000ff1c
1000aecc:	1000a5e1 	.word	0x1000a5e1
1000aed0:	1000aac5 	.word	0x1000aac5
1000aed4:	1000ff14 	.word	0x1000ff14
1000aed8:	1000aa53 	.word	0x1000aa53
1000aedc:	1000aafb 	.word	0x1000aafb
1000aee0:	1000ab3f 	.word	0x1000ab3f

1000aee4 <_i2c_m_sync_transfer>:

	return 0;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
1000aee4:	b590      	push	{r4, r7, lr}
1000aee6:	b087      	sub	sp, #28
1000aee8:	af00      	add	r7, sp, #0
1000aeea:	6078      	str	r0, [r7, #4]
1000aeec:	6039      	str	r1, [r7, #0]
	uint16_t counter = 0;
1000aeee:	2316      	movs	r3, #22
1000aef0:	18fb      	adds	r3, r7, r3
1000aef2:	2200      	movs	r2, #0
1000aef4:	801a      	strh	r2, [r3, #0]
	int      ret;
	void *   hw = i2c_dev->hw;
1000aef6:	687b      	ldr	r3, [r7, #4]
1000aef8:	691b      	ldr	r3, [r3, #16]
1000aefa:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev && i2c_dev->hw && msg);
1000aefc:	687b      	ldr	r3, [r7, #4]
1000aefe:	2b00      	cmp	r3, #0
1000af00:	d008      	beq.n	1000af14 <_i2c_m_sync_transfer+0x30>
1000af02:	687b      	ldr	r3, [r7, #4]
1000af04:	691b      	ldr	r3, [r3, #16]
1000af06:	2b00      	cmp	r3, #0
1000af08:	d004      	beq.n	1000af14 <_i2c_m_sync_transfer+0x30>
1000af0a:	683b      	ldr	r3, [r7, #0]
1000af0c:	2b00      	cmp	r3, #0
1000af0e:	d001      	beq.n	1000af14 <_i2c_m_sync_transfer+0x30>
1000af10:	2301      	movs	r3, #1
1000af12:	e000      	b.n	1000af16 <_i2c_m_sync_transfer+0x32>
1000af14:	2300      	movs	r3, #0
1000af16:	1c1a      	adds	r2, r3, #0
1000af18:	2301      	movs	r3, #1
1000af1a:	4013      	ands	r3, r2
1000af1c:	b2d8      	uxtb	r0, r3
1000af1e:	2388      	movs	r3, #136	; 0x88
1000af20:	009a      	lsls	r2, r3, #2
1000af22:	4b58      	ldr	r3, [pc, #352]	; (1000b084 <_i2c_m_sync_transfer+0x1a0>)
1000af24:	0019      	movs	r1, r3
1000af26:	4b58      	ldr	r3, [pc, #352]	; (1000b088 <_i2c_m_sync_transfer+0x1a4>)
1000af28:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
1000af2a:	687b      	ldr	r3, [r7, #4]
1000af2c:	885b      	ldrh	r3, [r3, #2]
1000af2e:	b29b      	uxth	r3, r3
1000af30:	001a      	movs	r2, r3
1000af32:	2380      	movs	r3, #128	; 0x80
1000af34:	005b      	lsls	r3, r3, #1
1000af36:	4013      	ands	r3, r2
1000af38:	d002      	beq.n	1000af40 <_i2c_m_sync_transfer+0x5c>
		return I2C_ERR_BUSY;
1000af3a:	2306      	movs	r3, #6
1000af3c:	425b      	negs	r3, r3
1000af3e:	e09c      	b.n	1000b07a <_i2c_m_sync_transfer+0x196>
	}

	msg->flags |= I2C_M_BUSY;
1000af40:	683b      	ldr	r3, [r7, #0]
1000af42:	885b      	ldrh	r3, [r3, #2]
1000af44:	b29b      	uxth	r3, r3
1000af46:	2280      	movs	r2, #128	; 0x80
1000af48:	0052      	lsls	r2, r2, #1
1000af4a:	4313      	orrs	r3, r2
1000af4c:	b29a      	uxth	r2, r3
1000af4e:	683b      	ldr	r3, [r7, #0]
1000af50:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
1000af52:	687b      	ldr	r3, [r7, #4]
1000af54:	683a      	ldr	r2, [r7, #0]
1000af56:	ca13      	ldmia	r2!, {r0, r1, r4}
1000af58:	c313      	stmia	r3!, {r0, r1, r4}

	_i2c_wait_for_idle(hw);
1000af5a:	693b      	ldr	r3, [r7, #16]
1000af5c:	0018      	movs	r0, r3
1000af5e:	4b4b      	ldr	r3, [pc, #300]	; (1000b08c <_i2c_m_sync_transfer+0x1a8>)
1000af60:	4798      	blx	r3
	/* Flush the FIFO */
	hri_i2c_write_FLUSH_reg(hw, I2C_FLUSH_I2C_FLUSH);
1000af62:	693b      	ldr	r3, [r7, #16]
1000af64:	2101      	movs	r1, #1
1000af66:	0018      	movs	r0, r3
1000af68:	4b49      	ldr	r3, [pc, #292]	; (1000b090 <_i2c_m_sync_transfer+0x1ac>)
1000af6a:	4798      	blx	r3
	/* Enable I2C on bus (start condition). */
	_i2c_send_start(hw);
1000af6c:	693b      	ldr	r3, [r7, #16]
1000af6e:	0018      	movs	r0, r3
1000af70:	4b48      	ldr	r3, [pc, #288]	; (1000b094 <_i2c_m_sync_transfer+0x1b0>)
1000af72:	4798      	blx	r3
	/* Address I2C slave in case of Master mode enabled. */
	ret = _i2c_send_address(msg, hw);
1000af74:	693a      	ldr	r2, [r7, #16]
1000af76:	683b      	ldr	r3, [r7, #0]
1000af78:	0011      	movs	r1, r2
1000af7a:	0018      	movs	r0, r3
1000af7c:	4b46      	ldr	r3, [pc, #280]	; (1000b098 <_i2c_m_sync_transfer+0x1b4>)
1000af7e:	4798      	blx	r3
1000af80:	0003      	movs	r3, r0
1000af82:	60fb      	str	r3, [r7, #12]
	
	if (ret) {
1000af84:	68fb      	ldr	r3, [r7, #12]
1000af86:	2b00      	cmp	r3, #0
1000af88:	d009      	beq.n	1000af9e <_i2c_m_sync_transfer+0xba>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
1000af8a:	687b      	ldr	r3, [r7, #4]
1000af8c:	885b      	ldrh	r3, [r3, #2]
1000af8e:	b29b      	uxth	r3, r3
1000af90:	4a42      	ldr	r2, [pc, #264]	; (1000b09c <_i2c_m_sync_transfer+0x1b8>)
1000af92:	4013      	ands	r3, r2
1000af94:	b29a      	uxth	r2, r3
1000af96:	687b      	ldr	r3, [r7, #4]
1000af98:	805a      	strh	r2, [r3, #2]
		return ret;
1000af9a:	68fb      	ldr	r3, [r7, #12]
1000af9c:	e06d      	b.n	1000b07a <_i2c_m_sync_transfer+0x196>
	}

	if (msg->flags & I2C_M_RD) {
1000af9e:	683b      	ldr	r3, [r7, #0]
1000afa0:	885b      	ldrh	r3, [r3, #2]
1000afa2:	b29b      	uxth	r3, r3
1000afa4:	001a      	movs	r2, r3
1000afa6:	2301      	movs	r3, #1
1000afa8:	4013      	ands	r3, r2
1000afaa:	d023      	beq.n	1000aff4 <_i2c_m_sync_transfer+0x110>
		do {
			while (!hri_i2c_get_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY_bit(hw)) {
1000afac:	46c0      	nop			; (mov r8, r8)
1000afae:	693b      	ldr	r3, [r7, #16]
1000afb0:	0018      	movs	r0, r3
1000afb2:	4b3b      	ldr	r3, [pc, #236]	; (1000b0a0 <_i2c_m_sync_transfer+0x1bc>)
1000afb4:	4798      	blx	r3
1000afb6:	0003      	movs	r3, r0
1000afb8:	001a      	movs	r2, r3
1000afba:	2301      	movs	r3, #1
1000afbc:	4053      	eors	r3, r2
1000afbe:	b2db      	uxtb	r3, r3
1000afc0:	2b00      	cmp	r3, #0
1000afc2:	d1f4      	bne.n	1000afae <_i2c_m_sync_transfer+0xca>
			}
			msg->buffer[counter++] = hri_i2c_read_RECEIVE_DATA_RX_BYTE_bf(hw);
1000afc4:	683b      	ldr	r3, [r7, #0]
1000afc6:	689a      	ldr	r2, [r3, #8]
1000afc8:	2316      	movs	r3, #22
1000afca:	18fb      	adds	r3, r7, r3
1000afcc:	881b      	ldrh	r3, [r3, #0]
1000afce:	2116      	movs	r1, #22
1000afd0:	1879      	adds	r1, r7, r1
1000afd2:	1c58      	adds	r0, r3, #1
1000afd4:	8008      	strh	r0, [r1, #0]
1000afd6:	18d4      	adds	r4, r2, r3
1000afd8:	693b      	ldr	r3, [r7, #16]
1000afda:	0018      	movs	r0, r3
1000afdc:	4b31      	ldr	r3, [pc, #196]	; (1000b0a4 <_i2c_m_sync_transfer+0x1c0>)
1000afde:	4798      	blx	r3
1000afe0:	0003      	movs	r3, r0
1000afe2:	7023      	strb	r3, [r4, #0]
		} while (counter < msg->len);
1000afe4:	2316      	movs	r3, #22
1000afe6:	18fb      	adds	r3, r7, r3
1000afe8:	881a      	ldrh	r2, [r3, #0]
1000afea:	683b      	ldr	r3, [r7, #0]
1000afec:	685b      	ldr	r3, [r3, #4]
1000afee:	429a      	cmp	r2, r3
1000aff0:	dbdc      	blt.n	1000afac <_i2c_m_sync_transfer+0xc8>
1000aff2:	e02f      	b.n	1000b054 <_i2c_m_sync_transfer+0x170>
	} else {
		do {
			while (!hri_i2c_get_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_bit(hw)) {
1000aff4:	46c0      	nop			; (mov r8, r8)
1000aff6:	693b      	ldr	r3, [r7, #16]
1000aff8:	0018      	movs	r0, r3
1000affa:	4b2b      	ldr	r3, [pc, #172]	; (1000b0a8 <_i2c_m_sync_transfer+0x1c4>)
1000affc:	4798      	blx	r3
1000affe:	0003      	movs	r3, r0
1000b000:	001a      	movs	r2, r3
1000b002:	2301      	movs	r3, #1
1000b004:	4053      	eors	r3, r2
1000b006:	b2db      	uxtb	r3, r3
1000b008:	2b00      	cmp	r3, #0
1000b00a:	d1f4      	bne.n	1000aff6 <_i2c_m_sync_transfer+0x112>
			}
			hri_i2c_write_TRANSMIT_DATA_reg(hw, msg->buffer[counter++]);
1000b00c:	683b      	ldr	r3, [r7, #0]
1000b00e:	689a      	ldr	r2, [r3, #8]
1000b010:	2316      	movs	r3, #22
1000b012:	18fb      	adds	r3, r7, r3
1000b014:	881b      	ldrh	r3, [r3, #0]
1000b016:	2116      	movs	r1, #22
1000b018:	1879      	adds	r1, r7, r1
1000b01a:	1c58      	adds	r0, r3, #1
1000b01c:	8008      	strh	r0, [r1, #0]
1000b01e:	18d3      	adds	r3, r2, r3
1000b020:	781b      	ldrb	r3, [r3, #0]
1000b022:	b29a      	uxth	r2, r3
1000b024:	693b      	ldr	r3, [r7, #16]
1000b026:	0011      	movs	r1, r2
1000b028:	0018      	movs	r0, r3
1000b02a:	4b20      	ldr	r3, [pc, #128]	; (1000b0ac <_i2c_m_sync_transfer+0x1c8>)
1000b02c:	4798      	blx	r3
		} while (counter < msg->len);
1000b02e:	2316      	movs	r3, #22
1000b030:	18fb      	adds	r3, r7, r3
1000b032:	881a      	ldrh	r2, [r3, #0]
1000b034:	683b      	ldr	r3, [r7, #0]
1000b036:	685b      	ldr	r3, [r3, #4]
1000b038:	429a      	cmp	r2, r3
1000b03a:	dbdb      	blt.n	1000aff4 <_i2c_m_sync_transfer+0x110>

		while (!hri_i2c_get_TRANSMIT_STATUS_TX_FIFO_EMPTY_bit(hw)) {
1000b03c:	46c0      	nop			; (mov r8, r8)
1000b03e:	693b      	ldr	r3, [r7, #16]
1000b040:	0018      	movs	r0, r3
1000b042:	4b1b      	ldr	r3, [pc, #108]	; (1000b0b0 <_i2c_m_sync_transfer+0x1cc>)
1000b044:	4798      	blx	r3
1000b046:	0003      	movs	r3, r0
1000b048:	001a      	movs	r2, r3
1000b04a:	2301      	movs	r3, #1
1000b04c:	4053      	eors	r3, r2
1000b04e:	b2db      	uxtb	r3, r3
1000b050:	2b00      	cmp	r3, #0
1000b052:	d1f4      	bne.n	1000b03e <_i2c_m_sync_transfer+0x15a>
		}
	}

	if (msg->flags & I2C_M_STOP) {
1000b054:	683b      	ldr	r3, [r7, #0]
1000b056:	885b      	ldrh	r3, [r3, #2]
1000b058:	b29b      	uxth	r3, r3
1000b05a:	b21b      	sxth	r3, r3
1000b05c:	2b00      	cmp	r3, #0
1000b05e:	da03      	bge.n	1000b068 <_i2c_m_sync_transfer+0x184>
		_i2c_send_stop(hw);
1000b060:	693b      	ldr	r3, [r7, #16]
1000b062:	0018      	movs	r0, r3
1000b064:	4b13      	ldr	r3, [pc, #76]	; (1000b0b4 <_i2c_m_sync_transfer+0x1d0>)
1000b066:	4798      	blx	r3
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
1000b068:	687b      	ldr	r3, [r7, #4]
1000b06a:	885b      	ldrh	r3, [r3, #2]
1000b06c:	b29b      	uxth	r3, r3
1000b06e:	4a0b      	ldr	r2, [pc, #44]	; (1000b09c <_i2c_m_sync_transfer+0x1b8>)
1000b070:	4013      	ands	r3, r2
1000b072:	b29a      	uxth	r2, r3
1000b074:	687b      	ldr	r3, [r7, #4]
1000b076:	805a      	strh	r2, [r3, #2]

	return ret;
1000b078:	68fb      	ldr	r3, [r7, #12]
}
1000b07a:	0018      	movs	r0, r3
1000b07c:	46bd      	mov	sp, r7
1000b07e:	b007      	add	sp, #28
1000b080:	bd90      	pop	{r4, r7, pc}
1000b082:	46c0      	nop			; (mov r8, r8)
1000b084:	1000ff1c 	.word	0x1000ff1c
1000b088:	1000a5e1 	.word	0x1000a5e1
1000b08c:	1000aced 	.word	0x1000aced
1000b090:	1000aa33 	.word	0x1000aa33
1000b094:	1000ad2d 	.word	0x1000ad2d
1000b098:	1000adb5 	.word	0x1000adb5
1000b09c:	fffffeff 	.word	0xfffffeff
1000b0a0:	1000ac01 	.word	0x1000ac01
1000b0a4:	1000aba7 	.word	0x1000aba7
1000b0a8:	1000abbd 	.word	0x1000abbd
1000b0ac:	1000aa15 	.word	0x1000aa15
1000b0b0:	1000abdf 	.word	0x1000abdf
1000b0b4:	1000ad49 	.word	0x1000ad49

1000b0b8 <_i2c_m_sync_init>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
1000b0b8:	b580      	push	{r7, lr}
1000b0ba:	b084      	sub	sp, #16
1000b0bc:	af00      	add	r7, sp, #0
1000b0be:	6078      	str	r0, [r7, #4]
1000b0c0:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(i2c_dev && hw);
1000b0c2:	687b      	ldr	r3, [r7, #4]
1000b0c4:	2b00      	cmp	r3, #0
1000b0c6:	d004      	beq.n	1000b0d2 <_i2c_m_sync_init+0x1a>
1000b0c8:	683b      	ldr	r3, [r7, #0]
1000b0ca:	2b00      	cmp	r3, #0
1000b0cc:	d001      	beq.n	1000b0d2 <_i2c_m_sync_init+0x1a>
1000b0ce:	2301      	movs	r3, #1
1000b0d0:	e000      	b.n	1000b0d4 <_i2c_m_sync_init+0x1c>
1000b0d2:	2300      	movs	r3, #0
1000b0d4:	1c1a      	adds	r2, r3, #0
1000b0d6:	2301      	movs	r3, #1
1000b0d8:	4013      	ands	r3, r2
1000b0da:	b2db      	uxtb	r3, r3
1000b0dc:	4a0c      	ldr	r2, [pc, #48]	; (1000b110 <_i2c_m_sync_init+0x58>)
1000b0de:	490d      	ldr	r1, [pc, #52]	; (1000b114 <_i2c_m_sync_init+0x5c>)
1000b0e0:	0018      	movs	r0, r3
1000b0e2:	4b0d      	ldr	r3, [pc, #52]	; (1000b118 <_i2c_m_sync_init+0x60>)
1000b0e4:	4798      	blx	r3

	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
1000b0e6:	687b      	ldr	r3, [r7, #4]
1000b0e8:	683a      	ldr	r2, [r7, #0]
1000b0ea:	0011      	movs	r1, r2
1000b0ec:	0018      	movs	r0, r3
1000b0ee:	4b0b      	ldr	r3, [pc, #44]	; (1000b11c <_i2c_m_sync_init+0x64>)
1000b0f0:	4798      	blx	r3
1000b0f2:	0003      	movs	r3, r0
1000b0f4:	60fb      	str	r3, [r7, #12]
	if (init_status) {
1000b0f6:	68fb      	ldr	r3, [r7, #12]
1000b0f8:	2b00      	cmp	r3, #0
1000b0fa:	d001      	beq.n	1000b100 <_i2c_m_sync_init+0x48>
		return init_status;
1000b0fc:	68fb      	ldr	r3, [r7, #12]
1000b0fe:	e003      	b.n	1000b108 <_i2c_m_sync_init+0x50>
	}
	i2c_dev->hw = hw;
1000b100:	687b      	ldr	r3, [r7, #4]
1000b102:	683a      	ldr	r2, [r7, #0]
1000b104:	611a      	str	r2, [r3, #16]

	return ERR_NONE;
1000b106:	2300      	movs	r3, #0
}
1000b108:	0018      	movs	r0, r3
1000b10a:	46bd      	mov	sp, r7
1000b10c:	b004      	add	sp, #16
1000b10e:	bd80      	pop	{r7, pc}
1000b110:	00000299 	.word	0x00000299
1000b114:	1000ff1c 	.word	0x1000ff1c
1000b118:	1000a5e1 	.word	0x1000a5e1
1000b11c:	1000ae29 	.word	0x1000ae29

1000b120 <hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_BT26M_CLK_bit>:
{
1000b120:	b580      	push	{r7, lr}
1000b122:	b082      	sub	sp, #8
1000b124:	af00      	add	r7, sp, #0
1000b126:	6078      	str	r0, [r7, #4]
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK_Msk;
1000b128:	687b      	ldr	r3, [r7, #4]
1000b12a:	699b      	ldr	r3, [r3, #24]
1000b12c:	2204      	movs	r2, #4
1000b12e:	431a      	orrs	r2, r3
1000b130:	687b      	ldr	r3, [r7, #4]
1000b132:	619a      	str	r2, [r3, #24]
}
1000b134:	46c0      	nop			; (mov r8, r8)
1000b136:	46bd      	mov	sp, r7
1000b138:	b002      	add	sp, #8
1000b13a:	bd80      	pop	{r7, pc}

1000b13c <hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_ARM_LP_CLK_bit>:
{
1000b13c:	b580      	push	{r7, lr}
1000b13e:	b082      	sub	sp, #8
1000b140:	af00      	add	r7, sp, #0
1000b142:	6078      	str	r0, [r7, #4]
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg |= LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK_Msk;
1000b144:	687b      	ldr	r3, [r7, #4]
1000b146:	699b      	ldr	r3, [r3, #24]
1000b148:	2208      	movs	r2, #8
1000b14a:	431a      	orrs	r2, r3
1000b14c:	687b      	ldr	r3, [r7, #4]
1000b14e:	619a      	str	r2, [r3, #24]
}
1000b150:	46c0      	nop			; (mov r8, r8)
1000b152:	46bd      	mov	sp, r7
1000b154:	b002      	add	sp, #8
1000b156:	bd80      	pop	{r7, pc}

1000b158 <hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_LPMCU_CLK_SEL_bf>:
{
1000b158:	b580      	push	{r7, lr}
1000b15a:	b084      	sub	sp, #16
1000b15c:	af00      	add	r7, sp, #0
1000b15e:	6078      	str	r0, [r7, #4]
1000b160:	6039      	str	r1, [r7, #0]
	tmp = ((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg;
1000b162:	687b      	ldr	r3, [r7, #4]
1000b164:	699b      	ldr	r3, [r3, #24]
1000b166:	60fb      	str	r3, [r7, #12]
	tmp &= ~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
1000b168:	68fb      	ldr	r3, [r7, #12]
1000b16a:	2203      	movs	r2, #3
1000b16c:	4393      	bics	r3, r2
1000b16e:	60fb      	str	r3, [r7, #12]
	tmp |= LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(data);
1000b170:	683b      	ldr	r3, [r7, #0]
1000b172:	2203      	movs	r2, #3
1000b174:	4013      	ands	r3, r2
1000b176:	68fa      	ldr	r2, [r7, #12]
1000b178:	4313      	orrs	r3, r2
1000b17a:	60fb      	str	r3, [r7, #12]
	((LpmcuMiscRegs *)hw)->LPMCU_CTRL.reg = tmp;
1000b17c:	687b      	ldr	r3, [r7, #4]
1000b17e:	68fa      	ldr	r2, [r7, #12]
1000b180:	619a      	str	r2, [r3, #24]
}
1000b182:	46c0      	nop			; (mov r8, r8)
1000b184:	46bd      	mov	sp, r7
1000b186:	b004      	add	sp, #16
1000b188:	bd80      	pop	{r7, pc}
	...

1000b18c <_lpmcu_misc_regs_init>:
/**
 * \brief Initializes cortex M0 core clock
 *
 */
void _lpmcu_misc_regs_init(void)
{
1000b18c:	b580      	push	{r7, lr}
1000b18e:	af00      	add	r7, sp, #0
#if CONF_ARM_CLOCK_CONFIG == 1
	switch (CONF_ARM_CLOCK_SOURCE) {
	case CLOCK_RESOURCE_XO_26_MHZ:
		hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_BT26M_CLK_bit(LPMCU_MISC_REGS0);
1000b190:	4b0a      	ldr	r3, [pc, #40]	; (1000b1bc <_lpmcu_misc_regs_init+0x30>)
1000b192:	0018      	movs	r0, r3
1000b194:	4b0a      	ldr	r3, [pc, #40]	; (1000b1c0 <_lpmcu_misc_regs_init+0x34>)
1000b196:	4798      	blx	r3
		hri_lpmcumiscregsmiscregs_set_LPMCU_CTRL_USE_ARM_LP_CLK_bit(LPMCU_MISC_REGS0);
1000b198:	4b08      	ldr	r3, [pc, #32]	; (1000b1bc <_lpmcu_misc_regs_init+0x30>)
1000b19a:	0018      	movs	r0, r3
1000b19c:	4b09      	ldr	r3, [pc, #36]	; (1000b1c4 <_lpmcu_misc_regs_init+0x38>)
1000b19e:	4798      	blx	r3
		break;
1000b1a0:	46c0      	nop			; (mov r8, r8)
		break;
	}
#endif

#if CONF_SYSTEM_CONFIG == 1
	hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_LPMCU_CLK_SEL_bf(LPMCU_MISC_REGS0,
1000b1a2:	4b06      	ldr	r3, [pc, #24]	; (1000b1bc <_lpmcu_misc_regs_init+0x30>)
1000b1a4:	2103      	movs	r1, #3
1000b1a6:	0018      	movs	r0, r3
1000b1a8:	4b07      	ldr	r3, [pc, #28]	; (1000b1c8 <_lpmcu_misc_regs_init+0x3c>)
1000b1aa:	4798      	blx	r3
	                                                            LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk);

	hri_lpmcumiscregsmiscregs_write_LPMCU_CTRL_LPMCU_CLK_SEL_bf(LPMCU_MISC_REGS0, CONF_CPU_PRESCALER);
1000b1ac:	4b03      	ldr	r3, [pc, #12]	; (1000b1bc <_lpmcu_misc_regs_init+0x30>)
1000b1ae:	2100      	movs	r1, #0
1000b1b0:	0018      	movs	r0, r3
1000b1b2:	4b05      	ldr	r3, [pc, #20]	; (1000b1c8 <_lpmcu_misc_regs_init+0x3c>)
1000b1b4:	4798      	blx	r3
#endif
}
1000b1b6:	46c0      	nop			; (mov r8, r8)
1000b1b8:	46bd      	mov	sp, r7
1000b1ba:	bd80      	pop	{r7, pc}
1000b1bc:	4000b000 	.word	0x4000b000
1000b1c0:	1000b121 	.word	0x1000b121
1000b1c4:	1000b13d 	.word	0x1000b13d
1000b1c8:	1000b159 	.word	0x1000b159

1000b1cc <hri_spi_write_TRANSMIT_DATA_reg>:
typedef uint8_t  hri_spi_transmit_data_reg_t;
typedef uint8_t  hri_spi_transmit_status_reg_t;
typedef uint8_t  hri_spi_tx_interrupt_mask_reg_t;

static inline void hri_spi_write_TRANSMIT_DATA_reg(const void *const hw, hri_spi_transmit_data_reg_t data)
{
1000b1cc:	b580      	push	{r7, lr}
1000b1ce:	b082      	sub	sp, #8
1000b1d0:	af00      	add	r7, sp, #0
1000b1d2:	6078      	str	r0, [r7, #4]
1000b1d4:	000a      	movs	r2, r1
1000b1d6:	1cfb      	adds	r3, r7, #3
1000b1d8:	701a      	strb	r2, [r3, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->TRANSMIT_DATA.reg = data;
1000b1da:	687b      	ldr	r3, [r7, #4]
1000b1dc:	1cfa      	adds	r2, r7, #3
1000b1de:	7812      	ldrb	r2, [r2, #0]
1000b1e0:	701a      	strb	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b1e2:	46c0      	nop			; (mov r8, r8)
1000b1e4:	46bd      	mov	sp, r7
1000b1e6:	b002      	add	sp, #8
1000b1e8:	bd80      	pop	{r7, pc}

1000b1ea <hri_spi_write_CLOCK_SOURCE_SELECT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CLOCK_SOURCE_SELECT_reg(const void *const hw, hri_spi_clock_source_select_reg_t data)
{
1000b1ea:	b580      	push	{r7, lr}
1000b1ec:	b082      	sub	sp, #8
1000b1ee:	af00      	add	r7, sp, #0
1000b1f0:	6078      	str	r0, [r7, #4]
1000b1f2:	000a      	movs	r2, r1
1000b1f4:	1cfb      	adds	r3, r7, #3
1000b1f6:	701a      	strb	r2, [r3, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->CLOCK_SOURCE_SELECT.reg = data;
1000b1f8:	687b      	ldr	r3, [r7, #4]
1000b1fa:	1cfa      	adds	r2, r7, #3
1000b1fc:	7812      	ldrb	r2, [r2, #0]
1000b1fe:	741a      	strb	r2, [r3, #16]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b200:	46c0      	nop			; (mov r8, r8)
1000b202:	46bd      	mov	sp, r7
1000b204:	b002      	add	sp, #8
1000b206:	bd80      	pop	{r7, pc}

1000b208 <hri_spi_write_CLK_DIVIDER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CLK_DIVIDER_reg(const void *const hw, hri_spi_clk_divider_reg_t data)
{
1000b208:	b580      	push	{r7, lr}
1000b20a:	b082      	sub	sp, #8
1000b20c:	af00      	add	r7, sp, #0
1000b20e:	6078      	str	r0, [r7, #4]
1000b210:	000a      	movs	r2, r1
1000b212:	1cbb      	adds	r3, r7, #2
1000b214:	801a      	strh	r2, [r3, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CLK_DIVIDER.reg = data;
1000b216:	687b      	ldr	r3, [r7, #4]
1000b218:	1cba      	adds	r2, r7, #2
1000b21a:	8812      	ldrh	r2, [r2, #0]
1000b21c:	829a      	strh	r2, [r3, #20]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b21e:	46c0      	nop			; (mov r8, r8)
1000b220:	46bd      	mov	sp, r7
1000b222:	b002      	add	sp, #8
1000b224:	bd80      	pop	{r7, pc}

1000b226 <hri_spi_set_MODULE_ENABLE_ENABLE_bit>:
{
	return ((Spi *)hw)->SPI_CLK_DIVIDER.reg;
}

static inline void hri_spi_set_MODULE_ENABLE_ENABLE_bit(const void *const hw)
{
1000b226:	b580      	push	{r7, lr}
1000b228:	b082      	sub	sp, #8
1000b22a:	af00      	add	r7, sp, #0
1000b22c:	6078      	str	r0, [r7, #4]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MODULE_ENABLE.reg |= SPI_MODULE_ENABLE_ENABLE;
1000b22e:	687b      	ldr	r3, [r7, #4]
1000b230:	7e1b      	ldrb	r3, [r3, #24]
1000b232:	b2db      	uxtb	r3, r3
1000b234:	2201      	movs	r2, #1
1000b236:	4313      	orrs	r3, r2
1000b238:	b2da      	uxtb	r2, r3
1000b23a:	687b      	ldr	r3, [r7, #4]
1000b23c:	761a      	strb	r2, [r3, #24]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b23e:	46c0      	nop			; (mov r8, r8)
1000b240:	46bd      	mov	sp, r7
1000b242:	b002      	add	sp, #8
1000b244:	bd80      	pop	{r7, pc}

1000b246 <hri_spi_get_MODULE_ENABLE_ENABLE_bit>:

static inline bool hri_spi_get_MODULE_ENABLE_ENABLE_bit(const void *const hw)
{
1000b246:	b580      	push	{r7, lr}
1000b248:	b084      	sub	sp, #16
1000b24a:	af00      	add	r7, sp, #0
1000b24c:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Spi *)hw)->SPI_MODULE_ENABLE.reg;
1000b24e:	230f      	movs	r3, #15
1000b250:	18fb      	adds	r3, r7, r3
1000b252:	687a      	ldr	r2, [r7, #4]
1000b254:	7e12      	ldrb	r2, [r2, #24]
1000b256:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SPI_MODULE_ENABLE_ENABLE) >> SPI_MODULE_ENABLE_ENABLE_Pos;
1000b258:	230f      	movs	r3, #15
1000b25a:	18fb      	adds	r3, r7, r3
1000b25c:	220f      	movs	r2, #15
1000b25e:	18ba      	adds	r2, r7, r2
1000b260:	7812      	ldrb	r2, [r2, #0]
1000b262:	2101      	movs	r1, #1
1000b264:	400a      	ands	r2, r1
1000b266:	701a      	strb	r2, [r3, #0]
	return (bool)tmp;
1000b268:	230f      	movs	r3, #15
1000b26a:	18fb      	adds	r3, r7, r3
1000b26c:	781b      	ldrb	r3, [r3, #0]
1000b26e:	1e5a      	subs	r2, r3, #1
1000b270:	4193      	sbcs	r3, r2
1000b272:	b2db      	uxtb	r3, r3
}
1000b274:	0018      	movs	r0, r3
1000b276:	46bd      	mov	sp, r7
1000b278:	b004      	add	sp, #16
1000b27a:	bd80      	pop	{r7, pc}

1000b27c <hri_spi_set_MASTER_MODE_MASTER_ENABLE_bit>:
{
	return ((Spi *)hw)->SPI_MODULE_ENABLE.reg;
}

static inline void hri_spi_set_MASTER_MODE_MASTER_ENABLE_bit(const void *const hw)
{
1000b27c:	b580      	push	{r7, lr}
1000b27e:	b082      	sub	sp, #8
1000b280:	af00      	add	r7, sp, #0
1000b282:	6078      	str	r0, [r7, #4]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MASTER_MODE.reg |= SPI_MASTER_MODE_MASTER_ENABLE;
1000b284:	687b      	ldr	r3, [r7, #4]
1000b286:	7f1b      	ldrb	r3, [r3, #28]
1000b288:	b2db      	uxtb	r3, r3
1000b28a:	2201      	movs	r2, #1
1000b28c:	4313      	orrs	r3, r2
1000b28e:	b2da      	uxtb	r2, r3
1000b290:	687b      	ldr	r3, [r7, #4]
1000b292:	771a      	strb	r2, [r3, #28]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b294:	46c0      	nop			; (mov r8, r8)
1000b296:	46bd      	mov	sp, r7
1000b298:	b002      	add	sp, #8
1000b29a:	bd80      	pop	{r7, pc}

1000b29c <hri_spi_clear_MASTER_MODE_MASTER_ENABLE_bit>:
	((Spi *)hw)->SPI_MASTER_MODE.reg = tmp;
	SPI_CRITICAL_SECTION_LEAVE();
}

static inline void hri_spi_clear_MASTER_MODE_MASTER_ENABLE_bit(const void *const hw)
{
1000b29c:	b580      	push	{r7, lr}
1000b29e:	b082      	sub	sp, #8
1000b2a0:	af00      	add	r7, sp, #0
1000b2a2:	6078      	str	r0, [r7, #4]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MASTER_MODE.reg &= ~SPI_MASTER_MODE_MASTER_ENABLE;
1000b2a4:	687b      	ldr	r3, [r7, #4]
1000b2a6:	7f1b      	ldrb	r3, [r3, #28]
1000b2a8:	b2db      	uxtb	r3, r3
1000b2aa:	2201      	movs	r2, #1
1000b2ac:	4393      	bics	r3, r2
1000b2ae:	b2da      	uxtb	r2, r3
1000b2b0:	687b      	ldr	r3, [r7, #4]
1000b2b2:	771a      	strb	r2, [r3, #28]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b2b4:	46c0      	nop			; (mov r8, r8)
1000b2b6:	46bd      	mov	sp, r7
1000b2b8:	b002      	add	sp, #8
1000b2ba:	bd80      	pop	{r7, pc}

1000b2bc <hri_spi_write_CONFIGURATION_SCK_POLARITY_bit>:
	tmp = (tmp & SPI_CONFIGURATION_SCK_POLARITY) >> SPI_CONFIGURATION_SCK_POLARITY_Pos;
	return (bool)tmp;
}

static inline void hri_spi_write_CONFIGURATION_SCK_POLARITY_bit(const void *const hw, bool value)
{
1000b2bc:	b580      	push	{r7, lr}
1000b2be:	b084      	sub	sp, #16
1000b2c0:	af00      	add	r7, sp, #0
1000b2c2:	6078      	str	r0, [r7, #4]
1000b2c4:	000a      	movs	r2, r1
1000b2c6:	1cfb      	adds	r3, r7, #3
1000b2c8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CONFIGURATION.reg;
1000b2ca:	230f      	movs	r3, #15
1000b2cc:	18fb      	adds	r3, r7, r3
1000b2ce:	687a      	ldr	r2, [r7, #4]
1000b2d0:	2124      	movs	r1, #36	; 0x24
1000b2d2:	5c52      	ldrb	r2, [r2, r1]
1000b2d4:	701a      	strb	r2, [r3, #0]
	tmp &= ~SPI_CONFIGURATION_SCK_POLARITY;
1000b2d6:	230f      	movs	r3, #15
1000b2d8:	18fb      	adds	r3, r7, r3
1000b2da:	220f      	movs	r2, #15
1000b2dc:	18ba      	adds	r2, r7, r2
1000b2de:	7812      	ldrb	r2, [r2, #0]
1000b2e0:	2101      	movs	r1, #1
1000b2e2:	438a      	bics	r2, r1
1000b2e4:	701a      	strb	r2, [r3, #0]
	tmp |= value << SPI_CONFIGURATION_SCK_POLARITY_Pos;
1000b2e6:	1cfb      	adds	r3, r7, #3
1000b2e8:	7819      	ldrb	r1, [r3, #0]
1000b2ea:	230f      	movs	r3, #15
1000b2ec:	18fb      	adds	r3, r7, r3
1000b2ee:	220f      	movs	r2, #15
1000b2f0:	18ba      	adds	r2, r7, r2
1000b2f2:	7812      	ldrb	r2, [r2, #0]
1000b2f4:	430a      	orrs	r2, r1
1000b2f6:	701a      	strb	r2, [r3, #0]
	((Spi *)hw)->SPI_CONFIGURATION.reg = tmp;
1000b2f8:	687b      	ldr	r3, [r7, #4]
1000b2fa:	220f      	movs	r2, #15
1000b2fc:	18ba      	adds	r2, r7, r2
1000b2fe:	2124      	movs	r1, #36	; 0x24
1000b300:	7812      	ldrb	r2, [r2, #0]
1000b302:	545a      	strb	r2, [r3, r1]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b304:	46c0      	nop			; (mov r8, r8)
1000b306:	46bd      	mov	sp, r7
1000b308:	b004      	add	sp, #16
1000b30a:	bd80      	pop	{r7, pc}

1000b30c <hri_spi_write_CONFIGURATION_SCK_PHASE_bit>:
	tmp = (tmp & SPI_CONFIGURATION_SCK_PHASE) >> SPI_CONFIGURATION_SCK_PHASE_Pos;
	return (bool)tmp;
}

static inline void hri_spi_write_CONFIGURATION_SCK_PHASE_bit(const void *const hw, bool value)
{
1000b30c:	b580      	push	{r7, lr}
1000b30e:	b084      	sub	sp, #16
1000b310:	af00      	add	r7, sp, #0
1000b312:	6078      	str	r0, [r7, #4]
1000b314:	000a      	movs	r2, r1
1000b316:	1cfb      	adds	r3, r7, #3
1000b318:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CONFIGURATION.reg;
1000b31a:	230f      	movs	r3, #15
1000b31c:	18fb      	adds	r3, r7, r3
1000b31e:	687a      	ldr	r2, [r7, #4]
1000b320:	2124      	movs	r1, #36	; 0x24
1000b322:	5c52      	ldrb	r2, [r2, r1]
1000b324:	701a      	strb	r2, [r3, #0]
	tmp &= ~SPI_CONFIGURATION_SCK_PHASE;
1000b326:	230f      	movs	r3, #15
1000b328:	18fb      	adds	r3, r7, r3
1000b32a:	220f      	movs	r2, #15
1000b32c:	18ba      	adds	r2, r7, r2
1000b32e:	7812      	ldrb	r2, [r2, #0]
1000b330:	2102      	movs	r1, #2
1000b332:	438a      	bics	r2, r1
1000b334:	701a      	strb	r2, [r3, #0]
	tmp |= value << SPI_CONFIGURATION_SCK_PHASE_Pos;
1000b336:	1cfb      	adds	r3, r7, #3
1000b338:	781b      	ldrb	r3, [r3, #0]
1000b33a:	005b      	lsls	r3, r3, #1
1000b33c:	b25a      	sxtb	r2, r3
1000b33e:	230f      	movs	r3, #15
1000b340:	18fb      	adds	r3, r7, r3
1000b342:	781b      	ldrb	r3, [r3, #0]
1000b344:	b25b      	sxtb	r3, r3
1000b346:	4313      	orrs	r3, r2
1000b348:	b25a      	sxtb	r2, r3
1000b34a:	230f      	movs	r3, #15
1000b34c:	18fb      	adds	r3, r7, r3
1000b34e:	701a      	strb	r2, [r3, #0]
	((Spi *)hw)->SPI_CONFIGURATION.reg = tmp;
1000b350:	687b      	ldr	r3, [r7, #4]
1000b352:	220f      	movs	r2, #15
1000b354:	18ba      	adds	r2, r7, r2
1000b356:	2124      	movs	r1, #36	; 0x24
1000b358:	7812      	ldrb	r2, [r2, #0]
1000b35a:	545a      	strb	r2, [r3, r1]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b35c:	46c0      	nop			; (mov r8, r8)
1000b35e:	46bd      	mov	sp, r7
1000b360:	b004      	add	sp, #16
1000b362:	bd80      	pop	{r7, pc}

1000b364 <hri_spi_write_CONFIGURATION_LSB_FIRST_ENABLE_bit>:
	tmp = (tmp & SPI_CONFIGURATION_LSB_FIRST_ENABLE) >> SPI_CONFIGURATION_LSB_FIRST_ENABLE_Pos;
	return (bool)tmp;
}

static inline void hri_spi_write_CONFIGURATION_LSB_FIRST_ENABLE_bit(const void *const hw, bool value)
{
1000b364:	b580      	push	{r7, lr}
1000b366:	b084      	sub	sp, #16
1000b368:	af00      	add	r7, sp, #0
1000b36a:	6078      	str	r0, [r7, #4]
1000b36c:	000a      	movs	r2, r1
1000b36e:	1cfb      	adds	r3, r7, #3
1000b370:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CONFIGURATION.reg;
1000b372:	230f      	movs	r3, #15
1000b374:	18fb      	adds	r3, r7, r3
1000b376:	687a      	ldr	r2, [r7, #4]
1000b378:	2124      	movs	r1, #36	; 0x24
1000b37a:	5c52      	ldrb	r2, [r2, r1]
1000b37c:	701a      	strb	r2, [r3, #0]
	tmp &= ~SPI_CONFIGURATION_LSB_FIRST_ENABLE;
1000b37e:	230f      	movs	r3, #15
1000b380:	18fb      	adds	r3, r7, r3
1000b382:	220f      	movs	r2, #15
1000b384:	18ba      	adds	r2, r7, r2
1000b386:	7812      	ldrb	r2, [r2, #0]
1000b388:	2104      	movs	r1, #4
1000b38a:	438a      	bics	r2, r1
1000b38c:	701a      	strb	r2, [r3, #0]
	tmp |= value << SPI_CONFIGURATION_LSB_FIRST_ENABLE_Pos;
1000b38e:	1cfb      	adds	r3, r7, #3
1000b390:	781b      	ldrb	r3, [r3, #0]
1000b392:	009b      	lsls	r3, r3, #2
1000b394:	b25a      	sxtb	r2, r3
1000b396:	230f      	movs	r3, #15
1000b398:	18fb      	adds	r3, r7, r3
1000b39a:	781b      	ldrb	r3, [r3, #0]
1000b39c:	b25b      	sxtb	r3, r3
1000b39e:	4313      	orrs	r3, r2
1000b3a0:	b25a      	sxtb	r2, r3
1000b3a2:	230f      	movs	r3, #15
1000b3a4:	18fb      	adds	r3, r7, r3
1000b3a6:	701a      	strb	r2, [r3, #0]
	((Spi *)hw)->SPI_CONFIGURATION.reg = tmp;
1000b3a8:	687b      	ldr	r3, [r7, #4]
1000b3aa:	220f      	movs	r2, #15
1000b3ac:	18ba      	adds	r2, r7, r2
1000b3ae:	2124      	movs	r1, #36	; 0x24
1000b3b0:	7812      	ldrb	r2, [r2, #0]
1000b3b2:	545a      	strb	r2, [r3, r1]
	SPI_CRITICAL_SECTION_LEAVE();
}
1000b3b4:	46c0      	nop			; (mov r8, r8)
1000b3b6:	46bd      	mov	sp, r7
1000b3b8:	b004      	add	sp, #16
1000b3ba:	bd80      	pop	{r7, pc}

1000b3bc <hri_spi_get_BUS_STATUS_SPI_ACTIVE_bit>:
{
	return ((Spi *)hw)->RECEIVE_STATUS.reg;
}

static inline bool hri_spi_get_BUS_STATUS_SPI_ACTIVE_bit(const void *const hw)
{
1000b3bc:	b580      	push	{r7, lr}
1000b3be:	b082      	sub	sp, #8
1000b3c0:	af00      	add	r7, sp, #0
1000b3c2:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_BUS_STATUS.reg & SPI_BUS_STATUS_SPI_ACTIVE) >> SPI_BUS_STATUS_SPI_ACTIVE_Pos;
1000b3c4:	687b      	ldr	r3, [r7, #4]
1000b3c6:	2228      	movs	r2, #40	; 0x28
1000b3c8:	5c9b      	ldrb	r3, [r3, r2]
1000b3ca:	b2db      	uxtb	r3, r3
1000b3cc:	001a      	movs	r2, r3
1000b3ce:	2301      	movs	r3, #1
1000b3d0:	4013      	ands	r3, r2
1000b3d2:	1e5a      	subs	r2, r3, #1
1000b3d4:	4193      	sbcs	r3, r2
1000b3d6:	b2db      	uxtb	r3, r3
}
1000b3d8:	0018      	movs	r0, r3
1000b3da:	46bd      	mov	sp, r7
1000b3dc:	b002      	add	sp, #8
1000b3de:	bd80      	pop	{r7, pc}

1000b3e0 <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
1000b3e0:	b580      	push	{r7, lr}
1000b3e2:	b082      	sub	sp, #8
1000b3e4:	af00      	add	r7, sp, #0
1000b3e6:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)SPI0) >> 12;
1000b3e8:	687b      	ldr	r3, [r7, #4]
1000b3ea:	4a04      	ldr	r2, [pc, #16]	; (1000b3fc <_spi_get_hardware_index+0x1c>)
1000b3ec:	4694      	mov	ip, r2
1000b3ee:	4463      	add	r3, ip
1000b3f0:	0b1b      	lsrs	r3, r3, #12
1000b3f2:	b2db      	uxtb	r3, r3
}
1000b3f4:	0018      	movs	r0, r3
1000b3f6:	46bd      	mov	sp, r7
1000b3f8:	b002      	add	sp, #8
1000b3fa:	bd80      	pop	{r7, pc}
1000b3fc:	bfffa000 	.word	0xbfffa000

1000b400 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
1000b400:	b590      	push	{r4, r7, lr}
1000b402:	b085      	sub	sp, #20
1000b404:	af00      	add	r7, sp, #0
1000b406:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
1000b408:	687b      	ldr	r3, [r7, #4]
1000b40a:	220e      	movs	r2, #14
1000b40c:	18bc      	adds	r4, r7, r2
1000b40e:	0018      	movs	r0, r3
1000b410:	4b18      	ldr	r3, [pc, #96]	; (1000b474 <_spi_get_regs+0x74>)
1000b412:	4798      	blx	r3
1000b414:	0003      	movs	r3, r0
1000b416:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
1000b418:	230f      	movs	r3, #15
1000b41a:	18fb      	adds	r3, r7, r3
1000b41c:	2200      	movs	r2, #0
1000b41e:	701a      	strb	r2, [r3, #0]
1000b420:	e01e      	b.n	1000b460 <_spi_get_regs+0x60>
		if (spi_regs[i].number == n) {
1000b422:	230f      	movs	r3, #15
1000b424:	18fb      	adds	r3, r7, r3
1000b426:	781a      	ldrb	r2, [r3, #0]
1000b428:	4913      	ldr	r1, [pc, #76]	; (1000b478 <_spi_get_regs+0x78>)
1000b42a:	0013      	movs	r3, r2
1000b42c:	009b      	lsls	r3, r3, #2
1000b42e:	189b      	adds	r3, r3, r2
1000b430:	005b      	lsls	r3, r3, #1
1000b432:	5c5b      	ldrb	r3, [r3, r1]
1000b434:	220e      	movs	r2, #14
1000b436:	18ba      	adds	r2, r7, r2
1000b438:	7812      	ldrb	r2, [r2, #0]
1000b43a:	429a      	cmp	r2, r3
1000b43c:	d109      	bne.n	1000b452 <_spi_get_regs+0x52>
			return &spi_regs[i];
1000b43e:	230f      	movs	r3, #15
1000b440:	18fb      	adds	r3, r7, r3
1000b442:	781a      	ldrb	r2, [r3, #0]
1000b444:	0013      	movs	r3, r2
1000b446:	009b      	lsls	r3, r3, #2
1000b448:	189b      	adds	r3, r3, r2
1000b44a:	005b      	lsls	r3, r3, #1
1000b44c:	4a0a      	ldr	r2, [pc, #40]	; (1000b478 <_spi_get_regs+0x78>)
1000b44e:	189b      	adds	r3, r3, r2
1000b450:	e00c      	b.n	1000b46c <_spi_get_regs+0x6c>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
1000b452:	230f      	movs	r3, #15
1000b454:	18fb      	adds	r3, r7, r3
1000b456:	781a      	ldrb	r2, [r3, #0]
1000b458:	230f      	movs	r3, #15
1000b45a:	18fb      	adds	r3, r7, r3
1000b45c:	3201      	adds	r2, #1
1000b45e:	701a      	strb	r2, [r3, #0]
1000b460:	230f      	movs	r3, #15
1000b462:	18fb      	adds	r3, r7, r3
1000b464:	781b      	ldrb	r3, [r3, #0]
1000b466:	2b00      	cmp	r3, #0
1000b468:	d0db      	beq.n	1000b422 <_spi_get_regs+0x22>
		}
	}

	return NULL;
1000b46a:	2300      	movs	r3, #0
}
1000b46c:	0018      	movs	r0, r3
1000b46e:	46bd      	mov	sp, r7
1000b470:	b005      	add	sp, #20
1000b472:	bd90      	pop	{r4, r7, pc}
1000b474:	1000b3e1 	.word	0x1000b3e1
1000b478:	1000ff38 	.word	0x1000ff38

1000b47c <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
1000b47c:	b580      	push	{r7, lr}
1000b47e:	b082      	sub	sp, #8
1000b480:	af00      	add	r7, sp, #0
1000b482:	6078      	str	r0, [r7, #4]
	hri_spi_set_MODULE_ENABLE_ENABLE_bit(hw);
1000b484:	687b      	ldr	r3, [r7, #4]
1000b486:	0018      	movs	r0, r3
1000b488:	4b03      	ldr	r3, [pc, #12]	; (1000b498 <_spi_sync_enable+0x1c>)
1000b48a:	4798      	blx	r3

	return ERR_NONE;
1000b48c:	2300      	movs	r3, #0
}
1000b48e:	0018      	movs	r0, r3
1000b490:	46bd      	mov	sp, r7
1000b492:	b002      	add	sp, #8
1000b494:	bd80      	pop	{r7, pc}
1000b496:	46c0      	nop			; (mov r8, r8)
1000b498:	1000b227 	.word	0x1000b227

1000b49c <_spi_m_sync_init>:
{
	_spi_handler(_spi0_dev);
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
1000b49c:	b580      	push	{r7, lr}
1000b49e:	b084      	sub	sp, #16
1000b4a0:	af00      	add	r7, sp, #0
1000b4a2:	6078      	str	r0, [r7, #4]
1000b4a4:	6039      	str	r1, [r7, #0]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
1000b4a6:	683b      	ldr	r3, [r7, #0]
1000b4a8:	0018      	movs	r0, r3
1000b4aa:	4b33      	ldr	r3, [pc, #204]	; (1000b578 <_spi_m_sync_init+0xdc>)
1000b4ac:	4798      	blx	r3
1000b4ae:	0003      	movs	r3, r0
1000b4b0:	60fb      	str	r3, [r7, #12]

	ASSERT(dev && hw);
1000b4b2:	687b      	ldr	r3, [r7, #4]
1000b4b4:	2b00      	cmp	r3, #0
1000b4b6:	d004      	beq.n	1000b4c2 <_spi_m_sync_init+0x26>
1000b4b8:	683b      	ldr	r3, [r7, #0]
1000b4ba:	2b00      	cmp	r3, #0
1000b4bc:	d001      	beq.n	1000b4c2 <_spi_m_sync_init+0x26>
1000b4be:	2301      	movs	r3, #1
1000b4c0:	e000      	b.n	1000b4c4 <_spi_m_sync_init+0x28>
1000b4c2:	2300      	movs	r3, #0
1000b4c4:	1c1a      	adds	r2, r3, #0
1000b4c6:	2301      	movs	r3, #1
1000b4c8:	4013      	ands	r3, r2
1000b4ca:	b2d8      	uxtb	r0, r3
1000b4cc:	2397      	movs	r3, #151	; 0x97
1000b4ce:	005a      	lsls	r2, r3, #1
1000b4d0:	4b2a      	ldr	r3, [pc, #168]	; (1000b57c <_spi_m_sync_init+0xe0>)
1000b4d2:	0019      	movs	r1, r3
1000b4d4:	4b2a      	ldr	r3, [pc, #168]	; (1000b580 <_spi_m_sync_init+0xe4>)
1000b4d6:	4798      	blx	r3

	if (regs == NULL) {
1000b4d8:	68fb      	ldr	r3, [r7, #12]
1000b4da:	2b00      	cmp	r3, #0
1000b4dc:	d102      	bne.n	1000b4e4 <_spi_m_sync_init+0x48>
		return ERR_INVALID_ARG;
1000b4de:	230d      	movs	r3, #13
1000b4e0:	425b      	negs	r3, r3
1000b4e2:	e045      	b.n	1000b570 <_spi_m_sync_init+0xd4>
	}

	if (hri_spi_get_MODULE_ENABLE_ENABLE_bit(hw)) {
1000b4e4:	683b      	ldr	r3, [r7, #0]
1000b4e6:	0018      	movs	r0, r3
1000b4e8:	4b26      	ldr	r3, [pc, #152]	; (1000b584 <_spi_m_sync_init+0xe8>)
1000b4ea:	4798      	blx	r3
1000b4ec:	1e03      	subs	r3, r0, #0
1000b4ee:	d002      	beq.n	1000b4f6 <_spi_m_sync_init+0x5a>
		return ERR_DENIED;
1000b4f0:	2311      	movs	r3, #17
1000b4f2:	425b      	negs	r3, r3
1000b4f4:	e03c      	b.n	1000b570 <_spi_m_sync_init+0xd4>
	}

	dev->prvt = hw;
1000b4f6:	687b      	ldr	r3, [r7, #4]
1000b4f8:	683a      	ldr	r2, [r7, #0]
1000b4fa:	601a      	str	r2, [r3, #0]
	if (regs->master_mode) {
1000b4fc:	68fb      	ldr	r3, [r7, #12]
1000b4fe:	785b      	ldrb	r3, [r3, #1]
1000b500:	2b00      	cmp	r3, #0
1000b502:	d00b      	beq.n	1000b51c <_spi_m_sync_init+0x80>
		hri_spi_set_MASTER_MODE_MASTER_ENABLE_bit(hw);
1000b504:	683b      	ldr	r3, [r7, #0]
1000b506:	0018      	movs	r0, r3
1000b508:	4b1f      	ldr	r3, [pc, #124]	; (1000b588 <_spi_m_sync_init+0xec>)
1000b50a:	4798      	blx	r3
		hri_spi_write_CLK_DIVIDER_reg(hw, regs->clock_divider);
1000b50c:	68fb      	ldr	r3, [r7, #12]
1000b50e:	889a      	ldrh	r2, [r3, #4]
1000b510:	683b      	ldr	r3, [r7, #0]
1000b512:	0011      	movs	r1, r2
1000b514:	0018      	movs	r0, r3
1000b516:	4b1d      	ldr	r3, [pc, #116]	; (1000b58c <_spi_m_sync_init+0xf0>)
1000b518:	4798      	blx	r3
1000b51a:	e003      	b.n	1000b524 <_spi_m_sync_init+0x88>
	} else {
		hri_spi_clear_MASTER_MODE_MASTER_ENABLE_bit(hw);
1000b51c:	683b      	ldr	r3, [r7, #0]
1000b51e:	0018      	movs	r0, r3
1000b520:	4b1b      	ldr	r3, [pc, #108]	; (1000b590 <_spi_m_sync_init+0xf4>)
1000b522:	4798      	blx	r3
	}
	hri_spi_write_CLOCK_SOURCE_SELECT_reg(hw, regs->prescaler);
1000b524:	68fb      	ldr	r3, [r7, #12]
1000b526:	789a      	ldrb	r2, [r3, #2]
1000b528:	683b      	ldr	r3, [r7, #0]
1000b52a:	0011      	movs	r1, r2
1000b52c:	0018      	movs	r0, r3
1000b52e:	4b19      	ldr	r3, [pc, #100]	; (1000b594 <_spi_m_sync_init+0xf8>)
1000b530:	4798      	blx	r3
	hri_spi_write_CONFIGURATION_SCK_POLARITY_bit(hw, regs->cpol);
1000b532:	68fb      	ldr	r3, [r7, #12]
1000b534:	79db      	ldrb	r3, [r3, #7]
1000b536:	1e5a      	subs	r2, r3, #1
1000b538:	4193      	sbcs	r3, r2
1000b53a:	b2da      	uxtb	r2, r3
1000b53c:	683b      	ldr	r3, [r7, #0]
1000b53e:	0011      	movs	r1, r2
1000b540:	0018      	movs	r0, r3
1000b542:	4b15      	ldr	r3, [pc, #84]	; (1000b598 <_spi_m_sync_init+0xfc>)
1000b544:	4798      	blx	r3
	hri_spi_write_CONFIGURATION_SCK_PHASE_bit(hw, regs->cpha);
1000b546:	68fb      	ldr	r3, [r7, #12]
1000b548:	7a1b      	ldrb	r3, [r3, #8]
1000b54a:	1e5a      	subs	r2, r3, #1
1000b54c:	4193      	sbcs	r3, r2
1000b54e:	b2da      	uxtb	r2, r3
1000b550:	683b      	ldr	r3, [r7, #0]
1000b552:	0011      	movs	r1, r2
1000b554:	0018      	movs	r0, r3
1000b556:	4b11      	ldr	r3, [pc, #68]	; (1000b59c <_spi_m_sync_init+0x100>)
1000b558:	4798      	blx	r3
	hri_spi_write_CONFIGURATION_LSB_FIRST_ENABLE_bit(hw, regs->data_order);
1000b55a:	68fb      	ldr	r3, [r7, #12]
1000b55c:	799b      	ldrb	r3, [r3, #6]
1000b55e:	1e5a      	subs	r2, r3, #1
1000b560:	4193      	sbcs	r3, r2
1000b562:	b2da      	uxtb	r2, r3
1000b564:	683b      	ldr	r3, [r7, #0]
1000b566:	0011      	movs	r1, r2
1000b568:	0018      	movs	r0, r3
1000b56a:	4b0d      	ldr	r3, [pc, #52]	; (1000b5a0 <_spi_m_sync_init+0x104>)
1000b56c:	4798      	blx	r3

	return ERR_NONE;
1000b56e:	2300      	movs	r3, #0
}
1000b570:	0018      	movs	r0, r3
1000b572:	46bd      	mov	sp, r7
1000b574:	b004      	add	sp, #16
1000b576:	bd80      	pop	{r7, pc}
1000b578:	1000b401 	.word	0x1000b401
1000b57c:	1000ff44 	.word	0x1000ff44
1000b580:	1000a5e1 	.word	0x1000a5e1
1000b584:	1000b247 	.word	0x1000b247
1000b588:	1000b27d 	.word	0x1000b27d
1000b58c:	1000b209 	.word	0x1000b209
1000b590:	1000b29d 	.word	0x1000b29d
1000b594:	1000b1eb 	.word	0x1000b1eb
1000b598:	1000b2bd 	.word	0x1000b2bd
1000b59c:	1000b30d 	.word	0x1000b30d
1000b5a0:	1000b365 	.word	0x1000b365

1000b5a4 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
1000b5a4:	b580      	push	{r7, lr}
1000b5a6:	b082      	sub	sp, #8
1000b5a8:	af00      	add	r7, sp, #0
1000b5aa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
1000b5ac:	687b      	ldr	r3, [r7, #4]
1000b5ae:	2b00      	cmp	r3, #0
1000b5b0:	d005      	beq.n	1000b5be <_spi_m_sync_enable+0x1a>
1000b5b2:	687b      	ldr	r3, [r7, #4]
1000b5b4:	681b      	ldr	r3, [r3, #0]
1000b5b6:	2b00      	cmp	r3, #0
1000b5b8:	d001      	beq.n	1000b5be <_spi_m_sync_enable+0x1a>
1000b5ba:	2301      	movs	r3, #1
1000b5bc:	e000      	b.n	1000b5c0 <_spi_m_sync_enable+0x1c>
1000b5be:	2300      	movs	r3, #0
1000b5c0:	1c1a      	adds	r2, r3, #0
1000b5c2:	2301      	movs	r3, #1
1000b5c4:	4013      	ands	r3, r2
1000b5c6:	b2d8      	uxtb	r0, r3
1000b5c8:	23cf      	movs	r3, #207	; 0xcf
1000b5ca:	005a      	lsls	r2, r3, #1
1000b5cc:	4b06      	ldr	r3, [pc, #24]	; (1000b5e8 <_spi_m_sync_enable+0x44>)
1000b5ce:	0019      	movs	r1, r3
1000b5d0:	4b06      	ldr	r3, [pc, #24]	; (1000b5ec <_spi_m_sync_enable+0x48>)
1000b5d2:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
1000b5d4:	687b      	ldr	r3, [r7, #4]
1000b5d6:	681b      	ldr	r3, [r3, #0]
1000b5d8:	0018      	movs	r0, r3
1000b5da:	4b05      	ldr	r3, [pc, #20]	; (1000b5f0 <_spi_m_sync_enable+0x4c>)
1000b5dc:	4798      	blx	r3
1000b5de:	0003      	movs	r3, r0
}
1000b5e0:	0018      	movs	r0, r3
1000b5e2:	46bd      	mov	sp, r7
1000b5e4:	b002      	add	sp, #8
1000b5e6:	bd80      	pop	{r7, pc}
1000b5e8:	1000ff44 	.word	0x1000ff44
1000b5ec:	1000a5e1 	.word	0x1000a5e1
1000b5f0:	1000b47d 	.word	0x1000b47d

1000b5f4 <_spi_is_active>:
	return _spi_set_data_order(dev->prvt, dord);
}

/** Determines if the SPI module is currently synchronizing to the bus. */
static inline bool _spi_is_active(void *const hw)
{
1000b5f4:	b580      	push	{r7, lr}
1000b5f6:	b082      	sub	sp, #8
1000b5f8:	af00      	add	r7, sp, #0
1000b5fa:	6078      	str	r0, [r7, #4]
	return hri_spi_get_BUS_STATUS_SPI_ACTIVE_bit(hw);
1000b5fc:	687b      	ldr	r3, [r7, #4]
1000b5fe:	0018      	movs	r0, r3
1000b600:	4b03      	ldr	r3, [pc, #12]	; (1000b610 <_spi_is_active+0x1c>)
1000b602:	4798      	blx	r3
1000b604:	0003      	movs	r3, r0
}
1000b606:	0018      	movs	r0, r3
1000b608:	46bd      	mov	sp, r7
1000b60a:	b002      	add	sp, #8
1000b60c:	bd80      	pop	{r7, pc}
1000b60e:	46c0      	nop			; (mov r8, r8)
1000b610:	1000b3bd 	.word	0x1000b3bd

1000b614 <_spi_tx_check>:
	ctrl->rxcnt++;
}

/** Check interrupt flag of DRE and update transaction runtime information. */
static inline void _spi_tx_check(void *const hw, struct _spi_trans_ctrl *ctrl)
{
1000b614:	b580      	push	{r7, lr}
1000b616:	b084      	sub	sp, #16
1000b618:	af00      	add	r7, sp, #0
1000b61a:	6078      	str	r0, [r7, #4]
1000b61c:	6039      	str	r1, [r7, #0]
	uint32_t data;

	//while (!_spi_is_ready_to_write(hw)) {
	//}

	if (ctrl->txbuf) {
1000b61e:	683b      	ldr	r3, [r7, #0]
1000b620:	681b      	ldr	r3, [r3, #0]
1000b622:	2b00      	cmp	r3, #0
1000b624:	d007      	beq.n	1000b636 <_spi_tx_check+0x22>
		data = *ctrl->txbuf++;
1000b626:	683b      	ldr	r3, [r7, #0]
1000b628:	681b      	ldr	r3, [r3, #0]
1000b62a:	1c59      	adds	r1, r3, #1
1000b62c:	683a      	ldr	r2, [r7, #0]
1000b62e:	6011      	str	r1, [r2, #0]
1000b630:	781b      	ldrb	r3, [r3, #0]
1000b632:	60fb      	str	r3, [r7, #12]
1000b634:	e001      	b.n	1000b63a <_spi_tx_check+0x26>
	} else {
		data = SPI_DUMMY_CHAR;
1000b636:	4b09      	ldr	r3, [pc, #36]	; (1000b65c <_spi_tx_check+0x48>)
1000b638:	60fb      	str	r3, [r7, #12]
	}

	ctrl->txcnt++;
1000b63a:	683b      	ldr	r3, [r7, #0]
1000b63c:	689b      	ldr	r3, [r3, #8]
1000b63e:	1c5a      	adds	r2, r3, #1
1000b640:	683b      	ldr	r3, [r7, #0]
1000b642:	609a      	str	r2, [r3, #8]
	hri_spi_write_TRANSMIT_DATA_reg(hw, data);
1000b644:	68fb      	ldr	r3, [r7, #12]
1000b646:	b2da      	uxtb	r2, r3
1000b648:	687b      	ldr	r3, [r7, #4]
1000b64a:	0011      	movs	r1, r2
1000b64c:	0018      	movs	r0, r3
1000b64e:	4b04      	ldr	r3, [pc, #16]	; (1000b660 <_spi_tx_check+0x4c>)
1000b650:	4798      	blx	r3
}
1000b652:	46c0      	nop			; (mov r8, r8)
1000b654:	46bd      	mov	sp, r7
1000b656:	b004      	add	sp, #16
1000b658:	bd80      	pop	{r7, pc}
1000b65a:	46c0      	nop			; (mov r8, r8)
1000b65c:	000001ff 	.word	0x000001ff
1000b660:	1000b1cd 	.word	0x1000b1cd

1000b664 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
1000b664:	b580      	push	{r7, lr}
1000b666:	b08a      	sub	sp, #40	; 0x28
1000b668:	af00      	add	r7, sp, #0
1000b66a:	6078      	str	r0, [r7, #4]
1000b66c:	6039      	str	r1, [r7, #0]
	void *                 hw = dev->prvt;
1000b66e:	687b      	ldr	r3, [r7, #4]
1000b670:	681b      	ldr	r3, [r3, #0]
1000b672:	623b      	str	r3, [r7, #32]
	uint32_t               rc = 0;
1000b674:	2300      	movs	r3, #0
1000b676:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t                status;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
1000b678:	683b      	ldr	r3, [r7, #0]
1000b67a:	681a      	ldr	r2, [r3, #0]
1000b67c:	2308      	movs	r3, #8
1000b67e:	18fb      	adds	r3, r7, r3
1000b680:	601a      	str	r2, [r3, #0]
1000b682:	683b      	ldr	r3, [r7, #0]
1000b684:	685a      	ldr	r2, [r3, #4]
1000b686:	2308      	movs	r3, #8
1000b688:	18fb      	adds	r3, r7, r3
1000b68a:	605a      	str	r2, [r3, #4]
1000b68c:	2308      	movs	r3, #8
1000b68e:	18fb      	adds	r3, r7, r3
1000b690:	2200      	movs	r2, #0
1000b692:	609a      	str	r2, [r3, #8]
1000b694:	2308      	movs	r3, #8
1000b696:	18fb      	adds	r3, r7, r3
1000b698:	2200      	movs	r2, #0
1000b69a:	60da      	str	r2, [r3, #12]
1000b69c:	687b      	ldr	r3, [r7, #4]
1000b69e:	791a      	ldrb	r2, [r3, #4]
1000b6a0:	2308      	movs	r3, #8
1000b6a2:	18fb      	adds	r3, r7, r3
1000b6a4:	741a      	strb	r2, [r3, #16]

	ASSERT(dev && hw);
1000b6a6:	687b      	ldr	r3, [r7, #4]
1000b6a8:	2b00      	cmp	r3, #0
1000b6aa:	d004      	beq.n	1000b6b6 <_spi_m_sync_trans+0x52>
1000b6ac:	6a3b      	ldr	r3, [r7, #32]
1000b6ae:	2b00      	cmp	r3, #0
1000b6b0:	d001      	beq.n	1000b6b6 <_spi_m_sync_trans+0x52>
1000b6b2:	2301      	movs	r3, #1
1000b6b4:	e000      	b.n	1000b6b8 <_spi_m_sync_trans+0x54>
1000b6b6:	2300      	movs	r3, #0
1000b6b8:	1c1a      	adds	r2, r3, #0
1000b6ba:	2301      	movs	r3, #1
1000b6bc:	4013      	ands	r3, r2
1000b6be:	b2d8      	uxtb	r0, r3
1000b6c0:	23a5      	movs	r3, #165	; 0xa5
1000b6c2:	009a      	lsls	r2, r3, #2
1000b6c4:	4b1b      	ldr	r3, [pc, #108]	; (1000b734 <_spi_m_sync_trans+0xd0>)
1000b6c6:	0019      	movs	r1, r3
1000b6c8:	4b1b      	ldr	r3, [pc, #108]	; (1000b738 <_spi_m_sync_trans+0xd4>)
1000b6ca:	4798      	blx	r3

	status = hri_spi_get_MODULE_ENABLE_ENABLE_bit(hw);
1000b6cc:	6a3b      	ldr	r3, [r7, #32]
1000b6ce:	0018      	movs	r0, r3
1000b6d0:	4b1a      	ldr	r3, [pc, #104]	; (1000b73c <_spi_m_sync_trans+0xd8>)
1000b6d2:	4798      	blx	r3
1000b6d4:	0003      	movs	r3, r0
1000b6d6:	001a      	movs	r2, r3
1000b6d8:	231f      	movs	r3, #31
1000b6da:	18fb      	adds	r3, r7, r3
1000b6dc:	701a      	strb	r2, [r3, #0]
	/* SPI must be enabled to start synchronous transfer */
	if (!status) {
1000b6de:	231f      	movs	r3, #31
1000b6e0:	18fb      	adds	r3, r7, r3
1000b6e2:	781b      	ldrb	r3, [r3, #0]
1000b6e4:	2b00      	cmp	r3, #0
1000b6e6:	d102      	bne.n	1000b6ee <_spi_m_sync_trans+0x8a>
		return ERR_NOT_INITIALIZED;
1000b6e8:	2314      	movs	r3, #20
1000b6ea:	425b      	negs	r3, r3
1000b6ec:	e01e      	b.n	1000b72c <_spi_m_sync_trans+0xc8>
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(hw);
1000b6ee:	6a3b      	ldr	r3, [r7, #32]
1000b6f0:	0018      	movs	r0, r3
1000b6f2:	4b13      	ldr	r3, [pc, #76]	; (1000b740 <_spi_m_sync_trans+0xdc>)
1000b6f4:	4798      	blx	r3
1000b6f6:	0003      	movs	r3, r0
1000b6f8:	001a      	movs	r2, r3
1000b6fa:	231f      	movs	r3, #31
1000b6fc:	18fb      	adds	r3, r7, r3
1000b6fe:	701a      	strb	r2, [r3, #0]
	} while (status);
1000b700:	231f      	movs	r3, #31
1000b702:	18fb      	adds	r3, r7, r3
1000b704:	781b      	ldrb	r3, [r3, #0]
1000b706:	2b00      	cmp	r3, #0
1000b708:	d1f1      	bne.n	1000b6ee <_spi_m_sync_trans+0x8a>

	while (rc < msg->size) {
1000b70a:	e009      	b.n	1000b720 <_spi_m_sync_trans+0xbc>
		_spi_tx_check(hw, &ctrl);
1000b70c:	2308      	movs	r3, #8
1000b70e:	18fa      	adds	r2, r7, r3
1000b710:	6a3b      	ldr	r3, [r7, #32]
1000b712:	0011      	movs	r1, r2
1000b714:	0018      	movs	r0, r3
1000b716:	4b0b      	ldr	r3, [pc, #44]	; (1000b744 <_spi_m_sync_trans+0xe0>)
1000b718:	4798      	blx	r3
		//_spi_rx_check(hw, &ctrl); We don't have MISO line
		rc++;
1000b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b71c:	3301      	adds	r3, #1
1000b71e:	627b      	str	r3, [r7, #36]	; 0x24
	while (rc < msg->size) {
1000b720:	683b      	ldr	r3, [r7, #0]
1000b722:	689a      	ldr	r2, [r3, #8]
1000b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000b726:	429a      	cmp	r2, r3
1000b728:	d8f0      	bhi.n	1000b70c <_spi_m_sync_trans+0xa8>
	/* Wait until SPI bus idle */
	//do {
	//	status = _spi_is_write_complete(hw);
	//} while (!status);

	return rc;
1000b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
1000b72c:	0018      	movs	r0, r3
1000b72e:	46bd      	mov	sp, r7
1000b730:	b00a      	add	sp, #40	; 0x28
1000b732:	bd80      	pop	{r7, pc}
1000b734:	1000ff44 	.word	0x1000ff44
1000b738:	1000a5e1 	.word	0x1000a5e1
1000b73c:	1000b247 	.word	0x1000b247
1000b740:	1000b5f5 	.word	0x1000b5f5
1000b744:	1000b615 	.word	0x1000b615

1000b748 <init_logger>:
struct logger active_logger;
uint8_t* logger_ptr;

#define LOGGING_SPI_FLASH_ADDRESS (0x20000) //Half of flash 128KB, 256KB in total

void init_logger() {
1000b748:	b580      	push	{r7, lr}
1000b74a:	b082      	sub	sp, #8
1000b74c:	af00      	add	r7, sp, #0
	spi_flash_clock_init();
1000b74e:	4b1b      	ldr	r3, [pc, #108]	; (1000b7bc <init_logger+0x74>)
1000b750:	4798      	blx	r3
	spi_flash_init();
1000b752:	4b1b      	ldr	r3, [pc, #108]	; (1000b7c0 <init_logger+0x78>)
1000b754:	4798      	blx	r3
	logger_ptr = (uint8_t*) &active_logger;
1000b756:	4b1b      	ldr	r3, [pc, #108]	; (1000b7c4 <init_logger+0x7c>)
1000b758:	4a1b      	ldr	r2, [pc, #108]	; (1000b7c8 <init_logger+0x80>)
1000b75a:	601a      	str	r2, [r3, #0]
	//Load existing records into RAM
	uint32_t length = MAX_DIVE_RECORDS * sizeof(struct dive_record);
1000b75c:	23fa      	movs	r3, #250	; 0xfa
1000b75e:	01db      	lsls	r3, r3, #7
1000b760:	607b      	str	r3, [r7, #4]
	spi_flash_read(active_logger.dive_records, LOGGING_SPI_FLASH_ADDRESS, length);
1000b762:	687a      	ldr	r2, [r7, #4]
1000b764:	2380      	movs	r3, #128	; 0x80
1000b766:	0299      	lsls	r1, r3, #10
1000b768:	4b17      	ldr	r3, [pc, #92]	; (1000b7c8 <init_logger+0x80>)
1000b76a:	0018      	movs	r0, r3
1000b76c:	4b17      	ldr	r3, [pc, #92]	; (1000b7cc <init_logger+0x84>)
1000b76e:	4798      	blx	r3
	active_logger.current_record = 0;
1000b770:	4a15      	ldr	r2, [pc, #84]	; (1000b7c8 <init_logger+0x80>)
1000b772:	23fa      	movs	r3, #250	; 0xfa
1000b774:	01db      	lsls	r3, r3, #7
1000b776:	2100      	movs	r1, #0
1000b778:	50d1      	str	r1, [r2, r3]
	
	while(active_logger.dive_records[active_logger.current_record].timestamp != 0xFFFFFFFF && active_logger.current_record < MAX_DIVE_RECORDS)
1000b77a:	e008      	b.n	1000b78e <init_logger+0x46>
	{
		active_logger.current_record++;
1000b77c:	4a12      	ldr	r2, [pc, #72]	; (1000b7c8 <init_logger+0x80>)
1000b77e:	23fa      	movs	r3, #250	; 0xfa
1000b780:	01db      	lsls	r3, r3, #7
1000b782:	58d3      	ldr	r3, [r2, r3]
1000b784:	1c59      	adds	r1, r3, #1
1000b786:	4a10      	ldr	r2, [pc, #64]	; (1000b7c8 <init_logger+0x80>)
1000b788:	23fa      	movs	r3, #250	; 0xfa
1000b78a:	01db      	lsls	r3, r3, #7
1000b78c:	50d1      	str	r1, [r2, r3]
	while(active_logger.dive_records[active_logger.current_record].timestamp != 0xFFFFFFFF && active_logger.current_record < MAX_DIVE_RECORDS)
1000b78e:	4a0e      	ldr	r2, [pc, #56]	; (1000b7c8 <init_logger+0x80>)
1000b790:	23fa      	movs	r3, #250	; 0xfa
1000b792:	01db      	lsls	r3, r3, #7
1000b794:	58d3      	ldr	r3, [r2, r3]
1000b796:	4a0c      	ldr	r2, [pc, #48]	; (1000b7c8 <init_logger+0x80>)
1000b798:	011b      	lsls	r3, r3, #4
1000b79a:	18d3      	adds	r3, r2, r3
1000b79c:	3304      	adds	r3, #4
1000b79e:	681b      	ldr	r3, [r3, #0]
1000b7a0:	3301      	adds	r3, #1
1000b7a2:	d006      	beq.n	1000b7b2 <init_logger+0x6a>
1000b7a4:	4a08      	ldr	r2, [pc, #32]	; (1000b7c8 <init_logger+0x80>)
1000b7a6:	23fa      	movs	r3, #250	; 0xfa
1000b7a8:	01db      	lsls	r3, r3, #7
1000b7aa:	58d3      	ldr	r3, [r2, r3]
1000b7ac:	4a08      	ldr	r2, [pc, #32]	; (1000b7d0 <init_logger+0x88>)
1000b7ae:	4293      	cmp	r3, r2
1000b7b0:	d9e4      	bls.n	1000b77c <init_logger+0x34>
	}
}
1000b7b2:	46c0      	nop			; (mov r8, r8)
1000b7b4:	46bd      	mov	sp, r7
1000b7b6:	b002      	add	sp, #8
1000b7b8:	bd80      	pop	{r7, pc}
1000b7ba:	46c0      	nop			; (mov r8, r8)
1000b7bc:	1000bc89 	.word	0x1000bc89
1000b7c0:	1000ba09 	.word	0x1000ba09
1000b7c4:	10018fa4 	.word	0x10018fa4
1000b7c8:	100112a0 	.word	0x100112a0
1000b7cc:	1000ba35 	.word	0x1000ba35
1000b7d0:	000007cf 	.word	0x000007cf

1000b7d4 <get_last_dive_id>:

uint32_t get_last_dive_id() {
1000b7d4:	b580      	push	{r7, lr}
1000b7d6:	af00      	add	r7, sp, #0
	//Return 0 if no record
	return active_logger.current_record == 0 ? 0 : active_logger.dive_records[active_logger.current_record - 1].dive_id;
1000b7d8:	4a09      	ldr	r2, [pc, #36]	; (1000b800 <get_last_dive_id+0x2c>)
1000b7da:	23fa      	movs	r3, #250	; 0xfa
1000b7dc:	01db      	lsls	r3, r3, #7
1000b7de:	58d3      	ldr	r3, [r2, r3]
1000b7e0:	2b00      	cmp	r3, #0
1000b7e2:	d008      	beq.n	1000b7f6 <get_last_dive_id+0x22>
1000b7e4:	4a06      	ldr	r2, [pc, #24]	; (1000b800 <get_last_dive_id+0x2c>)
1000b7e6:	23fa      	movs	r3, #250	; 0xfa
1000b7e8:	01db      	lsls	r3, r3, #7
1000b7ea:	58d3      	ldr	r3, [r2, r3]
1000b7ec:	1e5a      	subs	r2, r3, #1
1000b7ee:	4b04      	ldr	r3, [pc, #16]	; (1000b800 <get_last_dive_id+0x2c>)
1000b7f0:	0112      	lsls	r2, r2, #4
1000b7f2:	5cd3      	ldrb	r3, [r2, r3]
1000b7f4:	e000      	b.n	1000b7f8 <get_last_dive_id+0x24>
1000b7f6:	2300      	movs	r3, #0
}
1000b7f8:	0018      	movs	r0, r3
1000b7fa:	46bd      	mov	sp, r7
1000b7fc:	bd80      	pop	{r7, pc}
1000b7fe:	46c0      	nop			; (mov r8, r8)
1000b800:	100112a0 	.word	0x100112a0

1000b804 <log_dive_record>:

uint8_t log_dive_record(struct dive_record* record)
{
1000b804:	b580      	push	{r7, lr}
1000b806:	b082      	sub	sp, #8
1000b808:	af00      	add	r7, sp, #0
1000b80a:	6078      	str	r0, [r7, #4]
	if(active_logger.current_record >= MAX_DIVE_RECORDS)
1000b80c:	4a10      	ldr	r2, [pc, #64]	; (1000b850 <log_dive_record+0x4c>)
1000b80e:	23fa      	movs	r3, #250	; 0xfa
1000b810:	01db      	lsls	r3, r3, #7
1000b812:	58d3      	ldr	r3, [r2, r3]
1000b814:	4a0f      	ldr	r2, [pc, #60]	; (1000b854 <log_dive_record+0x50>)
1000b816:	4293      	cmp	r3, r2
1000b818:	d901      	bls.n	1000b81e <log_dive_record+0x1a>
	{
		return -1;
1000b81a:	23ff      	movs	r3, #255	; 0xff
1000b81c:	e014      	b.n	1000b848 <log_dive_record+0x44>
	}
	return spi_flash_write(record, LOGGING_SPI_FLASH_ADDRESS + active_logger.current_record++ * sizeof(struct dive_record), sizeof(struct dive_record));
1000b81e:	4a0c      	ldr	r2, [pc, #48]	; (1000b850 <log_dive_record+0x4c>)
1000b820:	23fa      	movs	r3, #250	; 0xfa
1000b822:	01db      	lsls	r3, r3, #7
1000b824:	58d3      	ldr	r3, [r2, r3]
1000b826:	1c58      	adds	r0, r3, #1
1000b828:	4909      	ldr	r1, [pc, #36]	; (1000b850 <log_dive_record+0x4c>)
1000b82a:	22fa      	movs	r2, #250	; 0xfa
1000b82c:	01d2      	lsls	r2, r2, #7
1000b82e:	5088      	str	r0, [r1, r2]
1000b830:	2280      	movs	r2, #128	; 0x80
1000b832:	0192      	lsls	r2, r2, #6
1000b834:	4694      	mov	ip, r2
1000b836:	4463      	add	r3, ip
1000b838:	0119      	lsls	r1, r3, #4
1000b83a:	687b      	ldr	r3, [r7, #4]
1000b83c:	2210      	movs	r2, #16
1000b83e:	0018      	movs	r0, r3
1000b840:	4b05      	ldr	r3, [pc, #20]	; (1000b858 <log_dive_record+0x54>)
1000b842:	4798      	blx	r3
1000b844:	0003      	movs	r3, r0
1000b846:	b2db      	uxtb	r3, r3
}
1000b848:	0018      	movs	r0, r3
1000b84a:	46bd      	mov	sp, r7
1000b84c:	b002      	add	sp, #8
1000b84e:	bd80      	pop	{r7, pc}
1000b850:	100112a0 	.word	0x100112a0
1000b854:	000007cf 	.word	0x000007cf
1000b858:	1000bb51 	.word	0x1000bb51

1000b85c <spi_flash_write_enable>:
 *  \brief SPI flash write enable.
 *
 * Enable SPI flash write
 */
static void spi_flash_write_enable(void)
{
1000b85c:	b580      	push	{r7, lr}
1000b85e:	af00      	add	r7, sp, #0
	SPI_FLASH0->READ_CTRL.reg = SPI_FLASH_READ_CTRL_RDATA_COUNT(0);
1000b860:	4b0c      	ldr	r3, [pc, #48]	; (1000b894 <spi_flash_write_enable+0x38>)
1000b862:	2200      	movs	r2, #0
1000b864:	609a      	str	r2, [r3, #8]
	SPI_FLASH0->CMD_BUFFER0.reg = SPI_FLASH_CMD_WRITE_ENABLE;
1000b866:	4b0b      	ldr	r3, [pc, #44]	; (1000b894 <spi_flash_write_enable+0x38>)
1000b868:	2206      	movs	r2, #6
1000b86a:	60da      	str	r2, [r3, #12]
	SPI_FLASH0->DIRECTION.reg = SPI_FLASH_DIRECTION_CMD;
1000b86c:	4b09      	ldr	r3, [pc, #36]	; (1000b894 <spi_flash_write_enable+0x38>)
1000b86e:	2201      	movs	r2, #1
1000b870:	751a      	strb	r2, [r3, #20]
	SPI_FLASH0->DMA_START_ADDRESS.reg = SPI_FLASH_DMA_START_ADDRESS_RESETVALUE;
1000b872:	4b08      	ldr	r3, [pc, #32]	; (1000b894 <spi_flash_write_enable+0x38>)
1000b874:	2200      	movs	r2, #0
1000b876:	61da      	str	r2, [r3, #28]

	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000b878:	4b06      	ldr	r3, [pc, #24]	; (1000b894 <spi_flash_write_enable+0x38>)
1000b87a:	2281      	movs	r2, #129	; 0x81
1000b87c:	605a      	str	r2, [r3, #4]
			SPI_FLASH_TRANSACTION_CTRL_FLASH_TRANS_START | \
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x01);

	while (SPI_FLASH0->IRQ_STATUS.bit.FLASH_TRANS_DONE != \
1000b87e:	46c0      	nop			; (mov r8, r8)
1000b880:	4b04      	ldr	r3, [pc, #16]	; (1000b894 <spi_flash_write_enable+0x38>)
1000b882:	7e1b      	ldrb	r3, [r3, #24]
1000b884:	07db      	lsls	r3, r3, #31
1000b886:	0fdb      	lsrs	r3, r3, #31
1000b888:	b2db      	uxtb	r3, r3
1000b88a:	2b01      	cmp	r3, #1
1000b88c:	d1f8      	bne.n	1000b880 <spi_flash_write_enable+0x24>
			SPI_FLASH_IRQ_STATUS_FLASH_TRANS_DONE) {
		/* Wait for current flash transaction done. */
	}
}
1000b88e:	46c0      	nop			; (mov r8, r8)
1000b890:	46bd      	mov	sp, r7
1000b892:	bd80      	pop	{r7, pc}
1000b894:	40012000 	.word	0x40012000

1000b898 <spi_flash_write_disable>:
 *  \brief SPI flash write disable.
 *
 * Disable SPI flash write
 */
static void spi_flash_write_disable(void)
{
1000b898:	b580      	push	{r7, lr}
1000b89a:	af00      	add	r7, sp, #0
	SPI_FLASH0->READ_CTRL.reg = SPI_FLASH_READ_CTRL_RDATA_COUNT(0);
1000b89c:	4b0d      	ldr	r3, [pc, #52]	; (1000b8d4 <spi_flash_write_disable+0x3c>)
1000b89e:	2200      	movs	r2, #0
1000b8a0:	609a      	str	r2, [r3, #8]
	SPI_FLASH0->CMD_BUFFER0.reg = SPI_FLASH_CMD_WRITE_DISABLE;
1000b8a2:	4b0c      	ldr	r3, [pc, #48]	; (1000b8d4 <spi_flash_write_disable+0x3c>)
1000b8a4:	2204      	movs	r2, #4
1000b8a6:	60da      	str	r2, [r3, #12]
	SPI_FLASH0->DIRECTION.reg = SPI_FLASH_DIRECTION_CMD;
1000b8a8:	4b0a      	ldr	r3, [pc, #40]	; (1000b8d4 <spi_flash_write_disable+0x3c>)
1000b8aa:	2201      	movs	r2, #1
1000b8ac:	751a      	strb	r2, [r3, #20]
	SPI_FLASH0->DMA_START_ADDRESS.reg = SPI_FLASH_DMA_START_ADDRESS_MASK;
1000b8ae:	4b09      	ldr	r3, [pc, #36]	; (1000b8d4 <spi_flash_write_disable+0x3c>)
1000b8b0:	2201      	movs	r2, #1
1000b8b2:	4252      	negs	r2, r2
1000b8b4:	61da      	str	r2, [r3, #28]

	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000b8b6:	4b07      	ldr	r3, [pc, #28]	; (1000b8d4 <spi_flash_write_disable+0x3c>)
1000b8b8:	2281      	movs	r2, #129	; 0x81
1000b8ba:	605a      	str	r2, [r3, #4]
			SPI_FLASH_TRANSACTION_CTRL_FLASH_TRANS_START | \
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x01);

	while (SPI_FLASH0->IRQ_STATUS.bit.FLASH_TRANS_DONE != \
1000b8bc:	46c0      	nop			; (mov r8, r8)
1000b8be:	4b05      	ldr	r3, [pc, #20]	; (1000b8d4 <spi_flash_write_disable+0x3c>)
1000b8c0:	7e1b      	ldrb	r3, [r3, #24]
1000b8c2:	07db      	lsls	r3, r3, #31
1000b8c4:	0fdb      	lsrs	r3, r3, #31
1000b8c6:	b2db      	uxtb	r3, r3
1000b8c8:	2b01      	cmp	r3, #1
1000b8ca:	d1f8      	bne.n	1000b8be <spi_flash_write_disable+0x26>
			SPI_FLASH_IRQ_STATUS_FLASH_TRANS_DONE) {
		/* Wait for current flash transaction done. */
	}
}
1000b8cc:	46c0      	nop			; (mov r8, r8)
1000b8ce:	46bd      	mov	sp, r7
1000b8d0:	bd80      	pop	{r7, pc}
1000b8d2:	46c0      	nop			; (mov r8, r8)
1000b8d4:	40012000 	.word	0x40012000

1000b8d8 <spi_flash_read_status_reg>:
 * Read SPI flash status
 *
 * \return Status register value.
 */
static uint8_t spi_flash_read_status_reg(void)
{
1000b8d8:	b580      	push	{r7, lr}
1000b8da:	b082      	sub	sp, #8
1000b8dc:	af00      	add	r7, sp, #0
	volatile uint32_t status_value;

	SPI_FLASH0->READ_CTRL.reg = SPI_FLASH_READ_CTRL_RDATA_COUNT(0x01);
1000b8de:	4b0e      	ldr	r3, [pc, #56]	; (1000b918 <spi_flash_read_status_reg+0x40>)
1000b8e0:	2201      	movs	r2, #1
1000b8e2:	609a      	str	r2, [r3, #8]
	SPI_FLASH0->CMD_BUFFER0.reg = SPI_FLASH_CMD_READ_STATUS;
1000b8e4:	4b0c      	ldr	r3, [pc, #48]	; (1000b918 <spi_flash_read_status_reg+0x40>)
1000b8e6:	2205      	movs	r2, #5
1000b8e8:	60da      	str	r2, [r3, #12]
	SPI_FLASH0->DIRECTION.reg = SPI_FLASH_DIRECTION_CMD;
1000b8ea:	4b0b      	ldr	r3, [pc, #44]	; (1000b918 <spi_flash_read_status_reg+0x40>)
1000b8ec:	2201      	movs	r2, #1
1000b8ee:	751a      	strb	r2, [r3, #20]
	SPI_FLASH0->DMA_START_ADDRESS.reg = (uint32_t)&status_value;
1000b8f0:	4b09      	ldr	r3, [pc, #36]	; (1000b918 <spi_flash_read_status_reg+0x40>)
1000b8f2:	1d3a      	adds	r2, r7, #4
1000b8f4:	61da      	str	r2, [r3, #28]

	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000b8f6:	4b08      	ldr	r3, [pc, #32]	; (1000b918 <spi_flash_read_status_reg+0x40>)
1000b8f8:	2281      	movs	r2, #129	; 0x81
1000b8fa:	605a      	str	r2, [r3, #4]
			SPI_FLASH_TRANSACTION_CTRL_FLASH_TRANS_START | \
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x01);

	while (SPI_FLASH0->IRQ_STATUS.bit.FLASH_TRANS_DONE != \
1000b8fc:	46c0      	nop			; (mov r8, r8)
1000b8fe:	4b06      	ldr	r3, [pc, #24]	; (1000b918 <spi_flash_read_status_reg+0x40>)
1000b900:	7e1b      	ldrb	r3, [r3, #24]
1000b902:	07db      	lsls	r3, r3, #31
1000b904:	0fdb      	lsrs	r3, r3, #31
1000b906:	b2db      	uxtb	r3, r3
1000b908:	2b01      	cmp	r3, #1
1000b90a:	d1f8      	bne.n	1000b8fe <spi_flash_read_status_reg+0x26>
			SPI_FLASH_IRQ_STATUS_FLASH_TRANS_DONE) {
		/* Wait for current flash transaction done. */
	}

	return (status_value & 0xFF);
1000b90c:	687b      	ldr	r3, [r7, #4]
1000b90e:	b2db      	uxtb	r3, r3
}
1000b910:	0018      	movs	r0, r3
1000b912:	46bd      	mov	sp, r7
1000b914:	b002      	add	sp, #8
1000b916:	bd80      	pop	{r7, pc}
1000b918:	40012000 	.word	0x40012000

1000b91c <spi_flash_page_program>:
 * \param[in]  memory_addr    Start address of memory
 * \param[in]  flash_addr     Start address of the spi flash
 * \param[in]  size           Number of bytes to be programmed to flash
 */
static void spi_flash_page_program(uint32_t flash_addr, uint32_t memory_addr, uint16_t size)
{
1000b91c:	b580      	push	{r7, lr}
1000b91e:	b088      	sub	sp, #32
1000b920:	af00      	add	r7, sp, #0
1000b922:	60f8      	str	r0, [r7, #12]
1000b924:	60b9      	str	r1, [r7, #8]
1000b926:	1dbb      	adds	r3, r7, #6
1000b928:	801a      	strh	r2, [r3, #0]
	unsigned char cmd[8];

	spi_flash_write_enable();
1000b92a:	4b32      	ldr	r3, [pc, #200]	; (1000b9f4 <spi_flash_page_program+0xd8>)
1000b92c:	4798      	blx	r3

	cmd[0] = SPI_FLASH_CMD_PAGE_PROGRAM;
1000b92e:	2314      	movs	r3, #20
1000b930:	18fb      	adds	r3, r7, r3
1000b932:	2202      	movs	r2, #2
1000b934:	701a      	strb	r2, [r3, #0]
	cmd[1] = (unsigned char) (flash_addr >> 16);
1000b936:	68fb      	ldr	r3, [r7, #12]
1000b938:	0c1b      	lsrs	r3, r3, #16
1000b93a:	b2da      	uxtb	r2, r3
1000b93c:	2314      	movs	r3, #20
1000b93e:	18fb      	adds	r3, r7, r3
1000b940:	705a      	strb	r2, [r3, #1]
	cmd[2] = (unsigned char) (flash_addr >> 8);
1000b942:	68fb      	ldr	r3, [r7, #12]
1000b944:	0a1b      	lsrs	r3, r3, #8
1000b946:	b2da      	uxtb	r2, r3
1000b948:	2314      	movs	r3, #20
1000b94a:	18fb      	adds	r3, r7, r3
1000b94c:	709a      	strb	r2, [r3, #2]
	cmd[3] = (unsigned char) (flash_addr);
1000b94e:	68fb      	ldr	r3, [r7, #12]
1000b950:	b2da      	uxtb	r2, r3
1000b952:	2314      	movs	r3, #20
1000b954:	18fb      	adds	r3, r7, r3
1000b956:	70da      	strb	r2, [r3, #3]

	SPI_FLASH0->READ_CTRL.reg = SPI_FLASH_READ_CTRL_RDATA_COUNT(0x0);
1000b958:	4b27      	ldr	r3, [pc, #156]	; (1000b9f8 <spi_flash_page_program+0xdc>)
1000b95a:	2200      	movs	r2, #0
1000b95c:	609a      	str	r2, [r3, #8]
	SPI_FLASH0->CMD_BUFFER0.reg = cmd[0] | (cmd[1] << 8) | (cmd[2] << 16) | (cmd[3] << 24);
1000b95e:	4b26      	ldr	r3, [pc, #152]	; (1000b9f8 <spi_flash_page_program+0xdc>)
1000b960:	2214      	movs	r2, #20
1000b962:	18ba      	adds	r2, r7, r2
1000b964:	7812      	ldrb	r2, [r2, #0]
1000b966:	0011      	movs	r1, r2
1000b968:	2214      	movs	r2, #20
1000b96a:	18ba      	adds	r2, r7, r2
1000b96c:	7852      	ldrb	r2, [r2, #1]
1000b96e:	0212      	lsls	r2, r2, #8
1000b970:	4311      	orrs	r1, r2
1000b972:	2214      	movs	r2, #20
1000b974:	18ba      	adds	r2, r7, r2
1000b976:	7892      	ldrb	r2, [r2, #2]
1000b978:	0412      	lsls	r2, r2, #16
1000b97a:	4311      	orrs	r1, r2
1000b97c:	2214      	movs	r2, #20
1000b97e:	18ba      	adds	r2, r7, r2
1000b980:	78d2      	ldrb	r2, [r2, #3]
1000b982:	0612      	lsls	r2, r2, #24
1000b984:	430a      	orrs	r2, r1
1000b986:	60da      	str	r2, [r3, #12]
	SPI_FLASH0->DIRECTION.reg = SPI_FLASH_DIRECTION_PRO;
1000b988:	4b1b      	ldr	r3, [pc, #108]	; (1000b9f8 <spi_flash_page_program+0xdc>)
1000b98a:	220f      	movs	r2, #15
1000b98c:	751a      	strb	r2, [r3, #20]
	SPI_FLASH0->DMA_START_ADDRESS.reg = memory_addr;
1000b98e:	4b1a      	ldr	r3, [pc, #104]	; (1000b9f8 <spi_flash_page_program+0xdc>)
1000b990:	68ba      	ldr	r2, [r7, #8]
1000b992:	61da      	str	r2, [r3, #28]

	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000b994:	4b18      	ldr	r3, [pc, #96]	; (1000b9f8 <spi_flash_page_program+0xdc>)
			SPI_FLASH_TRANSACTION_CTRL_FLASH_TRANS_START | \
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x04) | \
			SPI_FLASH_TRANSACTION_CTRL_WDATA_COUNT(size);
1000b996:	1dba      	adds	r2, r7, #6
1000b998:	8812      	ldrh	r2, [r2, #0]
1000b99a:	0212      	lsls	r2, r2, #8
1000b99c:	0011      	movs	r1, r2
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x04) | \
1000b99e:	2284      	movs	r2, #132	; 0x84
1000b9a0:	430a      	orrs	r2, r1
	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000b9a2:	605a      	str	r2, [r3, #4]

	while (SPI_FLASH0->IRQ_STATUS.bit.FLASH_TRANS_DONE != \
1000b9a4:	46c0      	nop			; (mov r8, r8)
1000b9a6:	4b14      	ldr	r3, [pc, #80]	; (1000b9f8 <spi_flash_page_program+0xdc>)
1000b9a8:	7e1b      	ldrb	r3, [r3, #24]
1000b9aa:	07db      	lsls	r3, r3, #31
1000b9ac:	0fdb      	lsrs	r3, r3, #31
1000b9ae:	b2db      	uxtb	r3, r3
1000b9b0:	2b01      	cmp	r3, #1
1000b9b2:	d1f8      	bne.n	1000b9a6 <spi_flash_page_program+0x8a>
	}

	/* add additional read_status_reg before the while this gives the flash
	 * memory time to update the registers.
	 */
	for(uint16_t i = 0; i < 0xFFFF; i++) {
1000b9b4:	231e      	movs	r3, #30
1000b9b6:	18fb      	adds	r3, r7, r3
1000b9b8:	2200      	movs	r2, #0
1000b9ba:	801a      	strh	r2, [r3, #0]
1000b9bc:	e006      	b.n	1000b9cc <spi_flash_page_program+0xb0>
1000b9be:	231e      	movs	r3, #30
1000b9c0:	18fb      	adds	r3, r7, r3
1000b9c2:	881a      	ldrh	r2, [r3, #0]
1000b9c4:	231e      	movs	r3, #30
1000b9c6:	18fb      	adds	r3, r7, r3
1000b9c8:	3201      	adds	r2, #1
1000b9ca:	801a      	strh	r2, [r3, #0]
1000b9cc:	231e      	movs	r3, #30
1000b9ce:	18fb      	adds	r3, r7, r3
1000b9d0:	881b      	ldrh	r3, [r3, #0]
1000b9d2:	4a0a      	ldr	r2, [pc, #40]	; (1000b9fc <spi_flash_page_program+0xe0>)
1000b9d4:	4293      	cmp	r3, r2
1000b9d6:	d1f2      	bne.n	1000b9be <spi_flash_page_program+0xa2>
		/* Waiting... */
	}
	//spi_flash_read_status_reg();
	while(spi_flash_read_status_reg() & 0x01);
1000b9d8:	46c0      	nop			; (mov r8, r8)
1000b9da:	4b09      	ldr	r3, [pc, #36]	; (1000ba00 <spi_flash_page_program+0xe4>)
1000b9dc:	4798      	blx	r3
1000b9de:	0003      	movs	r3, r0
1000b9e0:	001a      	movs	r2, r3
1000b9e2:	2301      	movs	r3, #1
1000b9e4:	4013      	ands	r3, r2
1000b9e6:	d1f8      	bne.n	1000b9da <spi_flash_page_program+0xbe>
	spi_flash_write_disable();
1000b9e8:	4b06      	ldr	r3, [pc, #24]	; (1000ba04 <spi_flash_page_program+0xe8>)
1000b9ea:	4798      	blx	r3
}
1000b9ec:	46c0      	nop			; (mov r8, r8)
1000b9ee:	46bd      	mov	sp, r7
1000b9f0:	b008      	add	sp, #32
1000b9f2:	bd80      	pop	{r7, pc}
1000b9f4:	1000b85d 	.word	0x1000b85d
1000b9f8:	40012000 	.word	0x40012000
1000b9fc:	0000ffff 	.word	0x0000ffff
1000ba00:	1000b8d9 	.word	0x1000b8d9
1000ba04:	1000b899 	.word	0x1000b899

1000ba08 <spi_flash_init>:
 * \brief Initializes the SPI Flash module
 *
 * Initializes the SPI Flash module
 */
void spi_flash_init(void)
{
1000ba08:	b580      	push	{r7, lr}
1000ba0a:	af00      	add	r7, sp, #0
	/* PINMUX init */
	LPMCU_MISC_REGS0->PINMUX_SEL_3.reg = \
1000ba0c:	4b05      	ldr	r3, [pc, #20]	; (1000ba24 <spi_flash_init+0x1c>)
1000ba0e:	4a06      	ldr	r2, [pc, #24]	; (1000ba28 <spi_flash_init+0x20>)
1000ba10:	669a      	str	r2, [r3, #104]	; 0x68
							LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_0_SEL_SPI_FLASH0_SCK | \ 
							LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_1_SEL_SPI_FLASH0_TXD | \
							LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_2_SEL_SPI_FLASH0_SSN | \
							LPMCU_MISC_REGS_PINMUX_SEL_3_LP_SIP_3_SEL_SPI_FLASH0_RXD;

	SPI_FLASH0->MODE_CTRL.reg = SPI_FLASH_MODE_CTRL_RESETVALUE;
1000ba12:	4b06      	ldr	r3, [pc, #24]	; (1000ba2c <spi_flash_init+0x24>)
1000ba14:	2200      	movs	r2, #0
1000ba16:	701a      	strb	r2, [r3, #0]
	spi_flash_leave_low_power_mode();
1000ba18:	4b05      	ldr	r3, [pc, #20]	; (1000ba30 <spi_flash_init+0x28>)
1000ba1a:	4798      	blx	r3
}
1000ba1c:	46c0      	nop			; (mov r8, r8)
1000ba1e:	46bd      	mov	sp, r7
1000ba20:	bd80      	pop	{r7, pc}
1000ba22:	46c0      	nop			; (mov r8, r8)
1000ba24:	4000b000 	.word	0x4000b000
1000ba28:	00004231 	.word	0x00004231
1000ba2c:	40012000 	.word	0x40012000
1000ba30:	1000bc4d 	.word	0x1000bc4d

1000ba34 <spi_flash_read>:
 * \param[in]  read_buf    Pointer to buffer to read into
 * \param[in]  flash_addr  Flash memory address to read from
 * \param[in]  size        Data length to be read, must be less than or equal to FLASH_PAGE_SIZE
 */
void spi_flash_read(uint8_t *read_buf, uint32_t flash_addr, uint32_t size)
{
1000ba34:	b580      	push	{r7, lr}
1000ba36:	b08a      	sub	sp, #40	; 0x28
1000ba38:	af00      	add	r7, sp, #0
1000ba3a:	60f8      	str	r0, [r7, #12]
1000ba3c:	60b9      	str	r1, [r7, #8]
1000ba3e:	607a      	str	r2, [r7, #4]
	uint8_t   cmd[8] = {0, };
1000ba40:	2314      	movs	r3, #20
1000ba42:	18fb      	adds	r3, r7, r3
1000ba44:	0018      	movs	r0, r3
1000ba46:	2308      	movs	r3, #8
1000ba48:	001a      	movs	r2, r3
1000ba4a:	2100      	movs	r1, #0
1000ba4c:	4b3d      	ldr	r3, [pc, #244]	; (1000bb44 <spi_flash_read+0x110>)
1000ba4e:	4798      	blx	r3
	uint32_t  memory_addr;
	uint32_t  i=0;
1000ba50:	2300      	movs	r3, #0
1000ba52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t   *data = read_buf;
1000ba54:	68fb      	ldr	r3, [r7, #12]
1000ba56:	623b      	str	r3, [r7, #32]

	/* Get the destination buffer Address. */
	if((flash_addr + size) > FLASH_MEMORY_SIZE) {
1000ba58:	68ba      	ldr	r2, [r7, #8]
1000ba5a:	687b      	ldr	r3, [r7, #4]
1000ba5c:	18d2      	adds	r2, r2, r3
1000ba5e:	2380      	movs	r3, #128	; 0x80
1000ba60:	02db      	lsls	r3, r3, #11
1000ba62:	429a      	cmp	r2, r3
1000ba64:	d90e      	bls.n	1000ba84 <spi_flash_read+0x50>
		for(i=0; i < size; i++) {
1000ba66:	2300      	movs	r3, #0
1000ba68:	627b      	str	r3, [r7, #36]	; 0x24
1000ba6a:	e007      	b.n	1000ba7c <spi_flash_read+0x48>
			data[i] = 0;
1000ba6c:	6a3a      	ldr	r2, [r7, #32]
1000ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba70:	18d3      	adds	r3, r2, r3
1000ba72:	2200      	movs	r2, #0
1000ba74:	701a      	strb	r2, [r3, #0]
		for(i=0; i < size; i++) {
1000ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000ba78:	3301      	adds	r3, #1
1000ba7a:	627b      	str	r3, [r7, #36]	; 0x24
1000ba7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000ba7e:	687b      	ldr	r3, [r7, #4]
1000ba80:	429a      	cmp	r2, r3
1000ba82:	d3f3      	bcc.n	1000ba6c <spi_flash_read+0x38>
		}
	}

	memory_addr = (unsigned long)read_buf;
1000ba84:	68fb      	ldr	r3, [r7, #12]
1000ba86:	61fb      	str	r3, [r7, #28]

	/* Perform read operation. */
	cmd[0] = SPI_FLASH_CMD_READ_HIGH_SPEED;
1000ba88:	2314      	movs	r3, #20
1000ba8a:	18fb      	adds	r3, r7, r3
1000ba8c:	220b      	movs	r2, #11
1000ba8e:	701a      	strb	r2, [r3, #0]
	cmd[1] = (unsigned char) (flash_addr >> 16);
1000ba90:	68bb      	ldr	r3, [r7, #8]
1000ba92:	0c1b      	lsrs	r3, r3, #16
1000ba94:	b2da      	uxtb	r2, r3
1000ba96:	2314      	movs	r3, #20
1000ba98:	18fb      	adds	r3, r7, r3
1000ba9a:	705a      	strb	r2, [r3, #1]
	cmd[2] = (unsigned char) (flash_addr >> 8);
1000ba9c:	68bb      	ldr	r3, [r7, #8]
1000ba9e:	0a1b      	lsrs	r3, r3, #8
1000baa0:	b2da      	uxtb	r2, r3
1000baa2:	2314      	movs	r3, #20
1000baa4:	18fb      	adds	r3, r7, r3
1000baa6:	709a      	strb	r2, [r3, #2]
	cmd[3] = (unsigned char) (flash_addr);
1000baa8:	68bb      	ldr	r3, [r7, #8]
1000baaa:	b2da      	uxtb	r2, r3
1000baac:	2314      	movs	r3, #20
1000baae:	18fb      	adds	r3, r7, r3
1000bab0:	70da      	strb	r2, [r3, #3]
	cmd[4] = 0xA5;
1000bab2:	2314      	movs	r3, #20
1000bab4:	18fb      	adds	r3, r7, r3
1000bab6:	22a5      	movs	r2, #165	; 0xa5
1000bab8:	711a      	strb	r2, [r3, #4]

	SPI_FLASH0->READ_CTRL.reg = SPI_FLASH_READ_CTRL_RDATA_COUNT(size);
1000baba:	4b23      	ldr	r3, [pc, #140]	; (1000bb48 <spi_flash_read+0x114>)
1000babc:	687a      	ldr	r2, [r7, #4]
1000babe:	0212      	lsls	r2, r2, #8
1000bac0:	0a12      	lsrs	r2, r2, #8
1000bac2:	609a      	str	r2, [r3, #8]
	SPI_FLASH0->CMD_BUFFER0.reg = cmd[0] | (cmd[1] << 8) | (cmd[2] << 16) | (cmd[3] << 24);
1000bac4:	4b20      	ldr	r3, [pc, #128]	; (1000bb48 <spi_flash_read+0x114>)
1000bac6:	2214      	movs	r2, #20
1000bac8:	18ba      	adds	r2, r7, r2
1000baca:	7812      	ldrb	r2, [r2, #0]
1000bacc:	0011      	movs	r1, r2
1000bace:	2214      	movs	r2, #20
1000bad0:	18ba      	adds	r2, r7, r2
1000bad2:	7852      	ldrb	r2, [r2, #1]
1000bad4:	0212      	lsls	r2, r2, #8
1000bad6:	4311      	orrs	r1, r2
1000bad8:	2214      	movs	r2, #20
1000bada:	18ba      	adds	r2, r7, r2
1000badc:	7892      	ldrb	r2, [r2, #2]
1000bade:	0412      	lsls	r2, r2, #16
1000bae0:	4311      	orrs	r1, r2
1000bae2:	2214      	movs	r2, #20
1000bae4:	18ba      	adds	r2, r7, r2
1000bae6:	78d2      	ldrb	r2, [r2, #3]
1000bae8:	0612      	lsls	r2, r2, #24
1000baea:	430a      	orrs	r2, r1
1000baec:	60da      	str	r2, [r3, #12]
	SPI_FLASH0->CMD_BUFFER1.reg = cmd[4];
1000baee:	4b16      	ldr	r3, [pc, #88]	; (1000bb48 <spi_flash_read+0x114>)
1000baf0:	2214      	movs	r2, #20
1000baf2:	18ba      	adds	r2, r7, r2
1000baf4:	7912      	ldrb	r2, [r2, #4]
1000baf6:	611a      	str	r2, [r3, #16]
	SPI_FLASH0->DIRECTION.reg = SPI_FLASH_DIRECTION_READ;
1000baf8:	4b13      	ldr	r3, [pc, #76]	; (1000bb48 <spi_flash_read+0x114>)
1000bafa:	221f      	movs	r2, #31
1000bafc:	751a      	strb	r2, [r3, #20]
	SPI_FLASH0->DMA_START_ADDRESS.reg = memory_addr;
1000bafe:	4b12      	ldr	r3, [pc, #72]	; (1000bb48 <spi_flash_read+0x114>)
1000bb00:	69fa      	ldr	r2, [r7, #28]
1000bb02:	61da      	str	r2, [r3, #28]

	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000bb04:	4b10      	ldr	r3, [pc, #64]	; (1000bb48 <spi_flash_read+0x114>)
1000bb06:	2285      	movs	r2, #133	; 0x85
1000bb08:	605a      	str	r2, [r3, #4]
			SPI_FLASH_TRANSACTION_CTRL_FLASH_TRANS_START | \
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x05);

	for (i = 0; i < 0xFF; i++) {
1000bb0a:	2300      	movs	r3, #0
1000bb0c:	627b      	str	r3, [r7, #36]	; 0x24
1000bb0e:	e002      	b.n	1000bb16 <spi_flash_read+0xe2>
1000bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb12:	3301      	adds	r3, #1
1000bb14:	627b      	str	r3, [r7, #36]	; 0x24
1000bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000bb18:	2bfe      	cmp	r3, #254	; 0xfe
1000bb1a:	d9f9      	bls.n	1000bb10 <spi_flash_read+0xdc>
		/* Waiting...*/
	}
	while ((SPI_FLASH0->IRQ_STATUS.bit.FLASH_TRANS_DONE != \
1000bb1c:	46c0      	nop			; (mov r8, r8)
1000bb1e:	4b0a      	ldr	r3, [pc, #40]	; (1000bb48 <spi_flash_read+0x114>)
1000bb20:	7e1b      	ldrb	r3, [r3, #24]
1000bb22:	07db      	lsls	r3, r3, #31
1000bb24:	0fdb      	lsrs	r3, r3, #31
1000bb26:	b2db      	uxtb	r3, r3
1000bb28:	2b01      	cmp	r3, #1
1000bb2a:	d006      	beq.n	1000bb3a <spi_flash_read+0x106>
			SPI_FLASH_IRQ_STATUS_FLASH_TRANS_DONE) && \
			(spi_flash_read_status_reg() & 0x01)){
1000bb2c:	4b07      	ldr	r3, [pc, #28]	; (1000bb4c <spi_flash_read+0x118>)
1000bb2e:	4798      	blx	r3
1000bb30:	0003      	movs	r3, r0
1000bb32:	001a      	movs	r2, r3
1000bb34:	2301      	movs	r3, #1
1000bb36:	4013      	ands	r3, r2
			SPI_FLASH_IRQ_STATUS_FLASH_TRANS_DONE) && \
1000bb38:	d1f1      	bne.n	1000bb1e <spi_flash_read+0xea>
		/* Wait for current flash transaction done. */
	}
}
1000bb3a:	46c0      	nop			; (mov r8, r8)
1000bb3c:	46bd      	mov	sp, r7
1000bb3e:	b00a      	add	sp, #40	; 0x28
1000bb40:	bd80      	pop	{r7, pc}
1000bb42:	46c0      	nop			; (mov r8, r8)
1000bb44:	1000ef75 	.word	0x1000ef75
1000bb48:	40012000 	.word	0x40012000
1000bb4c:	1000b8d9 	.word	0x1000b8d9

1000bb50 <spi_flash_write>:
 * \param[in]  flash_addr   Flash memory address to write to
 * \param[in]  size         Data length to be written, must be less than or
 *                          equal to FLASH_PAGE_SIZE
 */
int8_t spi_flash_write(void *write_buf, uint32_t flash_addr, uint32_t size)
{
1000bb50:	b580      	push	{r7, lr}
1000bb52:	b08a      	sub	sp, #40	; 0x28
1000bb54:	af00      	add	r7, sp, #0
1000bb56:	60f8      	str	r0, [r7, #12]
1000bb58:	60b9      	str	r1, [r7, #8]
1000bb5a:	607a      	str	r2, [r7, #4]
	int8_t      ret = -1;
1000bb5c:	2327      	movs	r3, #39	; 0x27
1000bb5e:	18fb      	adds	r3, r7, r3
1000bb60:	22ff      	movs	r2, #255	; 0xff
1000bb62:	701a      	strb	r2, [r3, #0]
	uint32_t    write_size;
	uint32_t    offset;
	uint32_t    memory_addr;

	for (uint32_t i = 0; i < 0x1FFFF; i++) {
1000bb64:	2300      	movs	r3, #0
1000bb66:	61fb      	str	r3, [r7, #28]
1000bb68:	e002      	b.n	1000bb70 <spi_flash_write+0x20>
1000bb6a:	69fb      	ldr	r3, [r7, #28]
1000bb6c:	3301      	adds	r3, #1
1000bb6e:	61fb      	str	r3, [r7, #28]
1000bb70:	69fb      	ldr	r3, [r7, #28]
1000bb72:	4a34      	ldr	r2, [pc, #208]	; (1000bc44 <spi_flash_write+0xf4>)
1000bb74:	4293      	cmp	r3, r2
1000bb76:	d9f8      	bls.n	1000bb6a <spi_flash_write+0x1a>
		/* Waiting...*/
	}
	if((write_buf != NULL) && (size != 0)) {
1000bb78:	68fb      	ldr	r3, [r7, #12]
1000bb7a:	2b00      	cmp	r3, #0
1000bb7c:	d059      	beq.n	1000bc32 <spi_flash_write+0xe2>
1000bb7e:	687b      	ldr	r3, [r7, #4]
1000bb80:	2b00      	cmp	r3, #0
1000bb82:	d056      	beq.n	1000bc32 <spi_flash_write+0xe2>
		/* Ensure the write size does not exceed the flash limit. */
		if((flash_addr + size) <= FLASH_MEMORY_SIZE) {
1000bb84:	68ba      	ldr	r2, [r7, #8]
1000bb86:	687b      	ldr	r3, [r7, #4]
1000bb88:	18d2      	adds	r2, r2, r3
1000bb8a:	2380      	movs	r3, #128	; 0x80
1000bb8c:	02db      	lsls	r3, r3, #11
1000bb8e:	429a      	cmp	r2, r3
1000bb90:	d84f      	bhi.n	1000bc32 <spi_flash_write+0xe2>
			/* Get the destination buffer Address. */
			memory_addr = (unsigned long)write_buf;
1000bb92:	68fb      	ldr	r3, [r7, #12]
1000bb94:	623b      	str	r3, [r7, #32]
			/* Perform read operation. */
			offset = flash_addr % FLASH_PAGE_SIZE;
1000bb96:	68bb      	ldr	r3, [r7, #8]
1000bb98:	22ff      	movs	r2, #255	; 0xff
1000bb9a:	4013      	ands	r3, r2
1000bb9c:	61bb      	str	r3, [r7, #24]

			/* First part of data in the address page. */
			if (offset) {
1000bb9e:	69bb      	ldr	r3, [r7, #24]
1000bba0:	2b00      	cmp	r3, #0
1000bba2:	d024      	beq.n	1000bbee <spi_flash_write+0x9e>
				write_size = FLASH_PAGE_SIZE - offset;
1000bba4:	69bb      	ldr	r3, [r7, #24]
1000bba6:	2280      	movs	r2, #128	; 0x80
1000bba8:	0052      	lsls	r2, r2, #1
1000bbaa:	1ad3      	subs	r3, r2, r3
1000bbac:	617b      	str	r3, [r7, #20]
				spi_flash_page_program(flash_addr, memory_addr, min(size, write_size));
1000bbae:	697a      	ldr	r2, [r7, #20]
1000bbb0:	687b      	ldr	r3, [r7, #4]
1000bbb2:	4293      	cmp	r3, r2
1000bbb4:	d900      	bls.n	1000bbb8 <spi_flash_write+0x68>
1000bbb6:	0013      	movs	r3, r2
1000bbb8:	b29a      	uxth	r2, r3
1000bbba:	6a39      	ldr	r1, [r7, #32]
1000bbbc:	68bb      	ldr	r3, [r7, #8]
1000bbbe:	0018      	movs	r0, r3
1000bbc0:	4b21      	ldr	r3, [pc, #132]	; (1000bc48 <spi_flash_write+0xf8>)
1000bbc2:	4798      	blx	r3
				if (size < write_size) {
1000bbc4:	687a      	ldr	r2, [r7, #4]
1000bbc6:	697b      	ldr	r3, [r7, #20]
1000bbc8:	429a      	cmp	r2, r3
1000bbca:	d204      	bcs.n	1000bbd6 <spi_flash_write+0x86>
					ret = 0;
1000bbcc:	2327      	movs	r3, #39	; 0x27
1000bbce:	18fb      	adds	r3, r7, r3
1000bbd0:	2200      	movs	r2, #0
1000bbd2:	701a      	strb	r2, [r3, #0]
					goto EXIT;
1000bbd4:	e02d      	b.n	1000bc32 <spi_flash_write+0xe2>
				}
				memory_addr += write_size;
1000bbd6:	6a3a      	ldr	r2, [r7, #32]
1000bbd8:	697b      	ldr	r3, [r7, #20]
1000bbda:	18d3      	adds	r3, r2, r3
1000bbdc:	623b      	str	r3, [r7, #32]
				flash_addr += write_size;
1000bbde:	68ba      	ldr	r2, [r7, #8]
1000bbe0:	697b      	ldr	r3, [r7, #20]
1000bbe2:	18d3      	adds	r3, r2, r3
1000bbe4:	60bb      	str	r3, [r7, #8]
				size -= write_size;
1000bbe6:	687a      	ldr	r2, [r7, #4]
1000bbe8:	697b      	ldr	r3, [r7, #20]
1000bbea:	1ad3      	subs	r3, r2, r3
1000bbec:	607b      	str	r3, [r7, #4]
			}
			do {
				write_size = min(size, FLASH_PAGE_SIZE);
1000bbee:	687b      	ldr	r3, [r7, #4]
1000bbf0:	2280      	movs	r2, #128	; 0x80
1000bbf2:	0052      	lsls	r2, r2, #1
1000bbf4:	4293      	cmp	r3, r2
1000bbf6:	d901      	bls.n	1000bbfc <spi_flash_write+0xac>
1000bbf8:	2380      	movs	r3, #128	; 0x80
1000bbfa:	005b      	lsls	r3, r3, #1
1000bbfc:	617b      	str	r3, [r7, #20]

				/* Write complete page or the remaining data. */
				spi_flash_page_program(flash_addr, memory_addr, write_size);
1000bbfe:	697b      	ldr	r3, [r7, #20]
1000bc00:	b29a      	uxth	r2, r3
1000bc02:	6a39      	ldr	r1, [r7, #32]
1000bc04:	68bb      	ldr	r3, [r7, #8]
1000bc06:	0018      	movs	r0, r3
1000bc08:	4b0f      	ldr	r3, [pc, #60]	; (1000bc48 <spi_flash_write+0xf8>)
1000bc0a:	4798      	blx	r3
				memory_addr += write_size;
1000bc0c:	6a3a      	ldr	r2, [r7, #32]
1000bc0e:	697b      	ldr	r3, [r7, #20]
1000bc10:	18d3      	adds	r3, r2, r3
1000bc12:	623b      	str	r3, [r7, #32]
				flash_addr += write_size;
1000bc14:	68ba      	ldr	r2, [r7, #8]
1000bc16:	697b      	ldr	r3, [r7, #20]
1000bc18:	18d3      	adds	r3, r2, r3
1000bc1a:	60bb      	str	r3, [r7, #8]
				size -= write_size;
1000bc1c:	687a      	ldr	r2, [r7, #4]
1000bc1e:	697b      	ldr	r3, [r7, #20]
1000bc20:	1ad3      	subs	r3, r2, r3
1000bc22:	607b      	str	r3, [r7, #4]
			} while (size > 0);
1000bc24:	687b      	ldr	r3, [r7, #4]
1000bc26:	2b00      	cmp	r3, #0
1000bc28:	d1e1      	bne.n	1000bbee <spi_flash_write+0x9e>
			ret = 0;
1000bc2a:	2327      	movs	r3, #39	; 0x27
1000bc2c:	18fb      	adds	r3, r7, r3
1000bc2e:	2200      	movs	r2, #0
1000bc30:	701a      	strb	r2, [r3, #0]
		}
	}
	EXIT:
	return ret;
1000bc32:	2327      	movs	r3, #39	; 0x27
1000bc34:	18fb      	adds	r3, r7, r3
1000bc36:	781b      	ldrb	r3, [r3, #0]
1000bc38:	b25b      	sxtb	r3, r3
}
1000bc3a:	0018      	movs	r0, r3
1000bc3c:	46bd      	mov	sp, r7
1000bc3e:	b00a      	add	sp, #40	; 0x28
1000bc40:	bd80      	pop	{r7, pc}
1000bc42:	46c0      	nop			; (mov r8, r8)
1000bc44:	0001fffe 	.word	0x0001fffe
1000bc48:	1000b91d 	.word	0x1000b91d

1000bc4c <spi_flash_leave_low_power_mode>:
 * \brief Exit SPI Flash Low power mode
 *
 * Exit SPI Flash Low power mode
 */
void spi_flash_leave_low_power_mode(void)
{
1000bc4c:	b580      	push	{r7, lr}
1000bc4e:	af00      	add	r7, sp, #0
	SPI_FLASH0->READ_CTRL.reg = SPI_FLASH_READ_CTRL_RDATA_COUNT(0x0);
1000bc50:	4b0c      	ldr	r3, [pc, #48]	; (1000bc84 <spi_flash_leave_low_power_mode+0x38>)
1000bc52:	2200      	movs	r2, #0
1000bc54:	609a      	str	r2, [r3, #8]
	SPI_FLASH0->CMD_BUFFER0.reg = SPI_FLASH_CMD_LEAVE_LOW_POWER;
1000bc56:	4b0b      	ldr	r3, [pc, #44]	; (1000bc84 <spi_flash_leave_low_power_mode+0x38>)
1000bc58:	22ab      	movs	r2, #171	; 0xab
1000bc5a:	60da      	str	r2, [r3, #12]
	SPI_FLASH0->DIRECTION.reg = SPI_FLASH_DIRECTION_CMD;
1000bc5c:	4b09      	ldr	r3, [pc, #36]	; (1000bc84 <spi_flash_leave_low_power_mode+0x38>)
1000bc5e:	2201      	movs	r2, #1
1000bc60:	751a      	strb	r2, [r3, #20]
	SPI_FLASH0->DMA_START_ADDRESS.reg = 0x0;
1000bc62:	4b08      	ldr	r3, [pc, #32]	; (1000bc84 <spi_flash_leave_low_power_mode+0x38>)
1000bc64:	2200      	movs	r2, #0
1000bc66:	61da      	str	r2, [r3, #28]

	SPI_FLASH0->TRANSACTION_CTRL.reg = \
1000bc68:	4b06      	ldr	r3, [pc, #24]	; (1000bc84 <spi_flash_leave_low_power_mode+0x38>)
1000bc6a:	2281      	movs	r2, #129	; 0x81
1000bc6c:	605a      	str	r2, [r3, #4]
			SPI_FLASH_TRANSACTION_CTRL_FLASH_TRANS_START | \
			SPI_FLASH_TRANSACTION_CTRL_CMD_COUNT(0x01);

	while (SPI_FLASH0->IRQ_STATUS.bit.FLASH_TRANS_DONE != \
1000bc6e:	46c0      	nop			; (mov r8, r8)
1000bc70:	4b04      	ldr	r3, [pc, #16]	; (1000bc84 <spi_flash_leave_low_power_mode+0x38>)
1000bc72:	7e1b      	ldrb	r3, [r3, #24]
1000bc74:	07db      	lsls	r3, r3, #31
1000bc76:	0fdb      	lsrs	r3, r3, #31
1000bc78:	b2db      	uxtb	r3, r3
1000bc7a:	2b01      	cmp	r3, #1
1000bc7c:	d1f8      	bne.n	1000bc70 <spi_flash_leave_low_power_mode+0x24>
			SPI_FLASH_IRQ_STATUS_FLASH_TRANS_DONE) {
		/* Wait for current flash transaction done. */
	}
}
1000bc7e:	46c0      	nop			; (mov r8, r8)
1000bc80:	46bd      	mov	sp, r7
1000bc82:	bd80      	pop	{r7, pc}
1000bc84:	40012000 	.word	0x40012000

1000bc88 <spi_flash_clock_init>:

/**
 * \brief Initializes the SPI Flash module
 */
void spi_flash_clock_init(void)
{	
1000bc88:	b580      	push	{r7, lr}
1000bc8a:	af00      	add	r7, sp, #0
	/* Reset SPI_Flash */
	system_peripheral_reset(PERIPHERAL_SPI_FLASH);
1000bc8c:	2000      	movs	r0, #0
1000bc8e:	4b07      	ldr	r3, [pc, #28]	; (1000bcac <spi_flash_clock_init+0x24>)
1000bc90:	4798      	blx	r3
	system_peripheral_reset(PERIPHERAL_SPI_FLASH_IF);
1000bc92:	2037      	movs	r0, #55	; 0x37
1000bc94:	4b05      	ldr	r3, [pc, #20]	; (1000bcac <spi_flash_clock_init+0x24>)
1000bc96:	4798      	blx	r3
	/* SPI_Flash core clock enable */
	system_clock_peripheral_enable(PERIPHERAL_SPI_FLASH);
1000bc98:	2000      	movs	r0, #0
1000bc9a:	4b05      	ldr	r3, [pc, #20]	; (1000bcb0 <spi_flash_clock_init+0x28>)
1000bc9c:	4798      	blx	r3
	/* change clock speed */
	system_clock_peripheral_freq_config(PERIPHERAL_SPI_FLASH, CLOCK_FREQ_13_MHZ);
1000bc9e:	2101      	movs	r1, #1
1000bca0:	2000      	movs	r0, #0
1000bca2:	4b04      	ldr	r3, [pc, #16]	; (1000bcb4 <spi_flash_clock_init+0x2c>)
1000bca4:	4798      	blx	r3
}
1000bca6:	46c0      	nop			; (mov r8, r8)
1000bca8:	46bd      	mov	sp, r7
1000bcaa:	bd80      	pop	{r7, pc}
1000bcac:	1000c629 	.word	0x1000c629
1000bcb0:	1000bcb9 	.word	0x1000bcb9
1000bcb4:	1000c3cd 	.word	0x1000c3cd

1000bcb8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000bcb8:	b580      	push	{r7, lr}
1000bcba:	b082      	sub	sp, #8
1000bcbc:	af00      	add	r7, sp, #0
1000bcbe:	0002      	movs	r2, r0
1000bcc0:	1dfb      	adds	r3, r7, #7
1000bcc2:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000bcc4:	1dfb      	adds	r3, r7, #7
1000bcc6:	781b      	ldrb	r3, [r3, #0]
1000bcc8:	2b35      	cmp	r3, #53	; 0x35
1000bcca:	d900      	bls.n	1000bcce <system_clock_peripheral_enable+0x16>
1000bccc:	e1a9      	b.n	1000c022 <system_clock_peripheral_enable+0x36a>
1000bcce:	009a      	lsls	r2, r3, #2
1000bcd0:	4bd7      	ldr	r3, [pc, #860]	; (1000c030 <system_clock_peripheral_enable+0x378>)
1000bcd2:	18d3      	adds	r3, r2, r3
1000bcd4:	681b      	ldr	r3, [r3, #0]
1000bcd6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcd8:	4bd6      	ldr	r3, [pc, #856]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bcda:	4ad6      	ldr	r2, [pc, #856]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bcdc:	68d2      	ldr	r2, [r2, #12]
1000bcde:	2102      	movs	r1, #2
1000bce0:	430a      	orrs	r2, r1
1000bce2:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bce4:	e19f      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bce6:	4bd3      	ldr	r3, [pc, #844]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bce8:	4ad2      	ldr	r2, [pc, #840]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bcea:	68d2      	ldr	r2, [r2, #12]
1000bcec:	2104      	movs	r1, #4
1000bcee:	430a      	orrs	r2, r1
1000bcf0:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bcf2:	e198      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bcf4:	4bcf      	ldr	r3, [pc, #828]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bcf6:	4acf      	ldr	r2, [pc, #828]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bcf8:	68d2      	ldr	r2, [r2, #12]
1000bcfa:	2108      	movs	r1, #8
1000bcfc:	430a      	orrs	r2, r1
1000bcfe:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bd00:	e191      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd02:	4bcc      	ldr	r3, [pc, #816]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd04:	4acb      	ldr	r2, [pc, #812]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd06:	68d2      	ldr	r2, [r2, #12]
1000bd08:	2110      	movs	r1, #16
1000bd0a:	430a      	orrs	r2, r1
1000bd0c:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bd0e:	e18a      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd10:	4bc8      	ldr	r3, [pc, #800]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd12:	4ac8      	ldr	r2, [pc, #800]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd14:	68d2      	ldr	r2, [r2, #12]
1000bd16:	2120      	movs	r1, #32
1000bd18:	430a      	orrs	r2, r1
1000bd1a:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bd1c:	e183      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd1e:	4bc5      	ldr	r3, [pc, #788]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd20:	4ac4      	ldr	r2, [pc, #784]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd22:	68d2      	ldr	r2, [r2, #12]
1000bd24:	2180      	movs	r1, #128	; 0x80
1000bd26:	430a      	orrs	r2, r1
1000bd28:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bd2a:	e17c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd2c:	4bc1      	ldr	r3, [pc, #772]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd2e:	4ac1      	ldr	r2, [pc, #772]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd30:	68d2      	ldr	r2, [r2, #12]
1000bd32:	2180      	movs	r1, #128	; 0x80
1000bd34:	0049      	lsls	r1, r1, #1
1000bd36:	430a      	orrs	r2, r1
1000bd38:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bd3a:	e174      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd3c:	4bbd      	ldr	r3, [pc, #756]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd3e:	4abd      	ldr	r2, [pc, #756]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd40:	68d2      	ldr	r2, [r2, #12]
1000bd42:	2180      	movs	r1, #128	; 0x80
1000bd44:	0109      	lsls	r1, r1, #4
1000bd46:	430a      	orrs	r2, r1
1000bd48:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bd4a:	e16c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd4c:	4bb9      	ldr	r3, [pc, #740]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd4e:	4ab9      	ldr	r2, [pc, #740]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd50:	68d2      	ldr	r2, [r2, #12]
1000bd52:	2180      	movs	r1, #128	; 0x80
1000bd54:	0149      	lsls	r1, r1, #5
1000bd56:	430a      	orrs	r2, r1
1000bd58:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bd5a:	e164      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd5c:	4bb5      	ldr	r3, [pc, #724]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd5e:	4ab5      	ldr	r2, [pc, #724]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd60:	68d2      	ldr	r2, [r2, #12]
1000bd62:	2180      	movs	r1, #128	; 0x80
1000bd64:	0189      	lsls	r1, r1, #6
1000bd66:	430a      	orrs	r2, r1
1000bd68:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bd6a:	e15c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd6c:	4bb1      	ldr	r3, [pc, #708]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd6e:	4ab1      	ldr	r2, [pc, #708]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd70:	68d2      	ldr	r2, [r2, #12]
1000bd72:	2180      	movs	r1, #128	; 0x80
1000bd74:	01c9      	lsls	r1, r1, #7
1000bd76:	430a      	orrs	r2, r1
1000bd78:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bd7a:	e154      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd7c:	4bad      	ldr	r3, [pc, #692]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd7e:	4aad      	ldr	r2, [pc, #692]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd80:	68d2      	ldr	r2, [r2, #12]
1000bd82:	2180      	movs	r1, #128	; 0x80
1000bd84:	0209      	lsls	r1, r1, #8
1000bd86:	430a      	orrs	r2, r1
1000bd88:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bd8a:	e14c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd8c:	4ba9      	ldr	r3, [pc, #676]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd8e:	4aa9      	ldr	r2, [pc, #676]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd90:	68d2      	ldr	r2, [r2, #12]
1000bd92:	2180      	movs	r1, #128	; 0x80
1000bd94:	0249      	lsls	r1, r1, #9
1000bd96:	430a      	orrs	r2, r1
1000bd98:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bd9a:	e144      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bd9c:	4ba5      	ldr	r3, [pc, #660]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bd9e:	4aa5      	ldr	r2, [pc, #660]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bda0:	68d2      	ldr	r2, [r2, #12]
1000bda2:	2180      	movs	r1, #128	; 0x80
1000bda4:	0289      	lsls	r1, r1, #10
1000bda6:	430a      	orrs	r2, r1
1000bda8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bdaa:	e13c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdac:	4ba1      	ldr	r3, [pc, #644]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdae:	4aa1      	ldr	r2, [pc, #644]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdb0:	68d2      	ldr	r2, [r2, #12]
1000bdb2:	2180      	movs	r1, #128	; 0x80
1000bdb4:	02c9      	lsls	r1, r1, #11
1000bdb6:	430a      	orrs	r2, r1
1000bdb8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bdba:	e134      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdbc:	4b9d      	ldr	r3, [pc, #628]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdbe:	4a9d      	ldr	r2, [pc, #628]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdc0:	68d2      	ldr	r2, [r2, #12]
1000bdc2:	2180      	movs	r1, #128	; 0x80
1000bdc4:	0309      	lsls	r1, r1, #12
1000bdc6:	430a      	orrs	r2, r1
1000bdc8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000bdca:	e12c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdcc:	4b99      	ldr	r3, [pc, #612]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdce:	4a99      	ldr	r2, [pc, #612]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdd0:	68d2      	ldr	r2, [r2, #12]
1000bdd2:	2180      	movs	r1, #128	; 0x80
1000bdd4:	0349      	lsls	r1, r1, #13
1000bdd6:	430a      	orrs	r2, r1
1000bdd8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bdda:	e124      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bddc:	4b95      	ldr	r3, [pc, #596]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdde:	4a95      	ldr	r2, [pc, #596]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bde0:	68d2      	ldr	r2, [r2, #12]
1000bde2:	2180      	movs	r1, #128	; 0x80
1000bde4:	0389      	lsls	r1, r1, #14
1000bde6:	430a      	orrs	r2, r1
1000bde8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bdea:	e11c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdec:	4b91      	ldr	r3, [pc, #580]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdee:	4a91      	ldr	r2, [pc, #580]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdf0:	68d2      	ldr	r2, [r2, #12]
1000bdf2:	2180      	movs	r1, #128	; 0x80
1000bdf4:	03c9      	lsls	r1, r1, #15
1000bdf6:	430a      	orrs	r2, r1
1000bdf8:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bdfa:	e114      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bdfc:	4b8d      	ldr	r3, [pc, #564]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bdfe:	4a8d      	ldr	r2, [pc, #564]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be00:	68d2      	ldr	r2, [r2, #12]
1000be02:	2180      	movs	r1, #128	; 0x80
1000be04:	0409      	lsls	r1, r1, #16
1000be06:	430a      	orrs	r2, r1
1000be08:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000be0a:	e10c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be0c:	4b89      	ldr	r3, [pc, #548]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be0e:	4a89      	ldr	r2, [pc, #548]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be10:	68d2      	ldr	r2, [r2, #12]
1000be12:	2180      	movs	r1, #128	; 0x80
1000be14:	0449      	lsls	r1, r1, #17
1000be16:	430a      	orrs	r2, r1
1000be18:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000be1a:	e104      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be1c:	4b85      	ldr	r3, [pc, #532]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be1e:	4a85      	ldr	r2, [pc, #532]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be20:	68d2      	ldr	r2, [r2, #12]
1000be22:	2180      	movs	r1, #128	; 0x80
1000be24:	0489      	lsls	r1, r1, #18
1000be26:	430a      	orrs	r2, r1
1000be28:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000be2a:	e0fc      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be2c:	4b81      	ldr	r3, [pc, #516]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be2e:	4a81      	ldr	r2, [pc, #516]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be30:	68d2      	ldr	r2, [r2, #12]
1000be32:	2180      	movs	r1, #128	; 0x80
1000be34:	04c9      	lsls	r1, r1, #19
1000be36:	430a      	orrs	r2, r1
1000be38:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000be3a:	e0f4      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be3c:	4b7d      	ldr	r3, [pc, #500]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be3e:	4a7d      	ldr	r2, [pc, #500]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be40:	68d2      	ldr	r2, [r2, #12]
1000be42:	2180      	movs	r1, #128	; 0x80
1000be44:	0509      	lsls	r1, r1, #20
1000be46:	430a      	orrs	r2, r1
1000be48:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000be4a:	e0ec      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be4c:	4b79      	ldr	r3, [pc, #484]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be4e:	4a79      	ldr	r2, [pc, #484]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be50:	68d2      	ldr	r2, [r2, #12]
1000be52:	2180      	movs	r1, #128	; 0x80
1000be54:	0549      	lsls	r1, r1, #21
1000be56:	430a      	orrs	r2, r1
1000be58:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000be5a:	e0e4      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be5c:	4b75      	ldr	r3, [pc, #468]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be5e:	4a75      	ldr	r2, [pc, #468]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be60:	68d2      	ldr	r2, [r2, #12]
1000be62:	2180      	movs	r1, #128	; 0x80
1000be64:	0589      	lsls	r1, r1, #22
1000be66:	430a      	orrs	r2, r1
1000be68:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000be6a:	e0dc      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000be6c:	4b71      	ldr	r3, [pc, #452]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be6e:	4a71      	ldr	r2, [pc, #452]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be70:	68d2      	ldr	r2, [r2, #12]
1000be72:	2180      	movs	r1, #128	; 0x80
1000be74:	05c9      	lsls	r1, r1, #23
1000be76:	430a      	orrs	r2, r1
1000be78:	60da      	str	r2, [r3, #12]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000be7a:	e0d4      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be7c:	4b6d      	ldr	r3, [pc, #436]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be7e:	4a6d      	ldr	r2, [pc, #436]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be80:	6912      	ldr	r2, [r2, #16]
1000be82:	2101      	movs	r1, #1
1000be84:	430a      	orrs	r2, r1
1000be86:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000be88:	e0cd      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be8a:	4b6a      	ldr	r3, [pc, #424]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be8c:	4a69      	ldr	r2, [pc, #420]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be8e:	6912      	ldr	r2, [r2, #16]
1000be90:	2102      	movs	r1, #2
1000be92:	430a      	orrs	r2, r1
1000be94:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000be96:	e0c6      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000be98:	4b66      	ldr	r3, [pc, #408]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be9a:	4a66      	ldr	r2, [pc, #408]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000be9c:	6912      	ldr	r2, [r2, #16]
1000be9e:	2104      	movs	r1, #4
1000bea0:	430a      	orrs	r2, r1
1000bea2:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bea4:	e0bf      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bea6:	4b63      	ldr	r3, [pc, #396]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bea8:	4a62      	ldr	r2, [pc, #392]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000beaa:	6912      	ldr	r2, [r2, #16]
1000beac:	2108      	movs	r1, #8
1000beae:	430a      	orrs	r2, r1
1000beb0:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000beb2:	e0b8      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000beb4:	4b5f      	ldr	r3, [pc, #380]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000beb6:	4a5f      	ldr	r2, [pc, #380]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000beb8:	6912      	ldr	r2, [r2, #16]
1000beba:	2110      	movs	r1, #16
1000bebc:	430a      	orrs	r2, r1
1000bebe:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bec0:	e0b1      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bec2:	4b5c      	ldr	r3, [pc, #368]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bec4:	4a5b      	ldr	r2, [pc, #364]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bec6:	6912      	ldr	r2, [r2, #16]
1000bec8:	2120      	movs	r1, #32
1000beca:	430a      	orrs	r2, r1
1000becc:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bece:	e0aa      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bed0:	4b58      	ldr	r3, [pc, #352]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bed2:	4a58      	ldr	r2, [pc, #352]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bed4:	6912      	ldr	r2, [r2, #16]
1000bed6:	2140      	movs	r1, #64	; 0x40
1000bed8:	430a      	orrs	r2, r1
1000beda:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bedc:	e0a3      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bede:	4b55      	ldr	r3, [pc, #340]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bee0:	4a54      	ldr	r2, [pc, #336]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bee2:	6912      	ldr	r2, [r2, #16]
1000bee4:	2180      	movs	r1, #128	; 0x80
1000bee6:	430a      	orrs	r2, r1
1000bee8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000beea:	e09c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000beec:	4b51      	ldr	r3, [pc, #324]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000beee:	4a51      	ldr	r2, [pc, #324]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bef0:	6912      	ldr	r2, [r2, #16]
1000bef2:	2180      	movs	r1, #128	; 0x80
1000bef4:	0049      	lsls	r1, r1, #1
1000bef6:	430a      	orrs	r2, r1
1000bef8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000befa:	e094      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000befc:	4b4d      	ldr	r3, [pc, #308]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000befe:	4a4d      	ldr	r2, [pc, #308]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf00:	6912      	ldr	r2, [r2, #16]
1000bf02:	2180      	movs	r1, #128	; 0x80
1000bf04:	0089      	lsls	r1, r1, #2
1000bf06:	430a      	orrs	r2, r1
1000bf08:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bf0a:	e08c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf0c:	4b49      	ldr	r3, [pc, #292]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf0e:	4a49      	ldr	r2, [pc, #292]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf10:	6912      	ldr	r2, [r2, #16]
1000bf12:	2180      	movs	r1, #128	; 0x80
1000bf14:	00c9      	lsls	r1, r1, #3
1000bf16:	430a      	orrs	r2, r1
1000bf18:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bf1a:	e084      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf1c:	4b45      	ldr	r3, [pc, #276]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf1e:	4a45      	ldr	r2, [pc, #276]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf20:	6912      	ldr	r2, [r2, #16]
1000bf22:	2180      	movs	r1, #128	; 0x80
1000bf24:	0109      	lsls	r1, r1, #4
1000bf26:	430a      	orrs	r2, r1
1000bf28:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bf2a:	e07c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf2c:	4b41      	ldr	r3, [pc, #260]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf2e:	4a41      	ldr	r2, [pc, #260]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf30:	6912      	ldr	r2, [r2, #16]
1000bf32:	2180      	movs	r1, #128	; 0x80
1000bf34:	0149      	lsls	r1, r1, #5
1000bf36:	430a      	orrs	r2, r1
1000bf38:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bf3a:	e074      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf3c:	4b3d      	ldr	r3, [pc, #244]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf3e:	4a3d      	ldr	r2, [pc, #244]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf40:	6912      	ldr	r2, [r2, #16]
1000bf42:	2180      	movs	r1, #128	; 0x80
1000bf44:	0189      	lsls	r1, r1, #6
1000bf46:	430a      	orrs	r2, r1
1000bf48:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bf4a:	e06c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf4c:	4b39      	ldr	r3, [pc, #228]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf4e:	4a39      	ldr	r2, [pc, #228]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf50:	6912      	ldr	r2, [r2, #16]
1000bf52:	2180      	movs	r1, #128	; 0x80
1000bf54:	01c9      	lsls	r1, r1, #7
1000bf56:	430a      	orrs	r2, r1
1000bf58:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bf5a:	e064      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf5c:	4b35      	ldr	r3, [pc, #212]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf5e:	4a35      	ldr	r2, [pc, #212]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf60:	6912      	ldr	r2, [r2, #16]
1000bf62:	2180      	movs	r1, #128	; 0x80
1000bf64:	0209      	lsls	r1, r1, #8
1000bf66:	430a      	orrs	r2, r1
1000bf68:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bf6a:	e05c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf6c:	4b31      	ldr	r3, [pc, #196]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf6e:	4a31      	ldr	r2, [pc, #196]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf70:	6912      	ldr	r2, [r2, #16]
1000bf72:	2180      	movs	r1, #128	; 0x80
1000bf74:	0249      	lsls	r1, r1, #9
1000bf76:	430a      	orrs	r2, r1
1000bf78:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bf7a:	e054      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf7c:	4b2d      	ldr	r3, [pc, #180]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf7e:	4a2d      	ldr	r2, [pc, #180]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf80:	6912      	ldr	r2, [r2, #16]
1000bf82:	2180      	movs	r1, #128	; 0x80
1000bf84:	0289      	lsls	r1, r1, #10
1000bf86:	430a      	orrs	r2, r1
1000bf88:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bf8a:	e04c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf8c:	4b29      	ldr	r3, [pc, #164]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf8e:	4a29      	ldr	r2, [pc, #164]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf90:	6912      	ldr	r2, [r2, #16]
1000bf92:	2180      	movs	r1, #128	; 0x80
1000bf94:	02c9      	lsls	r1, r1, #11
1000bf96:	430a      	orrs	r2, r1
1000bf98:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bf9a:	e044      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bf9c:	4b25      	ldr	r3, [pc, #148]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bf9e:	4a25      	ldr	r2, [pc, #148]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfa0:	6912      	ldr	r2, [r2, #16]
1000bfa2:	2180      	movs	r1, #128	; 0x80
1000bfa4:	0309      	lsls	r1, r1, #12
1000bfa6:	430a      	orrs	r2, r1
1000bfa8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bfaa:	e03c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfac:	4b21      	ldr	r3, [pc, #132]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfae:	4a21      	ldr	r2, [pc, #132]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfb0:	6912      	ldr	r2, [r2, #16]
1000bfb2:	2180      	movs	r1, #128	; 0x80
1000bfb4:	0349      	lsls	r1, r1, #13
1000bfb6:	430a      	orrs	r2, r1
1000bfb8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bfba:	e034      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfbc:	4b1d      	ldr	r3, [pc, #116]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfbe:	4a1d      	ldr	r2, [pc, #116]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfc0:	6912      	ldr	r2, [r2, #16]
1000bfc2:	2180      	movs	r1, #128	; 0x80
1000bfc4:	0389      	lsls	r1, r1, #14
1000bfc6:	430a      	orrs	r2, r1
1000bfc8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bfca:	e02c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfcc:	4b19      	ldr	r3, [pc, #100]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfce:	4a19      	ldr	r2, [pc, #100]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfd0:	6912      	ldr	r2, [r2, #16]
1000bfd2:	2180      	movs	r1, #128	; 0x80
1000bfd4:	03c9      	lsls	r1, r1, #15
1000bfd6:	430a      	orrs	r2, r1
1000bfd8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000bfda:	e024      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bfdc:	4b15      	ldr	r3, [pc, #84]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfde:	4a15      	ldr	r2, [pc, #84]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfe0:	6912      	ldr	r2, [r2, #16]
1000bfe2:	2180      	movs	r1, #128	; 0x80
1000bfe4:	0409      	lsls	r1, r1, #16
1000bfe6:	430a      	orrs	r2, r1
1000bfe8:	611a      	str	r2, [r3, #16]
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bfea:	e01c      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bfec:	4a11      	ldr	r2, [pc, #68]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bfee:	4b11      	ldr	r3, [pc, #68]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000bff0:	7d1b      	ldrb	r3, [r3, #20]
1000bff2:	b2db      	uxtb	r3, r3
1000bff4:	2101      	movs	r1, #1
1000bff6:	430b      	orrs	r3, r1
1000bff8:	b2db      	uxtb	r3, r3
1000bffa:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bffc:	e013      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bffe:	4a0d      	ldr	r2, [pc, #52]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000c000:	4b0c      	ldr	r3, [pc, #48]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000c002:	7d1b      	ldrb	r3, [r3, #20]
1000c004:	b2db      	uxtb	r3, r3
1000c006:	2102      	movs	r1, #2
1000c008:	430b      	orrs	r3, r1
1000c00a:	b2db      	uxtb	r3, r3
1000c00c:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c00e:	e00a      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000c010:	4a08      	ldr	r2, [pc, #32]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000c012:	4b08      	ldr	r3, [pc, #32]	; (1000c034 <system_clock_peripheral_enable+0x37c>)
1000c014:	7d1b      	ldrb	r3, [r3, #20]
1000c016:	b2db      	uxtb	r3, r3
1000c018:	2104      	movs	r1, #4
1000c01a:	430b      	orrs	r3, r1
1000c01c:	b2db      	uxtb	r3, r3
1000c01e:	7513      	strb	r3, [r2, #20]
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c020:	e001      	b.n	1000c026 <system_clock_peripheral_enable+0x36e>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c022:	230a      	movs	r3, #10
1000c024:	e000      	b.n	1000c028 <system_clock_peripheral_enable+0x370>
	}

	return STATUS_OK;
1000c026:	2301      	movs	r3, #1
}
1000c028:	0018      	movs	r0, r3
1000c02a:	46bd      	mov	sp, r7
1000c02c:	b002      	add	sp, #8
1000c02e:	bd80      	pop	{r7, pc}
1000c030:	1000ff5c 	.word	0x1000ff5c
1000c034:	4000b000 	.word	0x4000b000

1000c038 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000c038:	b580      	push	{r7, lr}
1000c03a:	b082      	sub	sp, #8
1000c03c:	af00      	add	r7, sp, #0
1000c03e:	0002      	movs	r2, r0
1000c040:	1dfb      	adds	r3, r7, #7
1000c042:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000c044:	1dfb      	adds	r3, r7, #7
1000c046:	781b      	ldrb	r3, [r3, #0]
1000c048:	2b35      	cmp	r3, #53	; 0x35
1000c04a:	d900      	bls.n	1000c04e <system_clock_peripheral_disable+0x16>
1000c04c:	e184      	b.n	1000c358 <system_clock_peripheral_disable+0x320>
1000c04e:	009a      	lsls	r2, r3, #2
1000c050:	4bc5      	ldr	r3, [pc, #788]	; (1000c368 <system_clock_peripheral_disable+0x330>)
1000c052:	18d3      	adds	r3, r2, r3
1000c054:	681b      	ldr	r3, [r3, #0]
1000c056:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c058:	4bc4      	ldr	r3, [pc, #784]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c05a:	4ac4      	ldr	r2, [pc, #784]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c05c:	68d2      	ldr	r2, [r2, #12]
1000c05e:	2102      	movs	r1, #2
1000c060:	438a      	bics	r2, r1
1000c062:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000c064:	e17a      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c066:	4bc1      	ldr	r3, [pc, #772]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c068:	4ac0      	ldr	r2, [pc, #768]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c06a:	68d2      	ldr	r2, [r2, #12]
1000c06c:	2104      	movs	r1, #4
1000c06e:	438a      	bics	r2, r1
1000c070:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000c072:	e173      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c074:	4bbd      	ldr	r3, [pc, #756]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c076:	4abd      	ldr	r2, [pc, #756]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c078:	68d2      	ldr	r2, [r2, #12]
1000c07a:	2108      	movs	r1, #8
1000c07c:	438a      	bics	r2, r1
1000c07e:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000c080:	e16c      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c082:	4bba      	ldr	r3, [pc, #744]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c084:	4ab9      	ldr	r2, [pc, #740]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c086:	68d2      	ldr	r2, [r2, #12]
1000c088:	2110      	movs	r1, #16
1000c08a:	438a      	bics	r2, r1
1000c08c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000c08e:	e165      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c090:	4bb6      	ldr	r3, [pc, #728]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c092:	4ab6      	ldr	r2, [pc, #728]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c094:	68d2      	ldr	r2, [r2, #12]
1000c096:	2120      	movs	r1, #32
1000c098:	438a      	bics	r2, r1
1000c09a:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000c09c:	e15e      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c09e:	4bb3      	ldr	r3, [pc, #716]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0a0:	4ab2      	ldr	r2, [pc, #712]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0a2:	68d2      	ldr	r2, [r2, #12]
1000c0a4:	2180      	movs	r1, #128	; 0x80
1000c0a6:	438a      	bics	r2, r1
1000c0a8:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000c0aa:	e157      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0ac:	4baf      	ldr	r3, [pc, #700]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0ae:	4aaf      	ldr	r2, [pc, #700]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0b0:	68d2      	ldr	r2, [r2, #12]
1000c0b2:	49af      	ldr	r1, [pc, #700]	; (1000c370 <system_clock_peripheral_disable+0x338>)
1000c0b4:	400a      	ands	r2, r1
1000c0b6:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000c0b8:	e150      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0ba:	4bac      	ldr	r3, [pc, #688]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0bc:	4aab      	ldr	r2, [pc, #684]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0be:	68d2      	ldr	r2, [r2, #12]
1000c0c0:	49ac      	ldr	r1, [pc, #688]	; (1000c374 <system_clock_peripheral_disable+0x33c>)
1000c0c2:	400a      	ands	r2, r1
1000c0c4:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000c0c6:	e149      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0c8:	4ba8      	ldr	r3, [pc, #672]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0ca:	4aa8      	ldr	r2, [pc, #672]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0cc:	68d2      	ldr	r2, [r2, #12]
1000c0ce:	49aa      	ldr	r1, [pc, #680]	; (1000c378 <system_clock_peripheral_disable+0x340>)
1000c0d0:	400a      	ands	r2, r1
1000c0d2:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000c0d4:	e142      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0d6:	4ba5      	ldr	r3, [pc, #660]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0d8:	4aa4      	ldr	r2, [pc, #656]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0da:	68d2      	ldr	r2, [r2, #12]
1000c0dc:	49a7      	ldr	r1, [pc, #668]	; (1000c37c <system_clock_peripheral_disable+0x344>)
1000c0de:	400a      	ands	r2, r1
1000c0e0:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000c0e2:	e13b      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0e4:	4ba1      	ldr	r3, [pc, #644]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0e6:	4aa1      	ldr	r2, [pc, #644]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0e8:	68d2      	ldr	r2, [r2, #12]
1000c0ea:	49a5      	ldr	r1, [pc, #660]	; (1000c380 <system_clock_peripheral_disable+0x348>)
1000c0ec:	400a      	ands	r2, r1
1000c0ee:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000c0f0:	e134      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c0f2:	4b9e      	ldr	r3, [pc, #632]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0f4:	4a9d      	ldr	r2, [pc, #628]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c0f6:	68d2      	ldr	r2, [r2, #12]
1000c0f8:	49a2      	ldr	r1, [pc, #648]	; (1000c384 <system_clock_peripheral_disable+0x34c>)
1000c0fa:	400a      	ands	r2, r1
1000c0fc:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000c0fe:	e12d      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c100:	4b9a      	ldr	r3, [pc, #616]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c102:	4a9a      	ldr	r2, [pc, #616]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c104:	68d2      	ldr	r2, [r2, #12]
1000c106:	49a0      	ldr	r1, [pc, #640]	; (1000c388 <system_clock_peripheral_disable+0x350>)
1000c108:	400a      	ands	r2, r1
1000c10a:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000c10c:	e126      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c10e:	4b97      	ldr	r3, [pc, #604]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c110:	4a96      	ldr	r2, [pc, #600]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c112:	68d2      	ldr	r2, [r2, #12]
1000c114:	499d      	ldr	r1, [pc, #628]	; (1000c38c <system_clock_peripheral_disable+0x354>)
1000c116:	400a      	ands	r2, r1
1000c118:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000c11a:	e11f      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c11c:	4b93      	ldr	r3, [pc, #588]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c11e:	4a93      	ldr	r2, [pc, #588]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c120:	68d2      	ldr	r2, [r2, #12]
1000c122:	499b      	ldr	r1, [pc, #620]	; (1000c390 <system_clock_peripheral_disable+0x358>)
1000c124:	400a      	ands	r2, r1
1000c126:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000c128:	e118      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c12a:	4b90      	ldr	r3, [pc, #576]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c12c:	4a8f      	ldr	r2, [pc, #572]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c12e:	68d2      	ldr	r2, [r2, #12]
1000c130:	4998      	ldr	r1, [pc, #608]	; (1000c394 <system_clock_peripheral_disable+0x35c>)
1000c132:	400a      	ands	r2, r1
1000c134:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000c136:	e111      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c138:	4b8c      	ldr	r3, [pc, #560]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c13a:	4a8c      	ldr	r2, [pc, #560]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c13c:	68d2      	ldr	r2, [r2, #12]
1000c13e:	4996      	ldr	r1, [pc, #600]	; (1000c398 <system_clock_peripheral_disable+0x360>)
1000c140:	400a      	ands	r2, r1
1000c142:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000c144:	e10a      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c146:	4b89      	ldr	r3, [pc, #548]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c148:	4a88      	ldr	r2, [pc, #544]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c14a:	68d2      	ldr	r2, [r2, #12]
1000c14c:	4993      	ldr	r1, [pc, #588]	; (1000c39c <system_clock_peripheral_disable+0x364>)
1000c14e:	400a      	ands	r2, r1
1000c150:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000c152:	e103      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c154:	4b85      	ldr	r3, [pc, #532]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c156:	4a85      	ldr	r2, [pc, #532]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c158:	68d2      	ldr	r2, [r2, #12]
1000c15a:	4991      	ldr	r1, [pc, #580]	; (1000c3a0 <system_clock_peripheral_disable+0x368>)
1000c15c:	400a      	ands	r2, r1
1000c15e:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000c160:	e0fc      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c162:	4b82      	ldr	r3, [pc, #520]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c164:	4a81      	ldr	r2, [pc, #516]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c166:	68d2      	ldr	r2, [r2, #12]
1000c168:	498e      	ldr	r1, [pc, #568]	; (1000c3a4 <system_clock_peripheral_disable+0x36c>)
1000c16a:	400a      	ands	r2, r1
1000c16c:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000c16e:	e0f5      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c170:	4b7e      	ldr	r3, [pc, #504]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c172:	4a7e      	ldr	r2, [pc, #504]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c174:	68d2      	ldr	r2, [r2, #12]
1000c176:	498c      	ldr	r1, [pc, #560]	; (1000c3a8 <system_clock_peripheral_disable+0x370>)
1000c178:	400a      	ands	r2, r1
1000c17a:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000c17c:	e0ee      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c17e:	4b7b      	ldr	r3, [pc, #492]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c180:	4a7a      	ldr	r2, [pc, #488]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c182:	68d2      	ldr	r2, [r2, #12]
1000c184:	4989      	ldr	r1, [pc, #548]	; (1000c3ac <system_clock_peripheral_disable+0x374>)
1000c186:	400a      	ands	r2, r1
1000c188:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000c18a:	e0e7      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c18c:	4b77      	ldr	r3, [pc, #476]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c18e:	4a77      	ldr	r2, [pc, #476]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c190:	68d2      	ldr	r2, [r2, #12]
1000c192:	4987      	ldr	r1, [pc, #540]	; (1000c3b0 <system_clock_peripheral_disable+0x378>)
1000c194:	400a      	ands	r2, r1
1000c196:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000c198:	e0e0      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c19a:	4b74      	ldr	r3, [pc, #464]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c19c:	4a73      	ldr	r2, [pc, #460]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c19e:	68d2      	ldr	r2, [r2, #12]
1000c1a0:	4984      	ldr	r1, [pc, #528]	; (1000c3b4 <system_clock_peripheral_disable+0x37c>)
1000c1a2:	400a      	ands	r2, r1
1000c1a4:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000c1a6:	e0d9      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1a8:	4b70      	ldr	r3, [pc, #448]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1aa:	4a70      	ldr	r2, [pc, #448]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1ac:	68d2      	ldr	r2, [r2, #12]
1000c1ae:	4982      	ldr	r1, [pc, #520]	; (1000c3b8 <system_clock_peripheral_disable+0x380>)
1000c1b0:	400a      	ands	r2, r1
1000c1b2:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000c1b4:	e0d2      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1b6:	4b6d      	ldr	r3, [pc, #436]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1b8:	4a6c      	ldr	r2, [pc, #432]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1ba:	68d2      	ldr	r2, [r2, #12]
1000c1bc:	497f      	ldr	r1, [pc, #508]	; (1000c3bc <system_clock_peripheral_disable+0x384>)
1000c1be:	400a      	ands	r2, r1
1000c1c0:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000c1c2:	e0cb      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000c1c4:	4b69      	ldr	r3, [pc, #420]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1c6:	4a69      	ldr	r2, [pc, #420]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1c8:	68d2      	ldr	r2, [r2, #12]
1000c1ca:	497d      	ldr	r1, [pc, #500]	; (1000c3c0 <system_clock_peripheral_disable+0x388>)
1000c1cc:	400a      	ands	r2, r1
1000c1ce:	60da      	str	r2, [r3, #12]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000c1d0:	e0c4      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c1d2:	4b66      	ldr	r3, [pc, #408]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1d4:	4a65      	ldr	r2, [pc, #404]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1d6:	6912      	ldr	r2, [r2, #16]
1000c1d8:	2101      	movs	r1, #1
1000c1da:	438a      	bics	r2, r1
1000c1dc:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000c1de:	e0bd      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c1e0:	4b62      	ldr	r3, [pc, #392]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1e2:	4a62      	ldr	r2, [pc, #392]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1e4:	6912      	ldr	r2, [r2, #16]
1000c1e6:	2102      	movs	r1, #2
1000c1e8:	438a      	bics	r2, r1
1000c1ea:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000c1ec:	e0b6      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c1ee:	4b5f      	ldr	r3, [pc, #380]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1f0:	4a5e      	ldr	r2, [pc, #376]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1f2:	6912      	ldr	r2, [r2, #16]
1000c1f4:	2104      	movs	r1, #4
1000c1f6:	438a      	bics	r2, r1
1000c1f8:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000c1fa:	e0af      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c1fc:	4b5b      	ldr	r3, [pc, #364]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c1fe:	4a5b      	ldr	r2, [pc, #364]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c200:	6912      	ldr	r2, [r2, #16]
1000c202:	2108      	movs	r1, #8
1000c204:	438a      	bics	r2, r1
1000c206:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000c208:	e0a8      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c20a:	4b58      	ldr	r3, [pc, #352]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c20c:	4a57      	ldr	r2, [pc, #348]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c20e:	6912      	ldr	r2, [r2, #16]
1000c210:	2110      	movs	r1, #16
1000c212:	438a      	bics	r2, r1
1000c214:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000c216:	e0a1      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c218:	4b54      	ldr	r3, [pc, #336]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c21a:	4a54      	ldr	r2, [pc, #336]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c21c:	6912      	ldr	r2, [r2, #16]
1000c21e:	2120      	movs	r1, #32
1000c220:	438a      	bics	r2, r1
1000c222:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000c224:	e09a      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c226:	4b51      	ldr	r3, [pc, #324]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c228:	4a50      	ldr	r2, [pc, #320]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c22a:	6912      	ldr	r2, [r2, #16]
1000c22c:	2140      	movs	r1, #64	; 0x40
1000c22e:	438a      	bics	r2, r1
1000c230:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000c232:	e093      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c234:	4b4d      	ldr	r3, [pc, #308]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c236:	4a4d      	ldr	r2, [pc, #308]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c238:	6912      	ldr	r2, [r2, #16]
1000c23a:	2180      	movs	r1, #128	; 0x80
1000c23c:	438a      	bics	r2, r1
1000c23e:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000c240:	e08c      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c242:	4b4a      	ldr	r3, [pc, #296]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c244:	4a49      	ldr	r2, [pc, #292]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c246:	6912      	ldr	r2, [r2, #16]
1000c248:	4949      	ldr	r1, [pc, #292]	; (1000c370 <system_clock_peripheral_disable+0x338>)
1000c24a:	400a      	ands	r2, r1
1000c24c:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000c24e:	e085      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c250:	4b46      	ldr	r3, [pc, #280]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c252:	4a46      	ldr	r2, [pc, #280]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c254:	6912      	ldr	r2, [r2, #16]
1000c256:	495b      	ldr	r1, [pc, #364]	; (1000c3c4 <system_clock_peripheral_disable+0x38c>)
1000c258:	400a      	ands	r2, r1
1000c25a:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000c25c:	e07e      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c25e:	4b43      	ldr	r3, [pc, #268]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c260:	4a42      	ldr	r2, [pc, #264]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c262:	6912      	ldr	r2, [r2, #16]
1000c264:	4958      	ldr	r1, [pc, #352]	; (1000c3c8 <system_clock_peripheral_disable+0x390>)
1000c266:	400a      	ands	r2, r1
1000c268:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000c26a:	e077      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c26c:	4b3f      	ldr	r3, [pc, #252]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c26e:	4a3f      	ldr	r2, [pc, #252]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c270:	6912      	ldr	r2, [r2, #16]
1000c272:	4940      	ldr	r1, [pc, #256]	; (1000c374 <system_clock_peripheral_disable+0x33c>)
1000c274:	400a      	ands	r2, r1
1000c276:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000c278:	e070      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c27a:	4b3c      	ldr	r3, [pc, #240]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c27c:	4a3b      	ldr	r2, [pc, #236]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c27e:	6912      	ldr	r2, [r2, #16]
1000c280:	493d      	ldr	r1, [pc, #244]	; (1000c378 <system_clock_peripheral_disable+0x340>)
1000c282:	400a      	ands	r2, r1
1000c284:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000c286:	e069      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c288:	4b38      	ldr	r3, [pc, #224]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c28a:	4a38      	ldr	r2, [pc, #224]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c28c:	6912      	ldr	r2, [r2, #16]
1000c28e:	493b      	ldr	r1, [pc, #236]	; (1000c37c <system_clock_peripheral_disable+0x344>)
1000c290:	400a      	ands	r2, r1
1000c292:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000c294:	e062      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c296:	4b35      	ldr	r3, [pc, #212]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c298:	4a34      	ldr	r2, [pc, #208]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c29a:	6912      	ldr	r2, [r2, #16]
1000c29c:	4938      	ldr	r1, [pc, #224]	; (1000c380 <system_clock_peripheral_disable+0x348>)
1000c29e:	400a      	ands	r2, r1
1000c2a0:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000c2a2:	e05b      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2a4:	4b31      	ldr	r3, [pc, #196]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2a6:	4a31      	ldr	r2, [pc, #196]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2a8:	6912      	ldr	r2, [r2, #16]
1000c2aa:	4936      	ldr	r1, [pc, #216]	; (1000c384 <system_clock_peripheral_disable+0x34c>)
1000c2ac:	400a      	ands	r2, r1
1000c2ae:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000c2b0:	e054      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2b2:	4b2e      	ldr	r3, [pc, #184]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2b4:	4a2d      	ldr	r2, [pc, #180]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2b6:	6912      	ldr	r2, [r2, #16]
1000c2b8:	4933      	ldr	r1, [pc, #204]	; (1000c388 <system_clock_peripheral_disable+0x350>)
1000c2ba:	400a      	ands	r2, r1
1000c2bc:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000c2be:	e04d      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2c0:	4b2a      	ldr	r3, [pc, #168]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2c2:	4a2a      	ldr	r2, [pc, #168]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2c4:	6912      	ldr	r2, [r2, #16]
1000c2c6:	4931      	ldr	r1, [pc, #196]	; (1000c38c <system_clock_peripheral_disable+0x354>)
1000c2c8:	400a      	ands	r2, r1
1000c2ca:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000c2cc:	e046      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2ce:	4b27      	ldr	r3, [pc, #156]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2d0:	4a26      	ldr	r2, [pc, #152]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2d2:	6912      	ldr	r2, [r2, #16]
1000c2d4:	492e      	ldr	r1, [pc, #184]	; (1000c390 <system_clock_peripheral_disable+0x358>)
1000c2d6:	400a      	ands	r2, r1
1000c2d8:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000c2da:	e03f      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2dc:	4b23      	ldr	r3, [pc, #140]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2de:	4a23      	ldr	r2, [pc, #140]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2e0:	6912      	ldr	r2, [r2, #16]
1000c2e2:	492c      	ldr	r1, [pc, #176]	; (1000c394 <system_clock_peripheral_disable+0x35c>)
1000c2e4:	400a      	ands	r2, r1
1000c2e6:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000c2e8:	e038      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2ea:	4b20      	ldr	r3, [pc, #128]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2ec:	4a1f      	ldr	r2, [pc, #124]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2ee:	6912      	ldr	r2, [r2, #16]
1000c2f0:	4929      	ldr	r1, [pc, #164]	; (1000c398 <system_clock_peripheral_disable+0x360>)
1000c2f2:	400a      	ands	r2, r1
1000c2f4:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000c2f6:	e031      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c2f8:	4b1c      	ldr	r3, [pc, #112]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2fa:	4a1c      	ldr	r2, [pc, #112]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c2fc:	6912      	ldr	r2, [r2, #16]
1000c2fe:	4927      	ldr	r1, [pc, #156]	; (1000c39c <system_clock_peripheral_disable+0x364>)
1000c300:	400a      	ands	r2, r1
1000c302:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c304:	e02a      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c306:	4b19      	ldr	r3, [pc, #100]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c308:	4a18      	ldr	r2, [pc, #96]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c30a:	6912      	ldr	r2, [r2, #16]
1000c30c:	4924      	ldr	r1, [pc, #144]	; (1000c3a0 <system_clock_peripheral_disable+0x368>)
1000c30e:	400a      	ands	r2, r1
1000c310:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c312:	e023      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c314:	4b15      	ldr	r3, [pc, #84]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c316:	4a15      	ldr	r2, [pc, #84]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c318:	6912      	ldr	r2, [r2, #16]
1000c31a:	4922      	ldr	r1, [pc, #136]	; (1000c3a4 <system_clock_peripheral_disable+0x36c>)
1000c31c:	400a      	ands	r2, r1
1000c31e:	611a      	str	r2, [r3, #16]
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c320:	e01c      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c322:	4a12      	ldr	r2, [pc, #72]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c324:	4b11      	ldr	r3, [pc, #68]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c326:	7d1b      	ldrb	r3, [r3, #20]
1000c328:	b2db      	uxtb	r3, r3
1000c32a:	2101      	movs	r1, #1
1000c32c:	438b      	bics	r3, r1
1000c32e:	b2db      	uxtb	r3, r3
1000c330:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c332:	e013      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c334:	4a0d      	ldr	r2, [pc, #52]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c336:	4b0d      	ldr	r3, [pc, #52]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c338:	7d1b      	ldrb	r3, [r3, #20]
1000c33a:	b2db      	uxtb	r3, r3
1000c33c:	2102      	movs	r1, #2
1000c33e:	438b      	bics	r3, r1
1000c340:	b2db      	uxtb	r3, r3
1000c342:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c344:	e00a      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c346:	4a09      	ldr	r2, [pc, #36]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c348:	4b08      	ldr	r3, [pc, #32]	; (1000c36c <system_clock_peripheral_disable+0x334>)
1000c34a:	7d1b      	ldrb	r3, [r3, #20]
1000c34c:	b2db      	uxtb	r3, r3
1000c34e:	2104      	movs	r1, #4
1000c350:	438b      	bics	r3, r1
1000c352:	b2db      	uxtb	r3, r3
1000c354:	7513      	strb	r3, [r2, #20]
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c356:	e001      	b.n	1000c35c <system_clock_peripheral_disable+0x324>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c358:	230a      	movs	r3, #10
1000c35a:	e000      	b.n	1000c35e <system_clock_peripheral_disable+0x326>
	}

	return STATUS_OK;
1000c35c:	2301      	movs	r3, #1
}
1000c35e:	0018      	movs	r0, r3
1000c360:	46bd      	mov	sp, r7
1000c362:	b002      	add	sp, #8
1000c364:	bd80      	pop	{r7, pc}
1000c366:	46c0      	nop			; (mov r8, r8)
1000c368:	10010034 	.word	0x10010034
1000c36c:	4000b000 	.word	0x4000b000
1000c370:	fffffeff 	.word	0xfffffeff
1000c374:	fffff7ff 	.word	0xfffff7ff
1000c378:	ffffefff 	.word	0xffffefff
1000c37c:	ffffdfff 	.word	0xffffdfff
1000c380:	ffffbfff 	.word	0xffffbfff
1000c384:	ffff7fff 	.word	0xffff7fff
1000c388:	fffeffff 	.word	0xfffeffff
1000c38c:	fffdffff 	.word	0xfffdffff
1000c390:	fffbffff 	.word	0xfffbffff
1000c394:	fff7ffff 	.word	0xfff7ffff
1000c398:	ffefffff 	.word	0xffefffff
1000c39c:	ffdfffff 	.word	0xffdfffff
1000c3a0:	ffbfffff 	.word	0xffbfffff
1000c3a4:	ff7fffff 	.word	0xff7fffff
1000c3a8:	feffffff 	.word	0xfeffffff
1000c3ac:	fdffffff 	.word	0xfdffffff
1000c3b0:	fbffffff 	.word	0xfbffffff
1000c3b4:	f7ffffff 	.word	0xf7ffffff
1000c3b8:	efffffff 	.word	0xefffffff
1000c3bc:	dfffffff 	.word	0xdfffffff
1000c3c0:	bfffffff 	.word	0xbfffffff
1000c3c4:	fffffdff 	.word	0xfffffdff
1000c3c8:	fffffbff 	.word	0xfffffbff

1000c3cc <system_clock_peripheral_freq_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_freq_config( \
		enum system_peripheral peripheral, \
		enum system_clock_freq freq)
{
1000c3cc:	b580      	push	{r7, lr}
1000c3ce:	b082      	sub	sp, #8
1000c3d0:	af00      	add	r7, sp, #0
1000c3d2:	0002      	movs	r2, r0
1000c3d4:	1dfb      	adds	r3, r7, #7
1000c3d6:	701a      	strb	r2, [r3, #0]
1000c3d8:	1dbb      	adds	r3, r7, #6
1000c3da:	1c0a      	adds	r2, r1, #0
1000c3dc:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000c3de:	1dfb      	adds	r3, r7, #7
1000c3e0:	781b      	ldrb	r3, [r3, #0]
1000c3e2:	2b24      	cmp	r3, #36	; 0x24
1000c3e4:	d900      	bls.n	1000c3e8 <system_clock_peripheral_freq_config+0x1c>
1000c3e6:	e110      	b.n	1000c60a <system_clock_peripheral_freq_config+0x23e>
1000c3e8:	009a      	lsls	r2, r3, #2
1000c3ea:	4b8b      	ldr	r3, [pc, #556]	; (1000c618 <system_clock_peripheral_freq_config+0x24c>)
1000c3ec:	18d3      	adds	r3, r2, r3
1000c3ee:	681b      	ldr	r3, [r3, #0]
1000c3f0:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c3f2:	4b8a      	ldr	r3, [pc, #552]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c3f4:	4a89      	ldr	r2, [pc, #548]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c3f6:	6992      	ldr	r2, [r2, #24]
1000c3f8:	4989      	ldr	r1, [pc, #548]	; (1000c620 <system_clock_peripheral_freq_config+0x254>)
1000c3fa:	400a      	ands	r2, r1
1000c3fc:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL_Msk;
			switch (freq) {
1000c3fe:	1dbb      	adds	r3, r7, #6
1000c400:	781b      	ldrb	r3, [r3, #0]
1000c402:	2b01      	cmp	r3, #1
1000c404:	d010      	beq.n	1000c428 <system_clock_peripheral_freq_config+0x5c>
1000c406:	dc02      	bgt.n	1000c40e <system_clock_peripheral_freq_config+0x42>
1000c408:	2b00      	cmp	r3, #0
1000c40a:	d005      	beq.n	1000c418 <system_clock_peripheral_freq_config+0x4c>
				case CLOCK_FREQ_3_25_MHZ:
					LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
						LPMCU_MISC_REGS_LPMCU_CTRL_SPI_FLASH0_CLKSEL_0;
				break;
			}
			break;
1000c40c:	e0ff      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>
			switch (freq) {
1000c40e:	2b02      	cmp	r3, #2
1000c410:	d012      	beq.n	1000c438 <system_clock_peripheral_freq_config+0x6c>
1000c412:	2b03      	cmp	r3, #3
1000c414:	d018      	beq.n	1000c448 <system_clock_peripheral_freq_config+0x7c>
			break;
1000c416:	e0fa      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>
					LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c418:	4b80      	ldr	r3, [pc, #512]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c41a:	4a80      	ldr	r2, [pc, #512]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c41c:	6992      	ldr	r2, [r2, #24]
1000c41e:	21c0      	movs	r1, #192	; 0xc0
1000c420:	0189      	lsls	r1, r1, #6
1000c422:	430a      	orrs	r2, r1
1000c424:	619a      	str	r2, [r3, #24]
					break;
1000c426:	e014      	b.n	1000c452 <system_clock_peripheral_freq_config+0x86>
					LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c428:	4b7c      	ldr	r3, [pc, #496]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c42a:	4a7c      	ldr	r2, [pc, #496]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c42c:	6992      	ldr	r2, [r2, #24]
1000c42e:	2180      	movs	r1, #128	; 0x80
1000c430:	0189      	lsls	r1, r1, #6
1000c432:	430a      	orrs	r2, r1
1000c434:	619a      	str	r2, [r3, #24]
					break;
1000c436:	e00c      	b.n	1000c452 <system_clock_peripheral_freq_config+0x86>
					LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c438:	4b78      	ldr	r3, [pc, #480]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c43a:	4a78      	ldr	r2, [pc, #480]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c43c:	6992      	ldr	r2, [r2, #24]
1000c43e:	2180      	movs	r1, #128	; 0x80
1000c440:	0149      	lsls	r1, r1, #5
1000c442:	430a      	orrs	r2, r1
1000c444:	619a      	str	r2, [r3, #24]
				break;
1000c446:	e004      	b.n	1000c452 <system_clock_peripheral_freq_config+0x86>
					LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c448:	4b74      	ldr	r3, [pc, #464]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c44a:	4a74      	ldr	r2, [pc, #464]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c44c:	6992      	ldr	r2, [r2, #24]
1000c44e:	619a      	str	r2, [r3, #24]
				break;
1000c450:	46c0      	nop			; (mov r8, r8)
			break;
1000c452:	e0dc      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000c454:	4b71      	ldr	r3, [pc, #452]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c456:	4a71      	ldr	r2, [pc, #452]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c458:	6992      	ldr	r2, [r2, #24]
1000c45a:	2130      	movs	r1, #48	; 0x30
1000c45c:	438a      	bics	r2, r1
1000c45e:	619a      	str	r2, [r3, #24]
				~LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL_Msk;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c460:	4b6e      	ldr	r3, [pc, #440]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c462:	4a6e      	ldr	r2, [pc, #440]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c464:	6991      	ldr	r1, [r2, #24]
				LPMCU_MISC_REGS_LPMCU_CTRL_DUALTIMER0_CLK_SEL(freq);
1000c466:	1dba      	adds	r2, r7, #6
1000c468:	7812      	ldrb	r2, [r2, #0]
1000c46a:	0112      	lsls	r2, r2, #4
1000c46c:	0010      	movs	r0, r2
1000c46e:	2230      	movs	r2, #48	; 0x30
1000c470:	4002      	ands	r2, r0
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000c472:	430a      	orrs	r2, r1
1000c474:	619a      	str	r2, [r3, #24]
			break;
1000c476:	e0ca      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->PWM0_CTRL.reg &= \
1000c478:	4968      	ldr	r1, [pc, #416]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c47a:	4a68      	ldr	r2, [pc, #416]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c47c:	23b0      	movs	r3, #176	; 0xb0
1000c47e:	005b      	lsls	r3, r3, #1
1000c480:	58d3      	ldr	r3, [r2, r3]
1000c482:	4a68      	ldr	r2, [pc, #416]	; (1000c624 <system_clock_peripheral_freq_config+0x258>)
1000c484:	401a      	ands	r2, r3
1000c486:	23b0      	movs	r3, #176	; 0xb0
1000c488:	005b      	lsls	r3, r3, #1
1000c48a:	50ca      	str	r2, [r1, r3]
				~LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->PWM0_CTRL.reg |= \
1000c48c:	4963      	ldr	r1, [pc, #396]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c48e:	4a63      	ldr	r2, [pc, #396]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c490:	23b0      	movs	r3, #176	; 0xb0
1000c492:	005b      	lsls	r3, r3, #1
1000c494:	58d2      	ldr	r2, [r2, r3]
				LPMCU_MISC_REGS_PWM0_CTRL_CLOCK_SEL(freq);
1000c496:	1dbb      	adds	r3, r7, #6
1000c498:	781b      	ldrb	r3, [r3, #0]
1000c49a:	055b      	lsls	r3, r3, #21
1000c49c:	0018      	movs	r0, r3
1000c49e:	23c0      	movs	r3, #192	; 0xc0
1000c4a0:	03db      	lsls	r3, r3, #15
1000c4a2:	4003      	ands	r3, r0
			LPMCU_MISC_REGS0->PWM0_CTRL.reg |= \
1000c4a4:	431a      	orrs	r2, r3
1000c4a6:	23b0      	movs	r3, #176	; 0xb0
1000c4a8:	005b      	lsls	r3, r3, #1
1000c4aa:	50ca      	str	r2, [r1, r3]
			break;
1000c4ac:	e0af      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->PWM1_CTRL.reg &= \
1000c4ae:	495b      	ldr	r1, [pc, #364]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4b0:	4a5a      	ldr	r2, [pc, #360]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4b2:	23b2      	movs	r3, #178	; 0xb2
1000c4b4:	005b      	lsls	r3, r3, #1
1000c4b6:	58d3      	ldr	r3, [r2, r3]
1000c4b8:	4a5a      	ldr	r2, [pc, #360]	; (1000c624 <system_clock_peripheral_freq_config+0x258>)
1000c4ba:	401a      	ands	r2, r3
1000c4bc:	23b2      	movs	r3, #178	; 0xb2
1000c4be:	005b      	lsls	r3, r3, #1
1000c4c0:	50ca      	str	r2, [r1, r3]
				~LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->PWM1_CTRL.reg |= \
1000c4c2:	4956      	ldr	r1, [pc, #344]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4c4:	4a55      	ldr	r2, [pc, #340]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4c6:	23b2      	movs	r3, #178	; 0xb2
1000c4c8:	005b      	lsls	r3, r3, #1
1000c4ca:	58d2      	ldr	r2, [r2, r3]
				LPMCU_MISC_REGS_PWM1_CTRL_CLOCK_SEL(freq);
1000c4cc:	1dbb      	adds	r3, r7, #6
1000c4ce:	781b      	ldrb	r3, [r3, #0]
1000c4d0:	055b      	lsls	r3, r3, #21
1000c4d2:	0018      	movs	r0, r3
1000c4d4:	23c0      	movs	r3, #192	; 0xc0
1000c4d6:	03db      	lsls	r3, r3, #15
1000c4d8:	4003      	ands	r3, r0
			LPMCU_MISC_REGS0->PWM1_CTRL.reg |= \
1000c4da:	431a      	orrs	r2, r3
1000c4dc:	23b2      	movs	r3, #178	; 0xb2
1000c4de:	005b      	lsls	r3, r3, #1
1000c4e0:	50ca      	str	r2, [r1, r3]
			break;
1000c4e2:	e094      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->PWM2_CTRL.reg &= \
1000c4e4:	494d      	ldr	r1, [pc, #308]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4e6:	4a4d      	ldr	r2, [pc, #308]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4e8:	23b4      	movs	r3, #180	; 0xb4
1000c4ea:	005b      	lsls	r3, r3, #1
1000c4ec:	58d3      	ldr	r3, [r2, r3]
1000c4ee:	4a4d      	ldr	r2, [pc, #308]	; (1000c624 <system_clock_peripheral_freq_config+0x258>)
1000c4f0:	401a      	ands	r2, r3
1000c4f2:	23b4      	movs	r3, #180	; 0xb4
1000c4f4:	005b      	lsls	r3, r3, #1
1000c4f6:	50ca      	str	r2, [r1, r3]
				~LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->PWM2_CTRL.reg |= \
1000c4f8:	4948      	ldr	r1, [pc, #288]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4fa:	4a48      	ldr	r2, [pc, #288]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c4fc:	23b4      	movs	r3, #180	; 0xb4
1000c4fe:	005b      	lsls	r3, r3, #1
1000c500:	58d2      	ldr	r2, [r2, r3]
				LPMCU_MISC_REGS_PWM2_CTRL_CLOCK_SEL(freq);
1000c502:	1dbb      	adds	r3, r7, #6
1000c504:	781b      	ldrb	r3, [r3, #0]
1000c506:	055b      	lsls	r3, r3, #21
1000c508:	0018      	movs	r0, r3
1000c50a:	23c0      	movs	r3, #192	; 0xc0
1000c50c:	03db      	lsls	r3, r3, #15
1000c50e:	4003      	ands	r3, r0
			LPMCU_MISC_REGS0->PWM2_CTRL.reg |= \
1000c510:	431a      	orrs	r2, r3
1000c512:	23b4      	movs	r3, #180	; 0xb4
1000c514:	005b      	lsls	r3, r3, #1
1000c516:	50ca      	str	r2, [r1, r3]
			break;
1000c518:	e079      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->PWM3_CTRL.reg &= \
1000c51a:	4940      	ldr	r1, [pc, #256]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c51c:	4a3f      	ldr	r2, [pc, #252]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c51e:	23b6      	movs	r3, #182	; 0xb6
1000c520:	005b      	lsls	r3, r3, #1
1000c522:	58d3      	ldr	r3, [r2, r3]
1000c524:	4a3f      	ldr	r2, [pc, #252]	; (1000c624 <system_clock_peripheral_freq_config+0x258>)
1000c526:	401a      	ands	r2, r3
1000c528:	23b6      	movs	r3, #182	; 0xb6
1000c52a:	005b      	lsls	r3, r3, #1
1000c52c:	50ca      	str	r2, [r1, r3]
				~LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->PWM3_CTRL.reg |= \
1000c52e:	493b      	ldr	r1, [pc, #236]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c530:	4a3a      	ldr	r2, [pc, #232]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c532:	23b6      	movs	r3, #182	; 0xb6
1000c534:	005b      	lsls	r3, r3, #1
1000c536:	58d2      	ldr	r2, [r2, r3]
				LPMCU_MISC_REGS_PWM3_CTRL_CLOCK_SEL(freq);
1000c538:	1dbb      	adds	r3, r7, #6
1000c53a:	781b      	ldrb	r3, [r3, #0]
1000c53c:	055b      	lsls	r3, r3, #21
1000c53e:	0018      	movs	r0, r3
1000c540:	23c0      	movs	r3, #192	; 0xc0
1000c542:	03db      	lsls	r3, r3, #15
1000c544:	4003      	ands	r3, r0
			LPMCU_MISC_REGS0->PWM3_CTRL.reg |= \
1000c546:	431a      	orrs	r2, r3
1000c548:	23b6      	movs	r3, #182	; 0xb6
1000c54a:	005b      	lsls	r3, r3, #1
1000c54c:	50ca      	str	r2, [r1, r3]
			break;
1000c54e:	e05e      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->QUAD_DEC0_CTRL.reg &= \
1000c550:	4a32      	ldr	r2, [pc, #200]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c552:	4932      	ldr	r1, [pc, #200]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c554:	23a5      	movs	r3, #165	; 0xa5
1000c556:	009b      	lsls	r3, r3, #2
1000c558:	5ccb      	ldrb	r3, [r1, r3]
1000c55a:	b2db      	uxtb	r3, r3
1000c55c:	210c      	movs	r1, #12
1000c55e:	438b      	bics	r3, r1
1000c560:	b2d9      	uxtb	r1, r3
1000c562:	23a5      	movs	r3, #165	; 0xa5
1000c564:	009b      	lsls	r3, r3, #2
1000c566:	54d1      	strb	r1, [r2, r3]
				~LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->QUAD_DEC0_CTRL.reg |= \
1000c568:	492c      	ldr	r1, [pc, #176]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c56a:	4a2c      	ldr	r2, [pc, #176]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c56c:	23a5      	movs	r3, #165	; 0xa5
1000c56e:	009b      	lsls	r3, r3, #2
1000c570:	5cd3      	ldrb	r3, [r2, r3]
1000c572:	b2da      	uxtb	r2, r3
				LPMCU_MISC_REGS_QUAD_DEC0_CTRL_CLOCK_SEL(freq);
1000c574:	1dbb      	adds	r3, r7, #6
1000c576:	781b      	ldrb	r3, [r3, #0]
1000c578:	009b      	lsls	r3, r3, #2
1000c57a:	b2db      	uxtb	r3, r3
1000c57c:	200c      	movs	r0, #12
1000c57e:	4003      	ands	r3, r0
1000c580:	b2db      	uxtb	r3, r3
			LPMCU_MISC_REGS0->QUAD_DEC0_CTRL.reg |= \
1000c582:	4313      	orrs	r3, r2
1000c584:	b2da      	uxtb	r2, r3
1000c586:	23a5      	movs	r3, #165	; 0xa5
1000c588:	009b      	lsls	r3, r3, #2
1000c58a:	54ca      	strb	r2, [r1, r3]
			break;
1000c58c:	e03f      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->QUAD_DEC1_CTRL.reg &= \
1000c58e:	4a23      	ldr	r2, [pc, #140]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c590:	4922      	ldr	r1, [pc, #136]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c592:	23a9      	movs	r3, #169	; 0xa9
1000c594:	009b      	lsls	r3, r3, #2
1000c596:	5ccb      	ldrb	r3, [r1, r3]
1000c598:	b2db      	uxtb	r3, r3
1000c59a:	210c      	movs	r1, #12
1000c59c:	438b      	bics	r3, r1
1000c59e:	b2d9      	uxtb	r1, r3
1000c5a0:	23a9      	movs	r3, #169	; 0xa9
1000c5a2:	009b      	lsls	r3, r3, #2
1000c5a4:	54d1      	strb	r1, [r2, r3]
				~LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->QUAD_DEC1_CTRL.reg |= \
1000c5a6:	491d      	ldr	r1, [pc, #116]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c5a8:	4a1c      	ldr	r2, [pc, #112]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c5aa:	23a9      	movs	r3, #169	; 0xa9
1000c5ac:	009b      	lsls	r3, r3, #2
1000c5ae:	5cd3      	ldrb	r3, [r2, r3]
1000c5b0:	b2da      	uxtb	r2, r3
				LPMCU_MISC_REGS_QUAD_DEC1_CTRL_CLOCK_SEL(freq);
1000c5b2:	1dbb      	adds	r3, r7, #6
1000c5b4:	781b      	ldrb	r3, [r3, #0]
1000c5b6:	009b      	lsls	r3, r3, #2
1000c5b8:	b2db      	uxtb	r3, r3
1000c5ba:	200c      	movs	r0, #12
1000c5bc:	4003      	ands	r3, r0
1000c5be:	b2db      	uxtb	r3, r3
			LPMCU_MISC_REGS0->QUAD_DEC1_CTRL.reg |= \
1000c5c0:	4313      	orrs	r3, r2
1000c5c2:	b2da      	uxtb	r2, r3
1000c5c4:	23a9      	movs	r3, #169	; 0xa9
1000c5c6:	009b      	lsls	r3, r3, #2
1000c5c8:	54ca      	strb	r2, [r1, r3]
			break;
1000c5ca:	e020      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->QUAD_DEC2_CTRL.reg &= \
1000c5cc:	4a13      	ldr	r2, [pc, #76]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c5ce:	4913      	ldr	r1, [pc, #76]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c5d0:	23ad      	movs	r3, #173	; 0xad
1000c5d2:	009b      	lsls	r3, r3, #2
1000c5d4:	5ccb      	ldrb	r3, [r1, r3]
1000c5d6:	b2db      	uxtb	r3, r3
1000c5d8:	210c      	movs	r1, #12
1000c5da:	438b      	bics	r3, r1
1000c5dc:	b2d9      	uxtb	r1, r3
1000c5de:	23ad      	movs	r3, #173	; 0xad
1000c5e0:	009b      	lsls	r3, r3, #2
1000c5e2:	54d1      	strb	r1, [r2, r3]
				~LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL_Msk;
			LPMCU_MISC_REGS0->QUAD_DEC2_CTRL.reg |= \
1000c5e4:	490d      	ldr	r1, [pc, #52]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c5e6:	4a0d      	ldr	r2, [pc, #52]	; (1000c61c <system_clock_peripheral_freq_config+0x250>)
1000c5e8:	23ad      	movs	r3, #173	; 0xad
1000c5ea:	009b      	lsls	r3, r3, #2
1000c5ec:	5cd3      	ldrb	r3, [r2, r3]
1000c5ee:	b2da      	uxtb	r2, r3
				LPMCU_MISC_REGS_QUAD_DEC2_CTRL_CLOCK_SEL(freq);
1000c5f0:	1dbb      	adds	r3, r7, #6
1000c5f2:	781b      	ldrb	r3, [r3, #0]
1000c5f4:	009b      	lsls	r3, r3, #2
1000c5f6:	b2db      	uxtb	r3, r3
1000c5f8:	200c      	movs	r0, #12
1000c5fa:	4003      	ands	r3, r0
1000c5fc:	b2db      	uxtb	r3, r3
			LPMCU_MISC_REGS0->QUAD_DEC2_CTRL.reg |= \
1000c5fe:	4313      	orrs	r3, r2
1000c600:	b2da      	uxtb	r2, r3
1000c602:	23ad      	movs	r3, #173	; 0xad
1000c604:	009b      	lsls	r3, r3, #2
1000c606:	54ca      	strb	r2, [r1, r3]
			break;
1000c608:	e001      	b.n	1000c60e <system_clock_peripheral_freq_config+0x242>

		default:
			return 	STATUS_ERR_INVALID_ARG;
1000c60a:	230a      	movs	r3, #10
1000c60c:	e000      	b.n	1000c610 <system_clock_peripheral_freq_config+0x244>
	}

	return STATUS_OK;
1000c60e:	2301      	movs	r3, #1
}
1000c610:	0018      	movs	r0, r3
1000c612:	46bd      	mov	sp, r7
1000c614:	b002      	add	sp, #8
1000c616:	bd80      	pop	{r7, pc}
1000c618:	1001010c 	.word	0x1001010c
1000c61c:	4000b000 	.word	0x4000b000
1000c620:	ffffcfff 	.word	0xffffcfff
1000c624:	ff9fffff 	.word	0xff9fffff

1000c628 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c628:	b580      	push	{r7, lr}
1000c62a:	b082      	sub	sp, #8
1000c62c:	af00      	add	r7, sp, #0
1000c62e:	0002      	movs	r2, r0
1000c630:	1dfb      	adds	r3, r7, #7
1000c632:	701a      	strb	r2, [r3, #0]
	switch (peripheral) {
1000c634:	1dfb      	adds	r3, r7, #7
1000c636:	781b      	ldrb	r3, [r3, #0]
1000c638:	2b43      	cmp	r3, #67	; 0x43
1000c63a:	d900      	bls.n	1000c63e <system_peripheral_reset+0x16>
1000c63c:	e2b2      	b.n	1000cba4 <system_peripheral_reset+0x57c>
1000c63e:	009a      	lsls	r2, r3, #2
1000c640:	4be8      	ldr	r3, [pc, #928]	; (1000c9e4 <system_peripheral_reset+0x3bc>)
1000c642:	18d3      	adds	r3, r2, r3
1000c644:	681b      	ldr	r3, [r3, #0]
1000c646:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c648:	4be7      	ldr	r3, [pc, #924]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c64a:	4ae7      	ldr	r2, [pc, #924]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c64c:	6852      	ldr	r2, [r2, #4]
1000c64e:	2102      	movs	r1, #2
1000c650:	438a      	bics	r2, r1
1000c652:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c654:	4be4      	ldr	r3, [pc, #912]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c656:	4ae4      	ldr	r2, [pc, #912]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c658:	6852      	ldr	r2, [r2, #4]
1000c65a:	2102      	movs	r1, #2
1000c65c:	430a      	orrs	r2, r1
1000c65e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c660:	e2a2      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c662:	4be1      	ldr	r3, [pc, #900]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c664:	4ae0      	ldr	r2, [pc, #896]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c666:	6852      	ldr	r2, [r2, #4]
1000c668:	2104      	movs	r1, #4
1000c66a:	438a      	bics	r2, r1
1000c66c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c66e:	4bde      	ldr	r3, [pc, #888]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c670:	4add      	ldr	r2, [pc, #884]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c672:	6852      	ldr	r2, [r2, #4]
1000c674:	2104      	movs	r1, #4
1000c676:	430a      	orrs	r2, r1
1000c678:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c67a:	e295      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c67c:	4bda      	ldr	r3, [pc, #872]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c67e:	4ada      	ldr	r2, [pc, #872]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c680:	6852      	ldr	r2, [r2, #4]
1000c682:	2108      	movs	r1, #8
1000c684:	438a      	bics	r2, r1
1000c686:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c688:	4bd7      	ldr	r3, [pc, #860]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c68a:	4ad7      	ldr	r2, [pc, #860]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c68c:	6852      	ldr	r2, [r2, #4]
1000c68e:	2108      	movs	r1, #8
1000c690:	430a      	orrs	r2, r1
1000c692:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c694:	e288      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c696:	4bd4      	ldr	r3, [pc, #848]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c698:	4ad3      	ldr	r2, [pc, #844]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c69a:	6852      	ldr	r2, [r2, #4]
1000c69c:	2110      	movs	r1, #16
1000c69e:	438a      	bics	r2, r1
1000c6a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6a2:	4bd1      	ldr	r3, [pc, #836]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6a4:	4ad0      	ldr	r2, [pc, #832]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6a6:	6852      	ldr	r2, [r2, #4]
1000c6a8:	2110      	movs	r1, #16
1000c6aa:	430a      	orrs	r2, r1
1000c6ac:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c6ae:	e27b      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6b0:	4bcd      	ldr	r3, [pc, #820]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6b2:	4acd      	ldr	r2, [pc, #820]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6b4:	6852      	ldr	r2, [r2, #4]
1000c6b6:	2120      	movs	r1, #32
1000c6b8:	438a      	bics	r2, r1
1000c6ba:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6bc:	4bca      	ldr	r3, [pc, #808]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6be:	4aca      	ldr	r2, [pc, #808]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6c0:	6852      	ldr	r2, [r2, #4]
1000c6c2:	2120      	movs	r1, #32
1000c6c4:	430a      	orrs	r2, r1
1000c6c6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c6c8:	e26e      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6ca:	4bc7      	ldr	r3, [pc, #796]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6cc:	4ac6      	ldr	r2, [pc, #792]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6ce:	6852      	ldr	r2, [r2, #4]
1000c6d0:	2140      	movs	r1, #64	; 0x40
1000c6d2:	438a      	bics	r2, r1
1000c6d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6d6:	4bc4      	ldr	r3, [pc, #784]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6d8:	4ac3      	ldr	r2, [pc, #780]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6da:	6852      	ldr	r2, [r2, #4]
1000c6dc:	2140      	movs	r1, #64	; 0x40
1000c6de:	430a      	orrs	r2, r1
1000c6e0:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c6e2:	e261      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6e4:	4bc0      	ldr	r3, [pc, #768]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6e6:	4ac0      	ldr	r2, [pc, #768]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6e8:	6852      	ldr	r2, [r2, #4]
1000c6ea:	2180      	movs	r1, #128	; 0x80
1000c6ec:	438a      	bics	r2, r1
1000c6ee:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c6f0:	4bbd      	ldr	r3, [pc, #756]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6f2:	4abd      	ldr	r2, [pc, #756]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c6f4:	6852      	ldr	r2, [r2, #4]
1000c6f6:	2180      	movs	r1, #128	; 0x80
1000c6f8:	430a      	orrs	r2, r1
1000c6fa:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c6fc:	e254      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c6fe:	4bba      	ldr	r3, [pc, #744]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c700:	4ab9      	ldr	r2, [pc, #740]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c702:	6852      	ldr	r2, [r2, #4]
1000c704:	49b9      	ldr	r1, [pc, #740]	; (1000c9ec <system_peripheral_reset+0x3c4>)
1000c706:	400a      	ands	r2, r1
1000c708:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c70a:	4bb7      	ldr	r3, [pc, #732]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c70c:	4ab6      	ldr	r2, [pc, #728]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c70e:	6852      	ldr	r2, [r2, #4]
1000c710:	2180      	movs	r1, #128	; 0x80
1000c712:	0049      	lsls	r1, r1, #1
1000c714:	430a      	orrs	r2, r1
1000c716:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c718:	e246      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c71a:	4bb3      	ldr	r3, [pc, #716]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c71c:	4ab2      	ldr	r2, [pc, #712]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c71e:	6852      	ldr	r2, [r2, #4]
1000c720:	49b3      	ldr	r1, [pc, #716]	; (1000c9f0 <system_peripheral_reset+0x3c8>)
1000c722:	400a      	ands	r2, r1
1000c724:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c726:	4bb0      	ldr	r3, [pc, #704]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c728:	4aaf      	ldr	r2, [pc, #700]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c72a:	6852      	ldr	r2, [r2, #4]
1000c72c:	2180      	movs	r1, #128	; 0x80
1000c72e:	0089      	lsls	r1, r1, #2
1000c730:	430a      	orrs	r2, r1
1000c732:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c734:	e238      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c736:	4bac      	ldr	r3, [pc, #688]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c738:	4aab      	ldr	r2, [pc, #684]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c73a:	6852      	ldr	r2, [r2, #4]
1000c73c:	49ad      	ldr	r1, [pc, #692]	; (1000c9f4 <system_peripheral_reset+0x3cc>)
1000c73e:	400a      	ands	r2, r1
1000c740:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c742:	4ba9      	ldr	r3, [pc, #676]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c744:	4aa8      	ldr	r2, [pc, #672]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c746:	6852      	ldr	r2, [r2, #4]
1000c748:	2180      	movs	r1, #128	; 0x80
1000c74a:	00c9      	lsls	r1, r1, #3
1000c74c:	430a      	orrs	r2, r1
1000c74e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c750:	e22a      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c752:	4ba5      	ldr	r3, [pc, #660]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c754:	4aa4      	ldr	r2, [pc, #656]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c756:	6852      	ldr	r2, [r2, #4]
1000c758:	49a7      	ldr	r1, [pc, #668]	; (1000c9f8 <system_peripheral_reset+0x3d0>)
1000c75a:	400a      	ands	r2, r1
1000c75c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c75e:	4ba2      	ldr	r3, [pc, #648]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c760:	4aa1      	ldr	r2, [pc, #644]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c762:	6852      	ldr	r2, [r2, #4]
1000c764:	2180      	movs	r1, #128	; 0x80
1000c766:	0109      	lsls	r1, r1, #4
1000c768:	430a      	orrs	r2, r1
1000c76a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c76c:	e21c      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c76e:	4b9e      	ldr	r3, [pc, #632]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c770:	4a9d      	ldr	r2, [pc, #628]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c772:	6852      	ldr	r2, [r2, #4]
1000c774:	49a1      	ldr	r1, [pc, #644]	; (1000c9fc <system_peripheral_reset+0x3d4>)
1000c776:	400a      	ands	r2, r1
1000c778:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c77a:	4b9b      	ldr	r3, [pc, #620]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c77c:	4a9a      	ldr	r2, [pc, #616]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c77e:	6852      	ldr	r2, [r2, #4]
1000c780:	2180      	movs	r1, #128	; 0x80
1000c782:	0149      	lsls	r1, r1, #5
1000c784:	430a      	orrs	r2, r1
1000c786:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c788:	e20e      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c78a:	4b97      	ldr	r3, [pc, #604]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c78c:	4a96      	ldr	r2, [pc, #600]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c78e:	6852      	ldr	r2, [r2, #4]
1000c790:	499b      	ldr	r1, [pc, #620]	; (1000ca00 <system_peripheral_reset+0x3d8>)
1000c792:	400a      	ands	r2, r1
1000c794:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c796:	4b94      	ldr	r3, [pc, #592]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c798:	4a93      	ldr	r2, [pc, #588]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c79a:	6852      	ldr	r2, [r2, #4]
1000c79c:	2180      	movs	r1, #128	; 0x80
1000c79e:	0189      	lsls	r1, r1, #6
1000c7a0:	430a      	orrs	r2, r1
1000c7a2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c7a4:	e200      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7a6:	4b90      	ldr	r3, [pc, #576]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7a8:	4a8f      	ldr	r2, [pc, #572]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7aa:	6852      	ldr	r2, [r2, #4]
1000c7ac:	4995      	ldr	r1, [pc, #596]	; (1000ca04 <system_peripheral_reset+0x3dc>)
1000c7ae:	400a      	ands	r2, r1
1000c7b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7b2:	4b8d      	ldr	r3, [pc, #564]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7b4:	4a8c      	ldr	r2, [pc, #560]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7b6:	6852      	ldr	r2, [r2, #4]
1000c7b8:	2180      	movs	r1, #128	; 0x80
1000c7ba:	01c9      	lsls	r1, r1, #7
1000c7bc:	430a      	orrs	r2, r1
1000c7be:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c7c0:	e1f2      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7c2:	4b89      	ldr	r3, [pc, #548]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7c4:	4a88      	ldr	r2, [pc, #544]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7c6:	6852      	ldr	r2, [r2, #4]
1000c7c8:	498f      	ldr	r1, [pc, #572]	; (1000ca08 <system_peripheral_reset+0x3e0>)
1000c7ca:	400a      	ands	r2, r1
1000c7cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7ce:	4b86      	ldr	r3, [pc, #536]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7d0:	4a85      	ldr	r2, [pc, #532]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7d2:	6852      	ldr	r2, [r2, #4]
1000c7d4:	2180      	movs	r1, #128	; 0x80
1000c7d6:	0209      	lsls	r1, r1, #8
1000c7d8:	430a      	orrs	r2, r1
1000c7da:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c7dc:	e1e4      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7de:	4b82      	ldr	r3, [pc, #520]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7e0:	4a81      	ldr	r2, [pc, #516]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7e2:	6852      	ldr	r2, [r2, #4]
1000c7e4:	4989      	ldr	r1, [pc, #548]	; (1000ca0c <system_peripheral_reset+0x3e4>)
1000c7e6:	400a      	ands	r2, r1
1000c7e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c7ea:	4b7f      	ldr	r3, [pc, #508]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7ec:	4a7e      	ldr	r2, [pc, #504]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7ee:	6852      	ldr	r2, [r2, #4]
1000c7f0:	2180      	movs	r1, #128	; 0x80
1000c7f2:	0249      	lsls	r1, r1, #9
1000c7f4:	430a      	orrs	r2, r1
1000c7f6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c7f8:	e1d6      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c7fa:	4b7b      	ldr	r3, [pc, #492]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7fc:	4a7a      	ldr	r2, [pc, #488]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c7fe:	6852      	ldr	r2, [r2, #4]
1000c800:	4983      	ldr	r1, [pc, #524]	; (1000ca10 <system_peripheral_reset+0x3e8>)
1000c802:	400a      	ands	r2, r1
1000c804:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c806:	4b78      	ldr	r3, [pc, #480]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c808:	4a77      	ldr	r2, [pc, #476]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c80a:	6852      	ldr	r2, [r2, #4]
1000c80c:	2180      	movs	r1, #128	; 0x80
1000c80e:	0289      	lsls	r1, r1, #10
1000c810:	430a      	orrs	r2, r1
1000c812:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c814:	e1c8      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c816:	4b74      	ldr	r3, [pc, #464]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c818:	4a73      	ldr	r2, [pc, #460]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c81a:	6852      	ldr	r2, [r2, #4]
1000c81c:	497d      	ldr	r1, [pc, #500]	; (1000ca14 <system_peripheral_reset+0x3ec>)
1000c81e:	400a      	ands	r2, r1
1000c820:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c822:	4b71      	ldr	r3, [pc, #452]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c824:	4a70      	ldr	r2, [pc, #448]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c826:	6852      	ldr	r2, [r2, #4]
1000c828:	2180      	movs	r1, #128	; 0x80
1000c82a:	02c9      	lsls	r1, r1, #11
1000c82c:	430a      	orrs	r2, r1
1000c82e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c830:	e1ba      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c832:	4b6d      	ldr	r3, [pc, #436]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c834:	4a6c      	ldr	r2, [pc, #432]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c836:	6852      	ldr	r2, [r2, #4]
1000c838:	4977      	ldr	r1, [pc, #476]	; (1000ca18 <system_peripheral_reset+0x3f0>)
1000c83a:	400a      	ands	r2, r1
1000c83c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c83e:	4b6a      	ldr	r3, [pc, #424]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c840:	4a69      	ldr	r2, [pc, #420]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c842:	6852      	ldr	r2, [r2, #4]
1000c844:	2180      	movs	r1, #128	; 0x80
1000c846:	0309      	lsls	r1, r1, #12
1000c848:	430a      	orrs	r2, r1
1000c84a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c84c:	e1ac      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c84e:	4b66      	ldr	r3, [pc, #408]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c850:	4a65      	ldr	r2, [pc, #404]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c852:	6852      	ldr	r2, [r2, #4]
1000c854:	4971      	ldr	r1, [pc, #452]	; (1000ca1c <system_peripheral_reset+0x3f4>)
1000c856:	400a      	ands	r2, r1
1000c858:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c85a:	4b63      	ldr	r3, [pc, #396]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c85c:	4a62      	ldr	r2, [pc, #392]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c85e:	6852      	ldr	r2, [r2, #4]
1000c860:	2180      	movs	r1, #128	; 0x80
1000c862:	0349      	lsls	r1, r1, #13
1000c864:	430a      	orrs	r2, r1
1000c866:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c868:	e19e      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c86a:	4b5f      	ldr	r3, [pc, #380]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c86c:	4a5e      	ldr	r2, [pc, #376]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c86e:	6852      	ldr	r2, [r2, #4]
1000c870:	496b      	ldr	r1, [pc, #428]	; (1000ca20 <system_peripheral_reset+0x3f8>)
1000c872:	400a      	ands	r2, r1
1000c874:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c876:	4b5c      	ldr	r3, [pc, #368]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c878:	4a5b      	ldr	r2, [pc, #364]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c87a:	6852      	ldr	r2, [r2, #4]
1000c87c:	2180      	movs	r1, #128	; 0x80
1000c87e:	0389      	lsls	r1, r1, #14
1000c880:	430a      	orrs	r2, r1
1000c882:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c884:	e190      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c886:	4b58      	ldr	r3, [pc, #352]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c888:	4a57      	ldr	r2, [pc, #348]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c88a:	6852      	ldr	r2, [r2, #4]
1000c88c:	4965      	ldr	r1, [pc, #404]	; (1000ca24 <system_peripheral_reset+0x3fc>)
1000c88e:	400a      	ands	r2, r1
1000c890:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c892:	4b55      	ldr	r3, [pc, #340]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c894:	4a54      	ldr	r2, [pc, #336]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c896:	6852      	ldr	r2, [r2, #4]
1000c898:	2180      	movs	r1, #128	; 0x80
1000c89a:	03c9      	lsls	r1, r1, #15
1000c89c:	430a      	orrs	r2, r1
1000c89e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c8a0:	e182      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8a2:	4b51      	ldr	r3, [pc, #324]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8a4:	4a50      	ldr	r2, [pc, #320]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8a6:	6852      	ldr	r2, [r2, #4]
1000c8a8:	495f      	ldr	r1, [pc, #380]	; (1000ca28 <system_peripheral_reset+0x400>)
1000c8aa:	400a      	ands	r2, r1
1000c8ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8ae:	4b4e      	ldr	r3, [pc, #312]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8b0:	4a4d      	ldr	r2, [pc, #308]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8b2:	6852      	ldr	r2, [r2, #4]
1000c8b4:	2180      	movs	r1, #128	; 0x80
1000c8b6:	0409      	lsls	r1, r1, #16
1000c8b8:	430a      	orrs	r2, r1
1000c8ba:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c8bc:	e174      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8be:	4b4a      	ldr	r3, [pc, #296]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8c0:	4a49      	ldr	r2, [pc, #292]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8c2:	6852      	ldr	r2, [r2, #4]
1000c8c4:	4959      	ldr	r1, [pc, #356]	; (1000ca2c <system_peripheral_reset+0x404>)
1000c8c6:	400a      	ands	r2, r1
1000c8c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8ca:	4b47      	ldr	r3, [pc, #284]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8cc:	4a46      	ldr	r2, [pc, #280]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8ce:	6852      	ldr	r2, [r2, #4]
1000c8d0:	2180      	movs	r1, #128	; 0x80
1000c8d2:	0449      	lsls	r1, r1, #17
1000c8d4:	430a      	orrs	r2, r1
1000c8d6:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c8d8:	e166      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8da:	4b43      	ldr	r3, [pc, #268]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8dc:	4a42      	ldr	r2, [pc, #264]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8de:	6852      	ldr	r2, [r2, #4]
1000c8e0:	4953      	ldr	r1, [pc, #332]	; (1000ca30 <system_peripheral_reset+0x408>)
1000c8e2:	400a      	ands	r2, r1
1000c8e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c8e6:	4b40      	ldr	r3, [pc, #256]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8e8:	4a3f      	ldr	r2, [pc, #252]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8ea:	6852      	ldr	r2, [r2, #4]
1000c8ec:	2180      	movs	r1, #128	; 0x80
1000c8ee:	0489      	lsls	r1, r1, #18
1000c8f0:	430a      	orrs	r2, r1
1000c8f2:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c8f4:	e158      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c8f6:	4b3c      	ldr	r3, [pc, #240]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8f8:	4a3b      	ldr	r2, [pc, #236]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c8fa:	6852      	ldr	r2, [r2, #4]
1000c8fc:	494d      	ldr	r1, [pc, #308]	; (1000ca34 <system_peripheral_reset+0x40c>)
1000c8fe:	400a      	ands	r2, r1
1000c900:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c902:	4b39      	ldr	r3, [pc, #228]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c904:	4a38      	ldr	r2, [pc, #224]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c906:	6852      	ldr	r2, [r2, #4]
1000c908:	2180      	movs	r1, #128	; 0x80
1000c90a:	04c9      	lsls	r1, r1, #19
1000c90c:	430a      	orrs	r2, r1
1000c90e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c910:	e14a      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c912:	4b35      	ldr	r3, [pc, #212]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c914:	4a34      	ldr	r2, [pc, #208]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c916:	6852      	ldr	r2, [r2, #4]
1000c918:	4947      	ldr	r1, [pc, #284]	; (1000ca38 <system_peripheral_reset+0x410>)
1000c91a:	400a      	ands	r2, r1
1000c91c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c91e:	4b32      	ldr	r3, [pc, #200]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c920:	4a31      	ldr	r2, [pc, #196]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c922:	6852      	ldr	r2, [r2, #4]
1000c924:	2180      	movs	r1, #128	; 0x80
1000c926:	0509      	lsls	r1, r1, #20
1000c928:	430a      	orrs	r2, r1
1000c92a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c92c:	e13c      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c92e:	4b2e      	ldr	r3, [pc, #184]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c930:	4a2d      	ldr	r2, [pc, #180]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c932:	6852      	ldr	r2, [r2, #4]
1000c934:	4941      	ldr	r1, [pc, #260]	; (1000ca3c <system_peripheral_reset+0x414>)
1000c936:	400a      	ands	r2, r1
1000c938:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c93a:	4b2b      	ldr	r3, [pc, #172]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c93c:	4a2a      	ldr	r2, [pc, #168]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c93e:	6852      	ldr	r2, [r2, #4]
1000c940:	2180      	movs	r1, #128	; 0x80
1000c942:	0549      	lsls	r1, r1, #21
1000c944:	430a      	orrs	r2, r1
1000c946:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c948:	e12e      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c94a:	4b27      	ldr	r3, [pc, #156]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c94c:	4a26      	ldr	r2, [pc, #152]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c94e:	6852      	ldr	r2, [r2, #4]
1000c950:	493b      	ldr	r1, [pc, #236]	; (1000ca40 <system_peripheral_reset+0x418>)
1000c952:	400a      	ands	r2, r1
1000c954:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c956:	4b24      	ldr	r3, [pc, #144]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c958:	4a23      	ldr	r2, [pc, #140]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c95a:	6852      	ldr	r2, [r2, #4]
1000c95c:	2180      	movs	r1, #128	; 0x80
1000c95e:	0589      	lsls	r1, r1, #22
1000c960:	430a      	orrs	r2, r1
1000c962:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c964:	e120      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c966:	4b20      	ldr	r3, [pc, #128]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c968:	4a1f      	ldr	r2, [pc, #124]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c96a:	6852      	ldr	r2, [r2, #4]
1000c96c:	4935      	ldr	r1, [pc, #212]	; (1000ca44 <system_peripheral_reset+0x41c>)
1000c96e:	400a      	ands	r2, r1
1000c970:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c972:	4b1d      	ldr	r3, [pc, #116]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c974:	4a1c      	ldr	r2, [pc, #112]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c976:	6852      	ldr	r2, [r2, #4]
1000c978:	2180      	movs	r1, #128	; 0x80
1000c97a:	05c9      	lsls	r1, r1, #23
1000c97c:	430a      	orrs	r2, r1
1000c97e:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c980:	e112      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c982:	4b19      	ldr	r3, [pc, #100]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c984:	4a18      	ldr	r2, [pc, #96]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c986:	6852      	ldr	r2, [r2, #4]
1000c988:	0052      	lsls	r2, r2, #1
1000c98a:	0852      	lsrs	r2, r2, #1
1000c98c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c98e:	4b16      	ldr	r3, [pc, #88]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c990:	4a15      	ldr	r2, [pc, #84]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c992:	6852      	ldr	r2, [r2, #4]
1000c994:	2180      	movs	r1, #128	; 0x80
1000c996:	0609      	lsls	r1, r1, #24
1000c998:	430a      	orrs	r2, r1
1000c99a:	605a      	str	r2, [r3, #4]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c99c:	e104      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c99e:	4a12      	ldr	r2, [pc, #72]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9a0:	4b11      	ldr	r3, [pc, #68]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9a2:	891b      	ldrh	r3, [r3, #8]
1000c9a4:	b29b      	uxth	r3, r3
1000c9a6:	2101      	movs	r1, #1
1000c9a8:	438b      	bics	r3, r1
1000c9aa:	b29b      	uxth	r3, r3
1000c9ac:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c9ae:	4a0e      	ldr	r2, [pc, #56]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9b0:	4b0d      	ldr	r3, [pc, #52]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9b2:	891b      	ldrh	r3, [r3, #8]
1000c9b4:	b29b      	uxth	r3, r3
1000c9b6:	2101      	movs	r1, #1
1000c9b8:	430b      	orrs	r3, r1
1000c9ba:	b29b      	uxth	r3, r3
1000c9bc:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c9be:	e0f3      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c9c0:	4a09      	ldr	r2, [pc, #36]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9c2:	4b09      	ldr	r3, [pc, #36]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9c4:	891b      	ldrh	r3, [r3, #8]
1000c9c6:	b29b      	uxth	r3, r3
1000c9c8:	2102      	movs	r1, #2
1000c9ca:	438b      	bics	r3, r1
1000c9cc:	b29b      	uxth	r3, r3
1000c9ce:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c9d0:	4a05      	ldr	r2, [pc, #20]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9d2:	4b05      	ldr	r3, [pc, #20]	; (1000c9e8 <system_peripheral_reset+0x3c0>)
1000c9d4:	891b      	ldrh	r3, [r3, #8]
1000c9d6:	b29b      	uxth	r3, r3
1000c9d8:	2102      	movs	r1, #2
1000c9da:	430b      	orrs	r3, r1
1000c9dc:	b29b      	uxth	r3, r3
1000c9de:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c9e0:	e0e2      	b.n	1000cba8 <system_peripheral_reset+0x580>
1000c9e2:	46c0      	nop			; (mov r8, r8)
1000c9e4:	100101a0 	.word	0x100101a0
1000c9e8:	4000b000 	.word	0x4000b000
1000c9ec:	fffffeff 	.word	0xfffffeff
1000c9f0:	fffffdff 	.word	0xfffffdff
1000c9f4:	fffffbff 	.word	0xfffffbff
1000c9f8:	fffff7ff 	.word	0xfffff7ff
1000c9fc:	ffffefff 	.word	0xffffefff
1000ca00:	ffffdfff 	.word	0xffffdfff
1000ca04:	ffffbfff 	.word	0xffffbfff
1000ca08:	ffff7fff 	.word	0xffff7fff
1000ca0c:	fffeffff 	.word	0xfffeffff
1000ca10:	fffdffff 	.word	0xfffdffff
1000ca14:	fffbffff 	.word	0xfffbffff
1000ca18:	fff7ffff 	.word	0xfff7ffff
1000ca1c:	ffefffff 	.word	0xffefffff
1000ca20:	ffdfffff 	.word	0xffdfffff
1000ca24:	ffbfffff 	.word	0xffbfffff
1000ca28:	ff7fffff 	.word	0xff7fffff
1000ca2c:	feffffff 	.word	0xfeffffff
1000ca30:	fdffffff 	.word	0xfdffffff
1000ca34:	fbffffff 	.word	0xfbffffff
1000ca38:	f7ffffff 	.word	0xf7ffffff
1000ca3c:	efffffff 	.word	0xefffffff
1000ca40:	dfffffff 	.word	0xdfffffff
1000ca44:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ca48:	4a5a      	ldr	r2, [pc, #360]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca4a:	4b5a      	ldr	r3, [pc, #360]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca4c:	891b      	ldrh	r3, [r3, #8]
1000ca4e:	b29b      	uxth	r3, r3
1000ca50:	2104      	movs	r1, #4
1000ca52:	438b      	bics	r3, r1
1000ca54:	b29b      	uxth	r3, r3
1000ca56:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ca58:	4a56      	ldr	r2, [pc, #344]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca5a:	4b56      	ldr	r3, [pc, #344]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca5c:	891b      	ldrh	r3, [r3, #8]
1000ca5e:	b29b      	uxth	r3, r3
1000ca60:	2104      	movs	r1, #4
1000ca62:	430b      	orrs	r3, r1
1000ca64:	b29b      	uxth	r3, r3
1000ca66:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000ca68:	e09e      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ca6a:	4a52      	ldr	r2, [pc, #328]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca6c:	4b51      	ldr	r3, [pc, #324]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca6e:	891b      	ldrh	r3, [r3, #8]
1000ca70:	b29b      	uxth	r3, r3
1000ca72:	2108      	movs	r1, #8
1000ca74:	438b      	bics	r3, r1
1000ca76:	b29b      	uxth	r3, r3
1000ca78:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ca7a:	4a4e      	ldr	r2, [pc, #312]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca7c:	4b4d      	ldr	r3, [pc, #308]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca7e:	891b      	ldrh	r3, [r3, #8]
1000ca80:	b29b      	uxth	r3, r3
1000ca82:	2108      	movs	r1, #8
1000ca84:	430b      	orrs	r3, r1
1000ca86:	b29b      	uxth	r3, r3
1000ca88:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000ca8a:	e08d      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ca8c:	4a49      	ldr	r2, [pc, #292]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca8e:	4b49      	ldr	r3, [pc, #292]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca90:	891b      	ldrh	r3, [r3, #8]
1000ca92:	b29b      	uxth	r3, r3
1000ca94:	2110      	movs	r1, #16
1000ca96:	438b      	bics	r3, r1
1000ca98:	b29b      	uxth	r3, r3
1000ca9a:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ca9c:	4a45      	ldr	r2, [pc, #276]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000ca9e:	4b45      	ldr	r3, [pc, #276]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000caa0:	891b      	ldrh	r3, [r3, #8]
1000caa2:	b29b      	uxth	r3, r3
1000caa4:	2110      	movs	r1, #16
1000caa6:	430b      	orrs	r3, r1
1000caa8:	b29b      	uxth	r3, r3
1000caaa:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000caac:	e07c      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000caae:	4a41      	ldr	r2, [pc, #260]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cab0:	4b40      	ldr	r3, [pc, #256]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cab2:	891b      	ldrh	r3, [r3, #8]
1000cab4:	b29b      	uxth	r3, r3
1000cab6:	2120      	movs	r1, #32
1000cab8:	438b      	bics	r3, r1
1000caba:	b29b      	uxth	r3, r3
1000cabc:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cabe:	4a3d      	ldr	r2, [pc, #244]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cac0:	4b3c      	ldr	r3, [pc, #240]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cac2:	891b      	ldrh	r3, [r3, #8]
1000cac4:	b29b      	uxth	r3, r3
1000cac6:	2120      	movs	r1, #32
1000cac8:	430b      	orrs	r3, r1
1000caca:	b29b      	uxth	r3, r3
1000cacc:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000cace:	e06b      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cad0:	4a38      	ldr	r2, [pc, #224]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cad2:	4b38      	ldr	r3, [pc, #224]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cad4:	891b      	ldrh	r3, [r3, #8]
1000cad6:	b29b      	uxth	r3, r3
1000cad8:	2140      	movs	r1, #64	; 0x40
1000cada:	438b      	bics	r3, r1
1000cadc:	b29b      	uxth	r3, r3
1000cade:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cae0:	4a34      	ldr	r2, [pc, #208]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cae2:	4b34      	ldr	r3, [pc, #208]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cae4:	891b      	ldrh	r3, [r3, #8]
1000cae6:	b29b      	uxth	r3, r3
1000cae8:	2140      	movs	r1, #64	; 0x40
1000caea:	430b      	orrs	r3, r1
1000caec:	b29b      	uxth	r3, r3
1000caee:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000caf0:	e05a      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000caf2:	4a30      	ldr	r2, [pc, #192]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000caf4:	4b2f      	ldr	r3, [pc, #188]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000caf6:	891b      	ldrh	r3, [r3, #8]
1000caf8:	b29b      	uxth	r3, r3
1000cafa:	2180      	movs	r1, #128	; 0x80
1000cafc:	438b      	bics	r3, r1
1000cafe:	b29b      	uxth	r3, r3
1000cb00:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb02:	4a2c      	ldr	r2, [pc, #176]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb04:	4b2b      	ldr	r3, [pc, #172]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb06:	891b      	ldrh	r3, [r3, #8]
1000cb08:	b29b      	uxth	r3, r3
1000cb0a:	2180      	movs	r1, #128	; 0x80
1000cb0c:	430b      	orrs	r3, r1
1000cb0e:	b29b      	uxth	r3, r3
1000cb10:	8113      	strh	r3, [r2, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000cb12:	e049      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb14:	4a27      	ldr	r2, [pc, #156]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb16:	4b27      	ldr	r3, [pc, #156]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb18:	891b      	ldrh	r3, [r3, #8]
1000cb1a:	b29b      	uxth	r3, r3
1000cb1c:	4926      	ldr	r1, [pc, #152]	; (1000cbb8 <system_peripheral_reset+0x590>)
1000cb1e:	400b      	ands	r3, r1
1000cb20:	b29b      	uxth	r3, r3
1000cb22:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb24:	4923      	ldr	r1, [pc, #140]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb26:	4b23      	ldr	r3, [pc, #140]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb28:	891b      	ldrh	r3, [r3, #8]
1000cb2a:	b29b      	uxth	r3, r3
1000cb2c:	2280      	movs	r2, #128	; 0x80
1000cb2e:	0052      	lsls	r2, r2, #1
1000cb30:	4313      	orrs	r3, r2
1000cb32:	b29b      	uxth	r3, r3
1000cb34:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000cb36:	e037      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb38:	4a1e      	ldr	r2, [pc, #120]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb3a:	4b1e      	ldr	r3, [pc, #120]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb3c:	891b      	ldrh	r3, [r3, #8]
1000cb3e:	b29b      	uxth	r3, r3
1000cb40:	491e      	ldr	r1, [pc, #120]	; (1000cbbc <system_peripheral_reset+0x594>)
1000cb42:	400b      	ands	r3, r1
1000cb44:	b29b      	uxth	r3, r3
1000cb46:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb48:	491a      	ldr	r1, [pc, #104]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb4a:	4b1a      	ldr	r3, [pc, #104]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb4c:	891b      	ldrh	r3, [r3, #8]
1000cb4e:	b29b      	uxth	r3, r3
1000cb50:	2280      	movs	r2, #128	; 0x80
1000cb52:	0092      	lsls	r2, r2, #2
1000cb54:	4313      	orrs	r3, r2
1000cb56:	b29b      	uxth	r3, r3
1000cb58:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cb5a:	e025      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb5c:	4a15      	ldr	r2, [pc, #84]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb5e:	4b15      	ldr	r3, [pc, #84]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb60:	891b      	ldrh	r3, [r3, #8]
1000cb62:	b29b      	uxth	r3, r3
1000cb64:	4916      	ldr	r1, [pc, #88]	; (1000cbc0 <system_peripheral_reset+0x598>)
1000cb66:	400b      	ands	r3, r1
1000cb68:	b29b      	uxth	r3, r3
1000cb6a:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb6c:	4911      	ldr	r1, [pc, #68]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb6e:	4b11      	ldr	r3, [pc, #68]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb70:	891b      	ldrh	r3, [r3, #8]
1000cb72:	b29b      	uxth	r3, r3
1000cb74:	2280      	movs	r2, #128	; 0x80
1000cb76:	00d2      	lsls	r2, r2, #3
1000cb78:	4313      	orrs	r3, r2
1000cb7a:	b29b      	uxth	r3, r3
1000cb7c:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000cb7e:	e013      	b.n	1000cba8 <system_peripheral_reset+0x580>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000cb80:	4a0c      	ldr	r2, [pc, #48]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb82:	4b0c      	ldr	r3, [pc, #48]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb84:	891b      	ldrh	r3, [r3, #8]
1000cb86:	b29b      	uxth	r3, r3
1000cb88:	490e      	ldr	r1, [pc, #56]	; (1000cbc4 <system_peripheral_reset+0x59c>)
1000cb8a:	400b      	ands	r3, r1
1000cb8c:	b29b      	uxth	r3, r3
1000cb8e:	8113      	strh	r3, [r2, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000cb90:	4908      	ldr	r1, [pc, #32]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb92:	4b08      	ldr	r3, [pc, #32]	; (1000cbb4 <system_peripheral_reset+0x58c>)
1000cb94:	891b      	ldrh	r3, [r3, #8]
1000cb96:	b29b      	uxth	r3, r3
1000cb98:	2280      	movs	r2, #128	; 0x80
1000cb9a:	0112      	lsls	r2, r2, #4
1000cb9c:	4313      	orrs	r3, r2
1000cb9e:	b29b      	uxth	r3, r3
1000cba0:	810b      	strh	r3, [r1, #8]
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000cba2:	e001      	b.n	1000cba8 <system_peripheral_reset+0x580>

		default:
			return STATUS_ERR_INVALID_ARG;
1000cba4:	230a      	movs	r3, #10
1000cba6:	e000      	b.n	1000cbaa <system_peripheral_reset+0x582>
	}

	return STATUS_OK;
1000cba8:	2301      	movs	r3, #1
}
1000cbaa:	0018      	movs	r0, r3
1000cbac:	46bd      	mov	sp, r7
1000cbae:	b002      	add	sp, #8
1000cbb0:	bd80      	pop	{r7, pc}
1000cbb2:	46c0      	nop			; (mov r8, r8)
1000cbb4:	4000b000 	.word	0x4000b000
1000cbb8:	fffffeff 	.word	0xfffffeff
1000cbbc:	fffffdff 	.word	0xfffffdff
1000cbc0:	fffffbff 	.word	0xfffffbff
1000cbc4:	fffff7ff 	.word	0xfffff7ff

1000cbc8 <i2c_init>:
struct io_descriptor *io_i2c;
struct timer_task TIMER_0_task;
volatile uint32_t ticks = 0; //Used for timing

void i2c_init()
{
1000cbc8:	b580      	push	{r7, lr}
1000cbca:	af00      	add	r7, sp, #0
	i2c_m_sync_get_io_descriptor(&I2C_0, &io_i2c);
1000cbcc:	4a06      	ldr	r2, [pc, #24]	; (1000cbe8 <i2c_init+0x20>)
1000cbce:	4b07      	ldr	r3, [pc, #28]	; (1000cbec <i2c_init+0x24>)
1000cbd0:	0011      	movs	r1, r2
1000cbd2:	0018      	movs	r0, r3
1000cbd4:	4b06      	ldr	r3, [pc, #24]	; (1000cbf0 <i2c_init+0x28>)
1000cbd6:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
1000cbd8:	4b04      	ldr	r3, [pc, #16]	; (1000cbec <i2c_init+0x24>)
1000cbda:	0018      	movs	r0, r3
1000cbdc:	4b05      	ldr	r3, [pc, #20]	; (1000cbf4 <i2c_init+0x2c>)
1000cbde:	4798      	blx	r3
}
1000cbe0:	46c0      	nop			; (mov r8, r8)
1000cbe2:	46bd      	mov	sp, r7
1000cbe4:	bd80      	pop	{r7, pc}
1000cbe6:	46c0      	nop			; (mov r8, r8)
1000cbe8:	10018fa8 	.word	0x10018fa8
1000cbec:	10011264 	.word	0x10011264
1000cbf0:	10009f69 	.word	0x10009f69
1000cbf4:	10009ea1 	.word	0x10009ea1

1000cbf8 <spi_init>:

void spi_init()
{
1000cbf8:	b580      	push	{r7, lr}
1000cbfa:	af00      	add	r7, sp, #0
	spi_m_sync_get_io_descriptor(&SPI_0, &io_lcd_spi);
1000cbfc:	4a06      	ldr	r2, [pc, #24]	; (1000cc18 <spi_init+0x20>)
1000cbfe:	4b07      	ldr	r3, [pc, #28]	; (1000cc1c <spi_init+0x24>)
1000cc00:	0011      	movs	r1, r2
1000cc02:	0018      	movs	r0, r3
1000cc04:	4b06      	ldr	r3, [pc, #24]	; (1000cc20 <spi_init+0x28>)
1000cc06:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
1000cc08:	4b04      	ldr	r3, [pc, #16]	; (1000cc1c <spi_init+0x24>)
1000cc0a:	0018      	movs	r0, r3
1000cc0c:	4b05      	ldr	r3, [pc, #20]	; (1000cc24 <spi_init+0x2c>)
1000cc0e:	4798      	blx	r3
}
1000cc10:	46c0      	nop			; (mov r8, r8)
1000cc12:	46bd      	mov	sp, r7
1000cc14:	bd80      	pop	{r7, pc}
1000cc16:	46c0      	nop			; (mov r8, r8)
1000cc18:	10011140 	.word	0x10011140
1000cc1c:	10011250 	.word	0x10011250
1000cc20:	1000a1d5 	.word	0x1000a1d5
1000cc24:	1000a065 	.word	0x1000a065

1000cc28 <TIMER_0_wakeup_task_cb>:

static void TIMER_0_wakeup_task_cb(const struct timer_task *const timer_task)
{
1000cc28:	b580      	push	{r7, lr}
1000cc2a:	b082      	sub	sp, #8
1000cc2c:	af00      	add	r7, sp, #0
1000cc2e:	6078      	str	r0, [r7, #4]
	ticks++;
1000cc30:	4b04      	ldr	r3, [pc, #16]	; (1000cc44 <TIMER_0_wakeup_task_cb+0x1c>)
1000cc32:	681b      	ldr	r3, [r3, #0]
1000cc34:	1c5a      	adds	r2, r3, #1
1000cc36:	4b03      	ldr	r3, [pc, #12]	; (1000cc44 <TIMER_0_wakeup_task_cb+0x1c>)
1000cc38:	601a      	str	r2, [r3, #0]
}
1000cc3a:	46c0      	nop			; (mov r8, r8)
1000cc3c:	46bd      	mov	sp, r7
1000cc3e:	b002      	add	sp, #8
1000cc40:	bd80      	pop	{r7, pc}
1000cc42:	46c0      	nop			; (mov r8, r8)
1000cc44:	10011130 	.word	0x10011130

1000cc48 <TIMER_0_example>:

void TIMER_0_example(void)
{
1000cc48:	b580      	push	{r7, lr}
1000cc4a:	af00      	add	r7, sp, #0
	TIMER_0_task.interval = 1;
1000cc4c:	4b0a      	ldr	r3, [pc, #40]	; (1000cc78 <TIMER_0_example+0x30>)
1000cc4e:	2201      	movs	r2, #1
1000cc50:	609a      	str	r2, [r3, #8]
	TIMER_0_task.cb       = TIMER_0_wakeup_task_cb;
1000cc52:	4b09      	ldr	r3, [pc, #36]	; (1000cc78 <TIMER_0_example+0x30>)
1000cc54:	4a09      	ldr	r2, [pc, #36]	; (1000cc7c <TIMER_0_example+0x34>)
1000cc56:	60da      	str	r2, [r3, #12]
	TIMER_0_task.mode     = TIMER_TASK_REPEAT;
1000cc58:	4b07      	ldr	r3, [pc, #28]	; (1000cc78 <TIMER_0_example+0x30>)
1000cc5a:	2201      	movs	r2, #1
1000cc5c:	741a      	strb	r2, [r3, #16]

	timer_add_task(&TIMER_0, &TIMER_0_task);
1000cc5e:	4a06      	ldr	r2, [pc, #24]	; (1000cc78 <TIMER_0_example+0x30>)
1000cc60:	4b07      	ldr	r3, [pc, #28]	; (1000cc80 <TIMER_0_example+0x38>)
1000cc62:	0011      	movs	r1, r2
1000cc64:	0018      	movs	r0, r3
1000cc66:	4b07      	ldr	r3, [pc, #28]	; (1000cc84 <TIMER_0_example+0x3c>)
1000cc68:	4798      	blx	r3
	timer_start(&TIMER_0);
1000cc6a:	4b05      	ldr	r3, [pc, #20]	; (1000cc80 <TIMER_0_example+0x38>)
1000cc6c:	0018      	movs	r0, r3
1000cc6e:	4b06      	ldr	r3, [pc, #24]	; (1000cc88 <TIMER_0_example+0x40>)
1000cc70:	4798      	blx	r3
}
1000cc72:	46c0      	nop			; (mov r8, r8)
1000cc74:	46bd      	mov	sp, r7
1000cc76:	bd80      	pop	{r7, pc}
1000cc78:	10018fac 	.word	0x10018fac
1000cc7c:	1000cc29 	.word	0x1000cc29
1000cc80:	10011284 	.word	0x10011284
1000cc84:	1000a309 	.word	0x1000a309
1000cc88:	1000a2b9 	.word	0x1000a2b9

1000cc8c <peripherals_init>:

void peripherals_init()
{
1000cc8c:	b580      	push	{r7, lr}
1000cc8e:	af00      	add	r7, sp, #0
	i2c_init();
1000cc90:	4b03      	ldr	r3, [pc, #12]	; (1000cca0 <peripherals_init+0x14>)
1000cc92:	4798      	blx	r3
	spi_init();
1000cc94:	4b03      	ldr	r3, [pc, #12]	; (1000cca4 <peripherals_init+0x18>)
1000cc96:	4798      	blx	r3
}
1000cc98:	46c0      	nop			; (mov r8, r8)
1000cc9a:	46bd      	mov	sp, r7
1000cc9c:	bd80      	pop	{r7, pc}
1000cc9e:	46c0      	nop			; (mov r8, r8)
1000cca0:	1000cbc9 	.word	0x1000cbc9
1000cca4:	1000cbf9 	.word	0x1000cbf9

1000cca8 <sensors_init>:

void sensors_init()
{
1000cca8:	b580      	push	{r7, lr}
1000ccaa:	af00      	add	r7, sp, #0
	MS5837_init();
1000ccac:	4b02      	ldr	r3, [pc, #8]	; (1000ccb8 <sensors_init+0x10>)
1000ccae:	4798      	blx	r3
#ifdef LSM303_ENABLE
	LSM303_init();
#endif
}
1000ccb0:	46c0      	nop			; (mov r8, r8)
1000ccb2:	46bd      	mov	sp, r7
1000ccb4:	bd80      	pop	{r7, pc}
1000ccb6:	46c0      	nop			; (mov r8, r8)
1000ccb8:	1000cffd 	.word	0x1000cffd

1000ccbc <screen_init>:

void screen_init()
{
1000ccbc:	b580      	push	{r7, lr}
1000ccbe:	af00      	add	r7, sp, #0
	initR(INITR_144GREENTAB);
1000ccc0:	2001      	movs	r0, #1
1000ccc2:	4b04      	ldr	r3, [pc, #16]	; (1000ccd4 <screen_init+0x18>)
1000ccc4:	4798      	blx	r3
	fillScreen(ST7735_BLACK);
1000ccc6:	2000      	movs	r0, #0
1000ccc8:	4b03      	ldr	r3, [pc, #12]	; (1000ccd8 <screen_init+0x1c>)
1000ccca:	4798      	blx	r3
}
1000cccc:	46c0      	nop			; (mov r8, r8)
1000ccce:	46bd      	mov	sp, r7
1000ccd0:	bd80      	pop	{r7, pc}
1000ccd2:	46c0      	nop			; (mov r8, r8)
1000ccd4:	100091b1 	.word	0x100091b1
1000ccd8:	1000843d 	.word	0x1000843d

1000ccdc <pressure_to_depth>:

float_t pressure_to_depth(int32_t pressure_hpa)
{
1000ccdc:	b590      	push	{r4, r7, lr}
1000ccde:	b085      	sub	sp, #20
1000cce0:	af00      	add	r7, sp, #0
1000cce2:	6078      	str	r0, [r7, #4]
	//Return depth in meters
	float_t depth = (pressure_hpa - 100000) / 1030 / 9.81;
1000cce4:	687b      	ldr	r3, [r7, #4]
1000cce6:	4a0f      	ldr	r2, [pc, #60]	; (1000cd24 <pressure_to_depth+0x48>)
1000cce8:	189a      	adds	r2, r3, r2
1000ccea:	4b0f      	ldr	r3, [pc, #60]	; (1000cd28 <pressure_to_depth+0x4c>)
1000ccec:	490f      	ldr	r1, [pc, #60]	; (1000cd2c <pressure_to_depth+0x50>)
1000ccee:	0010      	movs	r0, r2
1000ccf0:	4798      	blx	r3
1000ccf2:	0003      	movs	r3, r0
1000ccf4:	001a      	movs	r2, r3
1000ccf6:	4b0e      	ldr	r3, [pc, #56]	; (1000cd30 <pressure_to_depth+0x54>)
1000ccf8:	0010      	movs	r0, r2
1000ccfa:	4798      	blx	r3
1000ccfc:	4c0d      	ldr	r4, [pc, #52]	; (1000cd34 <pressure_to_depth+0x58>)
1000ccfe:	4a0e      	ldr	r2, [pc, #56]	; (1000cd38 <pressure_to_depth+0x5c>)
1000cd00:	4b0e      	ldr	r3, [pc, #56]	; (1000cd3c <pressure_to_depth+0x60>)
1000cd02:	47a0      	blx	r4
1000cd04:	0003      	movs	r3, r0
1000cd06:	000c      	movs	r4, r1
1000cd08:	0019      	movs	r1, r3
1000cd0a:	0022      	movs	r2, r4
1000cd0c:	4b0c      	ldr	r3, [pc, #48]	; (1000cd40 <pressure_to_depth+0x64>)
1000cd0e:	0008      	movs	r0, r1
1000cd10:	0011      	movs	r1, r2
1000cd12:	4798      	blx	r3
1000cd14:	1c03      	adds	r3, r0, #0
1000cd16:	60fb      	str	r3, [r7, #12]
	
	return depth;
1000cd18:	68fb      	ldr	r3, [r7, #12]
}
1000cd1a:	1c18      	adds	r0, r3, #0
1000cd1c:	46bd      	mov	sp, r7
1000cd1e:	b005      	add	sp, #20
1000cd20:	bd90      	pop	{r4, r7, pc}
1000cd22:	46c0      	nop			; (mov r8, r8)
1000cd24:	fffe7960 	.word	0xfffe7960
1000cd28:	1000d789 	.word	0x1000d789
1000cd2c:	00000406 	.word	0x00000406
1000cd30:	1000ec75 	.word	0x1000ec75
1000cd34:	1000e40d 	.word	0x1000e40d
1000cd38:	51eb851f 	.word	0x51eb851f
1000cd3c:	40239eb8 	.word	0x40239eb8
1000cd40:	1000ed9d 	.word	0x1000ed9d

1000cd44 <dive_computer_init>:

void dive_computer_init()
{
1000cd44:	b580      	push	{r7, lr}
1000cd46:	af00      	add	r7, sp, #0
	peripherals_init();
1000cd48:	4b06      	ldr	r3, [pc, #24]	; (1000cd64 <dive_computer_init+0x20>)
1000cd4a:	4798      	blx	r3
	sensors_init();
1000cd4c:	4b06      	ldr	r3, [pc, #24]	; (1000cd68 <dive_computer_init+0x24>)
1000cd4e:	4798      	blx	r3
	screen_init();
1000cd50:	4b06      	ldr	r3, [pc, #24]	; (1000cd6c <dive_computer_init+0x28>)
1000cd52:	4798      	blx	r3
	init_logger();
1000cd54:	4b06      	ldr	r3, [pc, #24]	; (1000cd70 <dive_computer_init+0x2c>)
1000cd56:	4798      	blx	r3
	//log_erase();
	//init_logger();
	TIMER_0_example(); //TODO: Rename
1000cd58:	4b06      	ldr	r3, [pc, #24]	; (1000cd74 <dive_computer_init+0x30>)
1000cd5a:	4798      	blx	r3
}
1000cd5c:	46c0      	nop			; (mov r8, r8)
1000cd5e:	46bd      	mov	sp, r7
1000cd60:	bd80      	pop	{r7, pc}
1000cd62:	46c0      	nop			; (mov r8, r8)
1000cd64:	1000cc8d 	.word	0x1000cc8d
1000cd68:	1000cca9 	.word	0x1000cca9
1000cd6c:	1000ccbd 	.word	0x1000ccbd
1000cd70:	1000b749 	.word	0x1000b749
1000cd74:	1000cc49 	.word	0x1000cc49

1000cd78 <run_dive_computer>:
	return ticks; //Ticks is the time in seconds
}

//Dive computer program entry
void run_dive_computer()
{
1000cd78:	b590      	push	{r4, r7, lr}
1000cd7a:	b09d      	sub	sp, #116	; 0x74
1000cd7c:	af02      	add	r7, sp, #8
	dive_computer_init();
1000cd7e:	4b7d      	ldr	r3, [pc, #500]	; (1000cf74 <run_dive_computer+0x1fc>)
1000cd80:	4798      	blx	r3
	uint32_t cycles = 0;
1000cd82:	2300      	movs	r3, #0
1000cd84:	643b      	str	r3, [r7, #64]	; 0x40
	timer_get_clock_cycles_in_tick(&TIMER_0, &cycles);
1000cd86:	2340      	movs	r3, #64	; 0x40
1000cd88:	18fa      	adds	r2, r7, r3
1000cd8a:	4b7b      	ldr	r3, [pc, #492]	; (1000cf78 <run_dive_computer+0x200>)
1000cd8c:	0011      	movs	r1, r2
1000cd8e:	0018      	movs	r0, r3
1000cd90:	4b7a      	ldr	r3, [pc, #488]	; (1000cf7c <run_dive_computer+0x204>)
1000cd92:	4798      	blx	r3
	
	LSM303STATUS status = FAILURE;
1000cd94:	235f      	movs	r3, #95	; 0x5f
1000cd96:	18fb      	adds	r3, r7, r3
1000cd98:	2201      	movs	r2, #1
1000cd9a:	701a      	strb	r2, [r3, #0]
	vector_type acceleration_vector = {0, 0, 0};
1000cd9c:	2338      	movs	r3, #56	; 0x38
1000cd9e:	18fb      	adds	r3, r7, r3
1000cda0:	2200      	movs	r2, #0
1000cda2:	801a      	strh	r2, [r3, #0]
1000cda4:	2338      	movs	r3, #56	; 0x38
1000cda6:	18fb      	adds	r3, r7, r3
1000cda8:	2200      	movs	r2, #0
1000cdaa:	805a      	strh	r2, [r3, #2]
1000cdac:	2338      	movs	r3, #56	; 0x38
1000cdae:	18fb      	adds	r3, r7, r3
1000cdb0:	2200      	movs	r2, #0
1000cdb2:	809a      	strh	r2, [r3, #4]
	vector_type	magnetometer_vector = {0, 0, 0};
1000cdb4:	2330      	movs	r3, #48	; 0x30
1000cdb6:	18fb      	adds	r3, r7, r3
1000cdb8:	2200      	movs	r2, #0
1000cdba:	801a      	strh	r2, [r3, #0]
1000cdbc:	2330      	movs	r3, #48	; 0x30
1000cdbe:	18fb      	adds	r3, r7, r3
1000cdc0:	2200      	movs	r2, #0
1000cdc2:	805a      	strh	r2, [r3, #2]
1000cdc4:	2330      	movs	r3, #48	; 0x30
1000cdc6:	18fb      	adds	r3, r7, r3
1000cdc8:	2200      	movs	r2, #0
1000cdca:	809a      	strh	r2, [r3, #4]
	double heading = 0;
1000cdcc:	2300      	movs	r3, #0
1000cdce:	2400      	movs	r4, #0
1000cdd0:	653b      	str	r3, [r7, #80]	; 0x50
1000cdd2:	657c      	str	r4, [r7, #84]	; 0x54

	MS5837_measurements temp_pressure = {0, 0};
1000cdd4:	2328      	movs	r3, #40	; 0x28
1000cdd6:	18fb      	adds	r3, r7, r3
1000cdd8:	2200      	movs	r2, #0
1000cdda:	601a      	str	r2, [r3, #0]
1000cddc:	2328      	movs	r3, #40	; 0x28
1000cdde:	18fb      	adds	r3, r7, r3
1000cde0:	2200      	movs	r2, #0
1000cde2:	605a      	str	r2, [r3, #4]
	float_t depth = 0;
1000cde4:	2300      	movs	r3, #0
1000cde6:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool dive_in_progress = false;
1000cde8:	2367      	movs	r3, #103	; 0x67
1000cdea:	18fb      	adds	r3, r7, r3
1000cdec:	2200      	movs	r2, #0
1000cdee:	701a      	strb	r2, [r3, #0]

	struct time dive_time = {0, 0};
1000cdf0:	2324      	movs	r3, #36	; 0x24
1000cdf2:	18fb      	adds	r3, r7, r3
1000cdf4:	2200      	movs	r2, #0
1000cdf6:	701a      	strb	r2, [r3, #0]
1000cdf8:	2324      	movs	r3, #36	; 0x24
1000cdfa:	18fb      	adds	r3, r7, r3
1000cdfc:	2200      	movs	r2, #0
1000cdfe:	705a      	strb	r2, [r3, #1]
	uint8_t dive_id = get_last_dive_id();
1000ce00:	4b5f      	ldr	r3, [pc, #380]	; (1000cf80 <run_dive_computer+0x208>)
1000ce02:	4798      	blx	r3
1000ce04:	0002      	movs	r2, r0
1000ce06:	2366      	movs	r3, #102	; 0x66
1000ce08:	18fb      	adds	r3, r7, r3
1000ce0a:	701a      	strb	r2, [r3, #0]
	uint32_t start_dive_timestamp = 0;
1000ce0c:	2300      	movs	r3, #0
1000ce0e:	663b      	str	r3, [r7, #96]	; 0x60

	ST7735_drawBitmap(0, 0, splashscreen, 128, 128, ST7735_WHITE);
1000ce10:	4a5c      	ldr	r2, [pc, #368]	; (1000cf84 <run_dive_computer+0x20c>)
1000ce12:	4b5d      	ldr	r3, [pc, #372]	; (1000cf88 <run_dive_computer+0x210>)
1000ce14:	9301      	str	r3, [sp, #4]
1000ce16:	2380      	movs	r3, #128	; 0x80
1000ce18:	9300      	str	r3, [sp, #0]
1000ce1a:	2380      	movs	r3, #128	; 0x80
1000ce1c:	2100      	movs	r1, #0
1000ce1e:	2000      	movs	r0, #0
1000ce20:	4c5a      	ldr	r4, [pc, #360]	; (1000cf8c <run_dive_computer+0x214>)
1000ce22:	47a0      	blx	r4
	delay(1000);
1000ce24:	23fa      	movs	r3, #250	; 0xfa
1000ce26:	009b      	lsls	r3, r3, #2
1000ce28:	0018      	movs	r0, r3
1000ce2a:	4b59      	ldr	r3, [pc, #356]	; (1000cf90 <run_dive_computer+0x218>)
1000ce2c:	4798      	blx	r3
	fastFillRect(0, 0, 128, 128, ST7735_BLACK);
1000ce2e:	2300      	movs	r3, #0
1000ce30:	9300      	str	r3, [sp, #0]
1000ce32:	2380      	movs	r3, #128	; 0x80
1000ce34:	2280      	movs	r2, #128	; 0x80
1000ce36:	2100      	movs	r1, #0
1000ce38:	2000      	movs	r0, #0
1000ce3a:	4c56      	ldr	r4, [pc, #344]	; (1000cf94 <run_dive_computer+0x21c>)
1000ce3c:	47a0      	blx	r4
    struct dive_record current_dive_record = {0, 0, 0, 0};
1000ce3e:	2314      	movs	r3, #20
1000ce40:	18fb      	adds	r3, r7, r3
1000ce42:	0018      	movs	r0, r3
1000ce44:	2310      	movs	r3, #16
1000ce46:	001a      	movs	r2, r3
1000ce48:	2100      	movs	r1, #0
1000ce4a:	4b53      	ldr	r3, [pc, #332]	; (1000cf98 <run_dive_computer+0x220>)
1000ce4c:	4798      	blx	r3
	uint8_t log_status = 0;
1000ce4e:	234b      	movs	r3, #75	; 0x4b
1000ce50:	18fb      	adds	r3, r7, r3
1000ce52:	2200      	movs	r2, #0
1000ce54:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		MS5857_get_measurements(ADC_4096, &temp_pressure);
1000ce56:	2328      	movs	r3, #40	; 0x28
1000ce58:	18fb      	adds	r3, r7, r3
1000ce5a:	0019      	movs	r1, r3
1000ce5c:	2008      	movs	r0, #8
1000ce5e:	4b4f      	ldr	r3, [pc, #316]	; (1000cf9c <run_dive_computer+0x224>)
1000ce60:	4798      	blx	r3
		depth = pressure_to_depth(temp_pressure.pressure * 10);
1000ce62:	2328      	movs	r3, #40	; 0x28
1000ce64:	18fb      	adds	r3, r7, r3
1000ce66:	685a      	ldr	r2, [r3, #4]
1000ce68:	0013      	movs	r3, r2
1000ce6a:	009b      	lsls	r3, r3, #2
1000ce6c:	189b      	adds	r3, r3, r2
1000ce6e:	005b      	lsls	r3, r3, #1
1000ce70:	0018      	movs	r0, r3
1000ce72:	4b4b      	ldr	r3, [pc, #300]	; (1000cfa0 <run_dive_computer+0x228>)
1000ce74:	4798      	blx	r3
1000ce76:	1c03      	adds	r3, r0, #0
1000ce78:	64fb      	str	r3, [r7, #76]	; 0x4c
		
		if(depth > DIVE_START_DEPTH)
1000ce7a:	4b4a      	ldr	r3, [pc, #296]	; (1000cfa4 <run_dive_computer+0x22c>)
1000ce7c:	21fe      	movs	r1, #254	; 0xfe
1000ce7e:	0589      	lsls	r1, r1, #22
1000ce80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000ce82:	4798      	blx	r3
1000ce84:	1e03      	subs	r3, r0, #0
1000ce86:	d016      	beq.n	1000ceb6 <run_dive_computer+0x13e>
		{
			if(!dive_in_progress)
1000ce88:	2367      	movs	r3, #103	; 0x67
1000ce8a:	18fb      	adds	r3, r7, r3
1000ce8c:	781b      	ldrb	r3, [r3, #0]
1000ce8e:	2201      	movs	r2, #1
1000ce90:	4053      	eors	r3, r2
1000ce92:	b2db      	uxtb	r3, r3
1000ce94:	2b00      	cmp	r3, #0
1000ce96:	d009      	beq.n	1000ceac <run_dive_computer+0x134>
			{
				//New dive
				dive_id++;
1000ce98:	2366      	movs	r3, #102	; 0x66
1000ce9a:	18fb      	adds	r3, r7, r3
1000ce9c:	781a      	ldrb	r2, [r3, #0]
1000ce9e:	2366      	movs	r3, #102	; 0x66
1000cea0:	18fb      	adds	r3, r7, r3
1000cea2:	3201      	adds	r2, #1
1000cea4:	701a      	strb	r2, [r3, #0]
				start_dive_timestamp = ticks;
1000cea6:	4b40      	ldr	r3, [pc, #256]	; (1000cfa8 <run_dive_computer+0x230>)
1000cea8:	681b      	ldr	r3, [r3, #0]
1000ceaa:	663b      	str	r3, [r7, #96]	; 0x60
			}
			dive_in_progress = true;
1000ceac:	2367      	movs	r3, #103	; 0x67
1000ceae:	18fb      	adds	r3, r7, r3
1000ceb0:	2201      	movs	r2, #1
1000ceb2:	701a      	strb	r2, [r3, #0]
1000ceb4:	e00c      	b.n	1000ced0 <run_dive_computer+0x158>
		}
		else if (depth < DIVE_END_DEPTH)
1000ceb6:	4b3d      	ldr	r3, [pc, #244]	; (1000cfac <run_dive_computer+0x234>)
1000ceb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
1000ceba:	4798      	blx	r3
1000cebc:	4c3c      	ldr	r4, [pc, #240]	; (1000cfb0 <run_dive_computer+0x238>)
1000cebe:	4a3d      	ldr	r2, [pc, #244]	; (1000cfb4 <run_dive_computer+0x23c>)
1000cec0:	4b3d      	ldr	r3, [pc, #244]	; (1000cfb8 <run_dive_computer+0x240>)
1000cec2:	47a0      	blx	r4
1000cec4:	1e03      	subs	r3, r0, #0
1000cec6:	d003      	beq.n	1000ced0 <run_dive_computer+0x158>
		{
			dive_in_progress = false;
1000cec8:	2367      	movs	r3, #103	; 0x67
1000ceca:	18fb      	adds	r3, r7, r3
1000cecc:	2200      	movs	r2, #0
1000cece:	701a      	strb	r2, [r3, #0]
		}
		
		if(dive_in_progress)
1000ced0:	2367      	movs	r3, #103	; 0x67
1000ced2:	18fb      	adds	r3, r7, r3
1000ced4:	781b      	ldrb	r3, [r3, #0]
1000ced6:	2b00      	cmp	r3, #0
1000ced8:	d037      	beq.n	1000cf4a <run_dive_computer+0x1d2>
		{
			uint32_t current_dive_timestamp = ticks - start_dive_timestamp;
1000ceda:	4b33      	ldr	r3, [pc, #204]	; (1000cfa8 <run_dive_computer+0x230>)
1000cedc:	681a      	ldr	r2, [r3, #0]
1000cede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
1000cee0:	1ad3      	subs	r3, r2, r3
1000cee2:	647b      	str	r3, [r7, #68]	; 0x44
			dive_time.minute = current_dive_timestamp / 60;
1000cee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000cee6:	4b35      	ldr	r3, [pc, #212]	; (1000cfbc <run_dive_computer+0x244>)
1000cee8:	213c      	movs	r1, #60	; 0x3c
1000ceea:	0010      	movs	r0, r2
1000ceec:	4798      	blx	r3
1000ceee:	0003      	movs	r3, r0
1000cef0:	b2da      	uxtb	r2, r3
1000cef2:	2324      	movs	r3, #36	; 0x24
1000cef4:	18fb      	adds	r3, r7, r3
1000cef6:	701a      	strb	r2, [r3, #0]
			dive_time.second = current_dive_timestamp % 60;
1000cef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000cefa:	4b31      	ldr	r3, [pc, #196]	; (1000cfc0 <run_dive_computer+0x248>)
1000cefc:	213c      	movs	r1, #60	; 0x3c
1000cefe:	0010      	movs	r0, r2
1000cf00:	4798      	blx	r3
1000cf02:	000b      	movs	r3, r1
1000cf04:	b2da      	uxtb	r2, r3
1000cf06:	2324      	movs	r3, #36	; 0x24
1000cf08:	18fb      	adds	r3, r7, r3
1000cf0a:	705a      	strb	r2, [r3, #1]
			
			current_dive_record.dive_id = dive_id;
1000cf0c:	2314      	movs	r3, #20
1000cf0e:	18fb      	adds	r3, r7, r3
1000cf10:	2266      	movs	r2, #102	; 0x66
1000cf12:	18ba      	adds	r2, r7, r2
1000cf14:	7812      	ldrb	r2, [r2, #0]
1000cf16:	701a      	strb	r2, [r3, #0]
			current_dive_record.timestamp = current_dive_timestamp;
1000cf18:	2314      	movs	r3, #20
1000cf1a:	18fb      	adds	r3, r7, r3
1000cf1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
1000cf1e:	605a      	str	r2, [r3, #4]
			current_dive_record.temperature = temp_pressure.temperature;
1000cf20:	2328      	movs	r3, #40	; 0x28
1000cf22:	18fb      	adds	r3, r7, r3
1000cf24:	681a      	ldr	r2, [r3, #0]
1000cf26:	2314      	movs	r3, #20
1000cf28:	18fb      	adds	r3, r7, r3
1000cf2a:	609a      	str	r2, [r3, #8]
			current_dive_record.pressure = temp_pressure.pressure;
1000cf2c:	2328      	movs	r3, #40	; 0x28
1000cf2e:	18fb      	adds	r3, r7, r3
1000cf30:	685a      	ldr	r2, [r3, #4]
1000cf32:	2314      	movs	r3, #20
1000cf34:	18fb      	adds	r3, r7, r3
1000cf36:	60da      	str	r2, [r3, #12]
			log_status = log_dive_record(&current_dive_record);
1000cf38:	234b      	movs	r3, #75	; 0x4b
1000cf3a:	18fc      	adds	r4, r7, r3
1000cf3c:	2314      	movs	r3, #20
1000cf3e:	18fb      	adds	r3, r7, r3
1000cf40:	0018      	movs	r0, r3
1000cf42:	4b20      	ldr	r3, [pc, #128]	; (1000cfc4 <run_dive_computer+0x24c>)
1000cf44:	4798      	blx	r3
1000cf46:	0003      	movs	r3, r0
1000cf48:	7023      	strb	r3, [r4, #0]
		read_magnetometer(&magnetometer_vector);
		heading = atan2(magnetometer_vector.y, magnetometer_vector.x) * 180 / M_PI;
	#endif
	
		display_data_t display_data;
		display_data.dive_time = &dive_time;
1000cf4a:	003b      	movs	r3, r7
1000cf4c:	2224      	movs	r2, #36	; 0x24
1000cf4e:	18ba      	adds	r2, r7, r2
1000cf50:	601a      	str	r2, [r3, #0]
		display_data.temp_pressure = &temp_pressure;
1000cf52:	003b      	movs	r3, r7
1000cf54:	2228      	movs	r2, #40	; 0x28
1000cf56:	18ba      	adds	r2, r7, r2
1000cf58:	609a      	str	r2, [r3, #8]
		display_data.depth = depth;
1000cf5a:	003b      	movs	r3, r7
1000cf5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
1000cf5e:	60da      	str	r2, [r3, #12]
		display_data.dive_id = dive_id;
1000cf60:	003b      	movs	r3, r7
1000cf62:	2266      	movs	r2, #102	; 0x66
1000cf64:	18ba      	adds	r2, r7, r2
1000cf66:	7812      	ldrb	r2, [r2, #0]
1000cf68:	741a      	strb	r2, [r3, #16]
		update_display(&display_data);
1000cf6a:	003b      	movs	r3, r7
1000cf6c:	0018      	movs	r0, r3
1000cf6e:	4b16      	ldr	r3, [pc, #88]	; (1000cfc8 <run_dive_computer+0x250>)
1000cf70:	4798      	blx	r3
	{
1000cf72:	e770      	b.n	1000ce56 <run_dive_computer+0xde>
1000cf74:	1000cd45 	.word	0x1000cd45
1000cf78:	10011284 	.word	0x10011284
1000cf7c:	1000a405 	.word	0x1000a405
1000cf80:	1000b7d5 	.word	0x1000b7d5
1000cf84:	100102b4 	.word	0x100102b4
1000cf88:	0000ffff 	.word	0x0000ffff
1000cf8c:	10008d69 	.word	0x10008d69
1000cf90:	1000d649 	.word	0x1000d649
1000cf94:	10008eb5 	.word	0x10008eb5
1000cf98:	1000ef75 	.word	0x1000ef75
1000cf9c:	1000d149 	.word	0x1000d149
1000cfa0:	1000ccdd 	.word	0x1000ccdd
1000cfa4:	1000da29 	.word	0x1000da29
1000cfa8:	10011130 	.word	0x10011130
1000cfac:	1000ecf9 	.word	0x1000ecf9
1000cfb0:	1000d98d 	.word	0x1000d98d
1000cfb4:	33333333 	.word	0x33333333
1000cfb8:	3fd33333 	.word	0x3fd33333
1000cfbc:	1000d675 	.word	0x1000d675
1000cfc0:	1000d781 	.word	0x1000d781
1000cfc4:	1000b805 	.word	0x1000b805
1000cfc8:	10008199 	.word	0x10008199

1000cfcc <main>:
	}
}

int main(void)
{	
1000cfcc:	b580      	push	{r7, lr}
1000cfce:	b082      	sub	sp, #8
1000cfd0:	af00      	add	r7, sp, #0
	//Maximum hack to unfuck SPI
	uint8_t* spi_module_enable = 0x40006018;
1000cfd2:	4b07      	ldr	r3, [pc, #28]	; (1000cff0 <main+0x24>)
1000cfd4:	607b      	str	r3, [r7, #4]
	*spi_module_enable = 0x00;
1000cfd6:	687b      	ldr	r3, [r7, #4]
1000cfd8:	2200      	movs	r2, #0
1000cfda:	701a      	strb	r2, [r3, #0]
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
1000cfdc:	4b05      	ldr	r3, [pc, #20]	; (1000cff4 <main+0x28>)
1000cfde:	4798      	blx	r3

	run_dive_computer();
1000cfe0:	4b05      	ldr	r3, [pc, #20]	; (1000cff8 <main+0x2c>)
1000cfe2:	4798      	blx	r3
1000cfe4:	2300      	movs	r3, #0
}
1000cfe6:	0018      	movs	r0, r3
1000cfe8:	46bd      	mov	sp, r7
1000cfea:	b002      	add	sp, #8
1000cfec:	bd80      	pop	{r7, pc}
1000cfee:	46c0      	nop			; (mov r8, r8)
1000cff0:	40006018 	.word	0x40006018
1000cff4:	100080d5 	.word	0x100080d5
1000cff8:	1000cd79 	.word	0x1000cd79

1000cffc <MS5837_init>:
int32_t _pressure_actual;

#define SET_SLAVE_ADDR() I2C_0.slave_addr = 0b1110110

uint8_t MS5837_init()
{
1000cffc:	b590      	push	{r4, r7, lr}
1000cffe:	b085      	sub	sp, #20
1000d000:	af00      	add	r7, sp, #0
	SET_SLAVE_ADDR();
1000d002:	4b21      	ldr	r3, [pc, #132]	; (1000d088 <MS5837_init+0x8c>)
1000d004:	2276      	movs	r2, #118	; 0x76
1000d006:	839a      	strh	r2, [r3, #28]
	uint32_t ret =  io_i2c->write(io_i2c, &reset_cmd, 1); //i2c_m_sync_write(&I2C_0, &reset_cmd, 1);
1000d008:	4b20      	ldr	r3, [pc, #128]	; (1000d08c <MS5837_init+0x90>)
1000d00a:	681b      	ldr	r3, [r3, #0]
1000d00c:	681c      	ldr	r4, [r3, #0]
1000d00e:	4b1f      	ldr	r3, [pc, #124]	; (1000d08c <MS5837_init+0x90>)
1000d010:	681b      	ldr	r3, [r3, #0]
1000d012:	491f      	ldr	r1, [pc, #124]	; (1000d090 <MS5837_init+0x94>)
1000d014:	2201      	movs	r2, #1
1000d016:	0018      	movs	r0, r3
1000d018:	47a0      	blx	r4
1000d01a:	0003      	movs	r3, r0
1000d01c:	60bb      	str	r3, [r7, #8]
	uint8_t buffer[2] = {0};
1000d01e:	1d3b      	adds	r3, r7, #4
1000d020:	2200      	movs	r2, #0
1000d022:	801a      	strh	r2, [r3, #0]
	
	//TODO: Load coefficients from PROM
	for(uint8_t i = 0; i < 7; i++)
1000d024:	230f      	movs	r3, #15
1000d026:	18fb      	adds	r3, r7, r3
1000d028:	2200      	movs	r2, #0
1000d02a:	701a      	strb	r2, [r3, #0]
1000d02c:	e022      	b.n	1000d074 <MS5837_init+0x78>
	{
		i2c_m_sync_cmd_read_multi(&I2C_0, PROM_CMD + (i * 2), buffer, 2); //TODO: check endianess here
1000d02e:	230f      	movs	r3, #15
1000d030:	18fb      	adds	r3, r7, r3
1000d032:	781b      	ldrb	r3, [r3, #0]
1000d034:	3350      	adds	r3, #80	; 0x50
1000d036:	b2db      	uxtb	r3, r3
1000d038:	18db      	adds	r3, r3, r3
1000d03a:	b2d9      	uxtb	r1, r3
1000d03c:	1d3a      	adds	r2, r7, #4
1000d03e:	4812      	ldr	r0, [pc, #72]	; (1000d088 <MS5837_init+0x8c>)
1000d040:	2302      	movs	r3, #2
1000d042:	4c14      	ldr	r4, [pc, #80]	; (1000d094 <MS5837_init+0x98>)
1000d044:	47a0      	blx	r4
		coefficient[i] = buffer[0] << 8 | buffer[1];
1000d046:	230f      	movs	r3, #15
1000d048:	18fb      	adds	r3, r7, r3
1000d04a:	781a      	ldrb	r2, [r3, #0]
1000d04c:	1d3b      	adds	r3, r7, #4
1000d04e:	781b      	ldrb	r3, [r3, #0]
1000d050:	021b      	lsls	r3, r3, #8
1000d052:	b219      	sxth	r1, r3
1000d054:	1d3b      	adds	r3, r7, #4
1000d056:	785b      	ldrb	r3, [r3, #1]
1000d058:	b21b      	sxth	r3, r3
1000d05a:	430b      	orrs	r3, r1
1000d05c:	b21b      	sxth	r3, r3
1000d05e:	b299      	uxth	r1, r3
1000d060:	4b0d      	ldr	r3, [pc, #52]	; (1000d098 <MS5837_init+0x9c>)
1000d062:	0052      	lsls	r2, r2, #1
1000d064:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 7; i++)
1000d066:	230f      	movs	r3, #15
1000d068:	18fb      	adds	r3, r7, r3
1000d06a:	781a      	ldrb	r2, [r3, #0]
1000d06c:	230f      	movs	r3, #15
1000d06e:	18fb      	adds	r3, r7, r3
1000d070:	3201      	adds	r2, #1
1000d072:	701a      	strb	r2, [r3, #0]
1000d074:	230f      	movs	r3, #15
1000d076:	18fb      	adds	r3, r7, r3
1000d078:	781b      	ldrb	r3, [r3, #0]
1000d07a:	2b06      	cmp	r3, #6
1000d07c:	d9d7      	bls.n	1000d02e <MS5837_init+0x32>
	}
	
	return 0;
1000d07e:	2300      	movs	r3, #0
}
1000d080:	0018      	movs	r0, r3
1000d082:	46bd      	mov	sp, r7
1000d084:	b005      	add	sp, #20
1000d086:	bd90      	pop	{r4, r7, pc}
1000d088:	10011264 	.word	0x10011264
1000d08c:	10018fa8 	.word	0x10018fa8
1000d090:	10010ab4 	.word	0x10010ab4
1000d094:	10009ec1 	.word	0x10009ec1
1000d098:	10018fc8 	.word	0x10018fc8

1000d09c <MS5837_get_adc_measurement>:

int32_t MS5837_get_adc_measurement(enum measurement _measurement, enum precision _precision)
{
1000d09c:	b590      	push	{r4, r7, lr}
1000d09e:	b087      	sub	sp, #28
1000d0a0:	af00      	add	r7, sp, #0
1000d0a2:	0002      	movs	r2, r0
1000d0a4:	1dfb      	adds	r3, r7, #7
1000d0a6:	701a      	strb	r2, [r3, #0]
1000d0a8:	1dbb      	adds	r3, r7, #6
1000d0aa:	1c0a      	adds	r2, r1, #0
1000d0ac:	701a      	strb	r2, [r3, #0]
	SET_SLAVE_ADDR();
1000d0ae:	4b22      	ldr	r3, [pc, #136]	; (1000d138 <MS5837_get_adc_measurement+0x9c>)
1000d0b0:	2276      	movs	r2, #118	; 0x76
1000d0b2:	839a      	strh	r2, [r3, #28]
	uint8_t reg = convert_cmd + _measurement + _precision;
1000d0b4:	2240      	movs	r2, #64	; 0x40
1000d0b6:	1dfb      	adds	r3, r7, #7
1000d0b8:	781b      	ldrb	r3, [r3, #0]
1000d0ba:	18d3      	adds	r3, r2, r3
1000d0bc:	b2da      	uxtb	r2, r3
1000d0be:	1dbb      	adds	r3, r7, #6
1000d0c0:	781b      	ldrb	r3, [r3, #0]
1000d0c2:	18d3      	adds	r3, r2, r3
1000d0c4:	b2da      	uxtb	r2, r3
1000d0c6:	230f      	movs	r3, #15
1000d0c8:	18fb      	adds	r3, r7, r3
1000d0ca:	701a      	strb	r2, [r3, #0]
	uint32_t ret = io_i2c->write(io_i2c, &reg, 1);
1000d0cc:	4b1b      	ldr	r3, [pc, #108]	; (1000d13c <MS5837_get_adc_measurement+0xa0>)
1000d0ce:	681b      	ldr	r3, [r3, #0]
1000d0d0:	681c      	ldr	r4, [r3, #0]
1000d0d2:	4b1a      	ldr	r3, [pc, #104]	; (1000d13c <MS5837_get_adc_measurement+0xa0>)
1000d0d4:	681b      	ldr	r3, [r3, #0]
1000d0d6:	220f      	movs	r2, #15
1000d0d8:	18b9      	adds	r1, r7, r2
1000d0da:	2201      	movs	r2, #1
1000d0dc:	0018      	movs	r0, r3
1000d0de:	47a0      	blx	r4
1000d0e0:	0003      	movs	r3, r0
1000d0e2:	617b      	str	r3, [r7, #20]
	delay(10); //Maximum delay
1000d0e4:	200a      	movs	r0, #10
1000d0e6:	4b16      	ldr	r3, [pc, #88]	; (1000d140 <MS5837_get_adc_measurement+0xa4>)
1000d0e8:	4798      	blx	r3
	uint8_t buffer[3] = {0, 0, 0};
1000d0ea:	230c      	movs	r3, #12
1000d0ec:	18fb      	adds	r3, r7, r3
1000d0ee:	2200      	movs	r2, #0
1000d0f0:	701a      	strb	r2, [r3, #0]
1000d0f2:	230c      	movs	r3, #12
1000d0f4:	18fb      	adds	r3, r7, r3
1000d0f6:	2200      	movs	r2, #0
1000d0f8:	705a      	strb	r2, [r3, #1]
1000d0fa:	230c      	movs	r3, #12
1000d0fc:	18fb      	adds	r3, r7, r3
1000d0fe:	2200      	movs	r2, #0
1000d100:	709a      	strb	r2, [r3, #2]
	i2c_m_sync_cmd_read_multi(&I2C_0, 0x00, &buffer, 3);
1000d102:	230c      	movs	r3, #12
1000d104:	18fa      	adds	r2, r7, r3
1000d106:	480c      	ldr	r0, [pc, #48]	; (1000d138 <MS5837_get_adc_measurement+0x9c>)
1000d108:	2303      	movs	r3, #3
1000d10a:	2100      	movs	r1, #0
1000d10c:	4c0d      	ldr	r4, [pc, #52]	; (1000d144 <MS5837_get_adc_measurement+0xa8>)
1000d10e:	47a0      	blx	r4
	
	int32_t adc_measurement = ((uint32_t)buffer[0] << 16) + ((uint32_t)buffer[1] << 8) + buffer[2];
1000d110:	230c      	movs	r3, #12
1000d112:	18fb      	adds	r3, r7, r3
1000d114:	781b      	ldrb	r3, [r3, #0]
1000d116:	041a      	lsls	r2, r3, #16
1000d118:	230c      	movs	r3, #12
1000d11a:	18fb      	adds	r3, r7, r3
1000d11c:	785b      	ldrb	r3, [r3, #1]
1000d11e:	021b      	lsls	r3, r3, #8
1000d120:	18d3      	adds	r3, r2, r3
1000d122:	220c      	movs	r2, #12
1000d124:	18ba      	adds	r2, r7, r2
1000d126:	7892      	ldrb	r2, [r2, #2]
1000d128:	189b      	adds	r3, r3, r2
1000d12a:	613b      	str	r3, [r7, #16]
	return adc_measurement;
1000d12c:	693b      	ldr	r3, [r7, #16]
}
1000d12e:	0018      	movs	r0, r3
1000d130:	46bd      	mov	sp, r7
1000d132:	b007      	add	sp, #28
1000d134:	bd90      	pop	{r4, r7, pc}
1000d136:	46c0      	nop			; (mov r8, r8)
1000d138:	10011264 	.word	0x10011264
1000d13c:	10018fa8 	.word	0x10018fa8
1000d140:	1000d649 	.word	0x1000d649
1000d144:	10009ec1 	.word	0x10009ec1

1000d148 <MS5857_get_measurements>:

void MS5857_get_measurements(enum precision _precision, MS5837_measurements* measurements)
{
1000d148:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d14a:	b0c3      	sub	sp, #268	; 0x10c
1000d14c:	af00      	add	r7, sp, #0
1000d14e:	0003      	movs	r3, r0
1000d150:	22b8      	movs	r2, #184	; 0xb8
1000d152:	18ba      	adds	r2, r7, r2
1000d154:	6011      	str	r1, [r2, #0]
1000d156:	22bf      	movs	r2, #191	; 0xbf
1000d158:	18ba      	adds	r2, r7, r2
1000d15a:	7013      	strb	r3, [r2, #0]
	SET_SLAVE_ADDR();
1000d15c:	4a74      	ldr	r2, [pc, #464]	; (1000d330 <MS5857_get_measurements+0x1e8>)
1000d15e:	2376      	movs	r3, #118	; 0x76
1000d160:	8393      	strh	r3, [r2, #28]
	//Retrieve ADC result
	int32_t temperature_raw = MS5837_get_adc_measurement(TEMPERATURE, _precision);
1000d162:	23bf      	movs	r3, #191	; 0xbf
1000d164:	18fb      	adds	r3, r7, r3
1000d166:	781b      	ldrb	r3, [r3, #0]
1000d168:	0019      	movs	r1, r3
1000d16a:	2010      	movs	r0, #16
1000d16c:	4b71      	ldr	r3, [pc, #452]	; (1000d334 <MS5857_get_measurements+0x1ec>)
1000d16e:	4798      	blx	r3
1000d170:	0003      	movs	r3, r0
1000d172:	22ec      	movs	r2, #236	; 0xec
1000d174:	18ba      	adds	r2, r7, r2
1000d176:	6013      	str	r3, [r2, #0]
	int32_t pressure_raw = MS5837_get_adc_measurement(PRESSURE, _precision);
1000d178:	23bf      	movs	r3, #191	; 0xbf
1000d17a:	18fb      	adds	r3, r7, r3
1000d17c:	781b      	ldrb	r3, [r3, #0]
1000d17e:	0019      	movs	r1, r3
1000d180:	2000      	movs	r0, #0
1000d182:	4b6c      	ldr	r3, [pc, #432]	; (1000d334 <MS5857_get_measurements+0x1ec>)
1000d184:	4798      	blx	r3
1000d186:	0003      	movs	r3, r0
1000d188:	22e8      	movs	r2, #232	; 0xe8
1000d18a:	18ba      	adds	r2, r7, r2
1000d18c:	6013      	str	r3, [r2, #0]
	int32_t pressure_calc;
	
	int32_t dT;
	
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t) coefficient[5] << 8);
1000d18e:	4b6a      	ldr	r3, [pc, #424]	; (1000d338 <MS5857_get_measurements+0x1f0>)
1000d190:	895b      	ldrh	r3, [r3, #10]
1000d192:	021a      	lsls	r2, r3, #8
1000d194:	23ec      	movs	r3, #236	; 0xec
1000d196:	18fb      	adds	r3, r7, r3
1000d198:	681b      	ldr	r3, [r3, #0]
1000d19a:	1a9b      	subs	r3, r3, r2
1000d19c:	22e4      	movs	r2, #228	; 0xe4
1000d19e:	18ba      	adds	r2, r7, r2
1000d1a0:	6013      	str	r3, [r2, #0]
	temp_calc = (((int64_t)dT * coefficient[6]) >> 23) + 2000;
1000d1a2:	23e4      	movs	r3, #228	; 0xe4
1000d1a4:	18fb      	adds	r3, r7, r3
1000d1a6:	681b      	ldr	r3, [r3, #0]
1000d1a8:	2280      	movs	r2, #128	; 0x80
1000d1aa:	18ba      	adds	r2, r7, r2
1000d1ac:	6013      	str	r3, [r2, #0]
1000d1ae:	17db      	asrs	r3, r3, #31
1000d1b0:	2284      	movs	r2, #132	; 0x84
1000d1b2:	18ba      	adds	r2, r7, r2
1000d1b4:	6013      	str	r3, [r2, #0]
1000d1b6:	4b60      	ldr	r3, [pc, #384]	; (1000d338 <MS5857_get_measurements+0x1f0>)
1000d1b8:	899b      	ldrh	r3, [r3, #12]
1000d1ba:	67bb      	str	r3, [r7, #120]	; 0x78
1000d1bc:	2300      	movs	r3, #0
1000d1be:	67fb      	str	r3, [r7, #124]	; 0x7c
1000d1c0:	4c5e      	ldr	r4, [pc, #376]	; (1000d33c <MS5857_get_measurements+0x1f4>)
1000d1c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
1000d1c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
1000d1c6:	2180      	movs	r1, #128	; 0x80
1000d1c8:	1879      	adds	r1, r7, r1
1000d1ca:	6808      	ldr	r0, [r1, #0]
1000d1cc:	6849      	ldr	r1, [r1, #4]
1000d1ce:	47a0      	blx	r4
1000d1d0:	0003      	movs	r3, r0
1000d1d2:	000c      	movs	r4, r1
1000d1d4:	0262      	lsls	r2, r4, #9
1000d1d6:	0ddd      	lsrs	r5, r3, #23
1000d1d8:	4315      	orrs	r5, r2
1000d1da:	15e6      	asrs	r6, r4, #23
1000d1dc:	002b      	movs	r3, r5
1000d1de:	22fa      	movs	r2, #250	; 0xfa
1000d1e0:	00d2      	lsls	r2, r2, #3
1000d1e2:	4694      	mov	ip, r2
1000d1e4:	4463      	add	r3, ip
1000d1e6:	22e0      	movs	r2, #224	; 0xe0
1000d1e8:	18ba      	adds	r2, r7, r2
1000d1ea:	6013      	str	r3, [r2, #0]
	// TODO TESTING  _temperature_actual = temp_calc;
	
	//Now we have our first order Temperature, let's calculate the second order.
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000)
1000d1ec:	23e0      	movs	r3, #224	; 0xe0
1000d1ee:	18fb      	adds	r3, r7, r3
1000d1f0:	681a      	ldr	r2, [r3, #0]
1000d1f2:	4b53      	ldr	r3, [pc, #332]	; (1000d340 <MS5857_get_measurements+0x1f8>)
1000d1f4:	429a      	cmp	r2, r3
1000d1f6:	dd00      	ble.n	1000d1fa <MS5857_get_measurements+0xb2>
1000d1f8:	e0aa      	b.n	1000d350 <MS5857_get_measurements+0x208>
	// If temp_calc is below 20.0C
	{
		T2 = 3 * (((int64_t)dT * dT) >> 33);
1000d1fa:	23e4      	movs	r3, #228	; 0xe4
1000d1fc:	18fb      	adds	r3, r7, r3
1000d1fe:	681b      	ldr	r3, [r3, #0]
1000d200:	673b      	str	r3, [r7, #112]	; 0x70
1000d202:	17db      	asrs	r3, r3, #31
1000d204:	677b      	str	r3, [r7, #116]	; 0x74
1000d206:	23e4      	movs	r3, #228	; 0xe4
1000d208:	18fb      	adds	r3, r7, r3
1000d20a:	681b      	ldr	r3, [r3, #0]
1000d20c:	66bb      	str	r3, [r7, #104]	; 0x68
1000d20e:	17db      	asrs	r3, r3, #31
1000d210:	66fb      	str	r3, [r7, #108]	; 0x6c
1000d212:	4c4a      	ldr	r4, [pc, #296]	; (1000d33c <MS5857_get_measurements+0x1f4>)
1000d214:	6eba      	ldr	r2, [r7, #104]	; 0x68
1000d216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
1000d218:	6f38      	ldr	r0, [r7, #112]	; 0x70
1000d21a:	6f79      	ldr	r1, [r7, #116]	; 0x74
1000d21c:	47a0      	blx	r4
1000d21e:	0003      	movs	r3, r0
1000d220:	000c      	movs	r4, r1
1000d222:	1062      	asrs	r2, r4, #1
1000d224:	663a      	str	r2, [r7, #96]	; 0x60
1000d226:	17e3      	asrs	r3, r4, #31
1000d228:	667b      	str	r3, [r7, #100]	; 0x64
1000d22a:	6e39      	ldr	r1, [r7, #96]	; 0x60
1000d22c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
1000d22e:	000b      	movs	r3, r1
1000d230:	0014      	movs	r4, r2
1000d232:	18db      	adds	r3, r3, r3
1000d234:	4164      	adcs	r4, r4
1000d236:	185b      	adds	r3, r3, r1
1000d238:	4154      	adcs	r4, r2
1000d23a:	1c7a      	adds	r2, r7, #1
1000d23c:	32ff      	adds	r2, #255	; 0xff
1000d23e:	6013      	str	r3, [r2, #0]
1000d240:	6054      	str	r4, [r2, #4]
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
1000d242:	23e0      	movs	r3, #224	; 0xe0
1000d244:	18fb      	adds	r3, r7, r3
1000d246:	681b      	ldr	r3, [r3, #0]
1000d248:	4a3e      	ldr	r2, [pc, #248]	; (1000d344 <MS5857_get_measurements+0x1fc>)
1000d24a:	189a      	adds	r2, r3, r2
1000d24c:	23e0      	movs	r3, #224	; 0xe0
1000d24e:	18fb      	adds	r3, r7, r3
1000d250:	681b      	ldr	r3, [r3, #0]
1000d252:	493c      	ldr	r1, [pc, #240]	; (1000d344 <MS5857_get_measurements+0x1fc>)
1000d254:	468c      	mov	ip, r1
1000d256:	4463      	add	r3, ip
1000d258:	435a      	muls	r2, r3
1000d25a:	0013      	movs	r3, r2
1000d25c:	005b      	lsls	r3, r3, #1
1000d25e:	189b      	adds	r3, r3, r2
1000d260:	2b00      	cmp	r3, #0
1000d262:	da00      	bge.n	1000d266 <MS5857_get_measurements+0x11e>
1000d264:	3301      	adds	r3, #1
1000d266:	105b      	asrs	r3, r3, #1
1000d268:	22f8      	movs	r2, #248	; 0xf8
1000d26a:	18ba      	adds	r2, r7, r2
1000d26c:	6013      	str	r3, [r2, #0]
1000d26e:	17db      	asrs	r3, r3, #31
1000d270:	22fc      	movs	r2, #252	; 0xfc
1000d272:	18ba      	adds	r2, r7, r2
1000d274:	6013      	str	r3, [r2, #0]
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
1000d276:	23e0      	movs	r3, #224	; 0xe0
1000d278:	18fb      	adds	r3, r7, r3
1000d27a:	681b      	ldr	r3, [r3, #0]
1000d27c:	4a31      	ldr	r2, [pc, #196]	; (1000d344 <MS5857_get_measurements+0x1fc>)
1000d27e:	189a      	adds	r2, r3, r2
1000d280:	23e0      	movs	r3, #224	; 0xe0
1000d282:	18fb      	adds	r3, r7, r3
1000d284:	681b      	ldr	r3, [r3, #0]
1000d286:	492f      	ldr	r1, [pc, #188]	; (1000d344 <MS5857_get_measurements+0x1fc>)
1000d288:	468c      	mov	ip, r1
1000d28a:	4463      	add	r3, ip
1000d28c:	435a      	muls	r2, r3
1000d28e:	0013      	movs	r3, r2
1000d290:	009b      	lsls	r3, r3, #2
1000d292:	189b      	adds	r3, r3, r2
1000d294:	2b00      	cmp	r3, #0
1000d296:	da00      	bge.n	1000d29a <MS5857_get_measurements+0x152>
1000d298:	3307      	adds	r3, #7
1000d29a:	10db      	asrs	r3, r3, #3
1000d29c:	22f0      	movs	r2, #240	; 0xf0
1000d29e:	18ba      	adds	r2, r7, r2
1000d2a0:	6013      	str	r3, [r2, #0]
1000d2a2:	17db      	asrs	r3, r3, #31
1000d2a4:	22f4      	movs	r2, #244	; 0xf4
1000d2a6:	18ba      	adds	r2, r7, r2
1000d2a8:	6013      	str	r3, [r2, #0]
		
		if(temp_calc < -1500)
1000d2aa:	23e0      	movs	r3, #224	; 0xe0
1000d2ac:	18fb      	adds	r3, r7, r3
1000d2ae:	681a      	ldr	r2, [r3, #0]
1000d2b0:	4b25      	ldr	r3, [pc, #148]	; (1000d348 <MS5857_get_measurements+0x200>)
1000d2b2:	429a      	cmp	r2, r3
1000d2b4:	db00      	blt.n	1000d2b8 <MS5857_get_measurements+0x170>
1000d2b6:	e0aa      	b.n	1000d40e <MS5857_get_measurements+0x2c6>
		// If temp_calc is below -15.0C
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
1000d2b8:	23e0      	movs	r3, #224	; 0xe0
1000d2ba:	18fb      	adds	r3, r7, r3
1000d2bc:	681b      	ldr	r3, [r3, #0]
1000d2be:	4a23      	ldr	r2, [pc, #140]	; (1000d34c <MS5857_get_measurements+0x204>)
1000d2c0:	189a      	adds	r2, r3, r2
1000d2c2:	23e0      	movs	r3, #224	; 0xe0
1000d2c4:	18fb      	adds	r3, r7, r3
1000d2c6:	681b      	ldr	r3, [r3, #0]
1000d2c8:	4920      	ldr	r1, [pc, #128]	; (1000d34c <MS5857_get_measurements+0x204>)
1000d2ca:	468c      	mov	ip, r1
1000d2cc:	4463      	add	r3, ip
1000d2ce:	435a      	muls	r2, r3
1000d2d0:	0013      	movs	r3, r2
1000d2d2:	00db      	lsls	r3, r3, #3
1000d2d4:	1a9b      	subs	r3, r3, r2
1000d2d6:	65bb      	str	r3, [r7, #88]	; 0x58
1000d2d8:	17db      	asrs	r3, r3, #31
1000d2da:	65fb      	str	r3, [r7, #92]	; 0x5c
1000d2dc:	23f8      	movs	r3, #248	; 0xf8
1000d2de:	18fb      	adds	r3, r7, r3
1000d2e0:	685c      	ldr	r4, [r3, #4]
1000d2e2:	681b      	ldr	r3, [r3, #0]
1000d2e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
1000d2e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
1000d2e8:	185b      	adds	r3, r3, r1
1000d2ea:	4154      	adcs	r4, r2
1000d2ec:	22f8      	movs	r2, #248	; 0xf8
1000d2ee:	18ba      	adds	r2, r7, r2
1000d2f0:	6013      	str	r3, [r2, #0]
1000d2f2:	6054      	str	r4, [r2, #4]
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
1000d2f4:	23e0      	movs	r3, #224	; 0xe0
1000d2f6:	18fb      	adds	r3, r7, r3
1000d2f8:	681b      	ldr	r3, [r3, #0]
1000d2fa:	4a14      	ldr	r2, [pc, #80]	; (1000d34c <MS5857_get_measurements+0x204>)
1000d2fc:	189a      	adds	r2, r3, r2
1000d2fe:	23e0      	movs	r3, #224	; 0xe0
1000d300:	18fb      	adds	r3, r7, r3
1000d302:	681b      	ldr	r3, [r3, #0]
1000d304:	4911      	ldr	r1, [pc, #68]	; (1000d34c <MS5857_get_measurements+0x204>)
1000d306:	468c      	mov	ip, r1
1000d308:	4463      	add	r3, ip
1000d30a:	4353      	muls	r3, r2
1000d30c:	009b      	lsls	r3, r3, #2
1000d30e:	653b      	str	r3, [r7, #80]	; 0x50
1000d310:	17db      	asrs	r3, r3, #31
1000d312:	657b      	str	r3, [r7, #84]	; 0x54
1000d314:	23f0      	movs	r3, #240	; 0xf0
1000d316:	18fb      	adds	r3, r7, r3
1000d318:	685c      	ldr	r4, [r3, #4]
1000d31a:	681b      	ldr	r3, [r3, #0]
1000d31c:	6d39      	ldr	r1, [r7, #80]	; 0x50
1000d31e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
1000d320:	185b      	adds	r3, r3, r1
1000d322:	4154      	adcs	r4, r2
1000d324:	22f0      	movs	r2, #240	; 0xf0
1000d326:	18ba      	adds	r2, r7, r2
1000d328:	6013      	str	r3, [r2, #0]
1000d32a:	6054      	str	r4, [r2, #4]
1000d32c:	e06f      	b.n	1000d40e <MS5857_get_measurements+0x2c6>
1000d32e:	46c0      	nop			; (mov r8, r8)
1000d330:	10011264 	.word	0x10011264
1000d334:	1000d09d 	.word	0x1000d09d
1000d338:	10018fc8 	.word	0x10018fc8
1000d33c:	1000da91 	.word	0x1000da91
1000d340:	000007cf 	.word	0x000007cf
1000d344:	fffff830 	.word	0xfffff830
1000d348:	fffffa24 	.word	0xfffffa24
1000d34c:	000005dc 	.word	0x000005dc
		}
	}
	else
	// If temp_calc is above 20.0C
	{
		uint64_t two_power_thirty_seven = 137438953472;
1000d350:	2300      	movs	r3, #0
1000d352:	2420      	movs	r4, #32
1000d354:	22d8      	movs	r2, #216	; 0xd8
1000d356:	18ba      	adds	r2, r7, r2
1000d358:	6013      	str	r3, [r2, #0]
1000d35a:	6054      	str	r4, [r2, #4]
		T2 = 7 * ((uint64_t)dT * dT)/two_power_thirty_seven;
1000d35c:	23e4      	movs	r3, #228	; 0xe4
1000d35e:	18fb      	adds	r3, r7, r3
1000d360:	681b      	ldr	r3, [r3, #0]
1000d362:	64bb      	str	r3, [r7, #72]	; 0x48
1000d364:	17db      	asrs	r3, r3, #31
1000d366:	64fb      	str	r3, [r7, #76]	; 0x4c
1000d368:	23e4      	movs	r3, #228	; 0xe4
1000d36a:	18fb      	adds	r3, r7, r3
1000d36c:	681b      	ldr	r3, [r3, #0]
1000d36e:	643b      	str	r3, [r7, #64]	; 0x40
1000d370:	17db      	asrs	r3, r3, #31
1000d372:	647b      	str	r3, [r7, #68]	; 0x44
1000d374:	4cae      	ldr	r4, [pc, #696]	; (1000d630 <MS5857_get_measurements+0x4e8>)
1000d376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
1000d378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
1000d37a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
1000d37c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
1000d37e:	47a0      	blx	r4
1000d380:	0003      	movs	r3, r0
1000d382:	000c      	movs	r4, r1
1000d384:	0018      	movs	r0, r3
1000d386:	0021      	movs	r1, r4
1000d388:	0003      	movs	r3, r0
1000d38a:	000c      	movs	r4, r1
1000d38c:	0f5a      	lsrs	r2, r3, #29
1000d38e:	00e5      	lsls	r5, r4, #3
1000d390:	269c      	movs	r6, #156	; 0x9c
1000d392:	19be      	adds	r6, r7, r6
1000d394:	6035      	str	r5, [r6, #0]
1000d396:	259c      	movs	r5, #156	; 0x9c
1000d398:	197d      	adds	r5, r7, r5
1000d39a:	682d      	ldr	r5, [r5, #0]
1000d39c:	4315      	orrs	r5, r2
1000d39e:	229c      	movs	r2, #156	; 0x9c
1000d3a0:	18ba      	adds	r2, r7, r2
1000d3a2:	6015      	str	r5, [r2, #0]
1000d3a4:	00db      	lsls	r3, r3, #3
1000d3a6:	2298      	movs	r2, #152	; 0x98
1000d3a8:	18ba      	adds	r2, r7, r2
1000d3aa:	6013      	str	r3, [r2, #0]
1000d3ac:	2398      	movs	r3, #152	; 0x98
1000d3ae:	18fb      	adds	r3, r7, r3
1000d3b0:	685c      	ldr	r4, [r3, #4]
1000d3b2:	681b      	ldr	r3, [r3, #0]
1000d3b4:	1a1b      	subs	r3, r3, r0
1000d3b6:	418c      	sbcs	r4, r1
1000d3b8:	0018      	movs	r0, r3
1000d3ba:	0021      	movs	r1, r4
1000d3bc:	4c9d      	ldr	r4, [pc, #628]	; (1000d634 <MS5857_get_measurements+0x4ec>)
1000d3be:	23d8      	movs	r3, #216	; 0xd8
1000d3c0:	18fb      	adds	r3, r7, r3
1000d3c2:	681a      	ldr	r2, [r3, #0]
1000d3c4:	685b      	ldr	r3, [r3, #4]
1000d3c6:	47a0      	blx	r4
1000d3c8:	0003      	movs	r3, r0
1000d3ca:	000c      	movs	r4, r1
1000d3cc:	1c7a      	adds	r2, r7, #1
1000d3ce:	32ff      	adds	r2, #255	; 0xff
1000d3d0:	6013      	str	r3, [r2, #0]
1000d3d2:	6054      	str	r4, [r2, #4]
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
1000d3d4:	23e0      	movs	r3, #224	; 0xe0
1000d3d6:	18fb      	adds	r3, r7, r3
1000d3d8:	681b      	ldr	r3, [r3, #0]
1000d3da:	4a97      	ldr	r2, [pc, #604]	; (1000d638 <MS5857_get_measurements+0x4f0>)
1000d3dc:	189a      	adds	r2, r3, r2
1000d3de:	23e0      	movs	r3, #224	; 0xe0
1000d3e0:	18fb      	adds	r3, r7, r3
1000d3e2:	681b      	ldr	r3, [r3, #0]
1000d3e4:	4994      	ldr	r1, [pc, #592]	; (1000d638 <MS5857_get_measurements+0x4f0>)
1000d3e6:	468c      	mov	ip, r1
1000d3e8:	4463      	add	r3, ip
1000d3ea:	4353      	muls	r3, r2
1000d3ec:	2b00      	cmp	r3, #0
1000d3ee:	da00      	bge.n	1000d3f2 <MS5857_get_measurements+0x2aa>
1000d3f0:	330f      	adds	r3, #15
1000d3f2:	111b      	asrs	r3, r3, #4
1000d3f4:	22f8      	movs	r2, #248	; 0xf8
1000d3f6:	18ba      	adds	r2, r7, r2
1000d3f8:	6013      	str	r3, [r2, #0]
1000d3fa:	17db      	asrs	r3, r3, #31
1000d3fc:	22fc      	movs	r2, #252	; 0xfc
1000d3fe:	18ba      	adds	r2, r7, r2
1000d400:	6013      	str	r3, [r2, #0]
		SENS2 = 0;
1000d402:	2300      	movs	r3, #0
1000d404:	2400      	movs	r4, #0
1000d406:	22f0      	movs	r2, #240	; 0xf0
1000d408:	18ba      	adds	r2, r7, r2
1000d40a:	6013      	str	r3, [r2, #0]
1000d40c:	6054      	str	r4, [r2, #4]
	}
	
	// Now bring it all together to apply offsets
	OFF = ((int64_t)coefficient[2] << 16) + (((coefficient[4] * (int64_t)dT)) >> 7);
1000d40e:	4b8b      	ldr	r3, [pc, #556]	; (1000d63c <MS5857_get_measurements+0x4f4>)
1000d410:	889b      	ldrh	r3, [r3, #4]
1000d412:	63bb      	str	r3, [r7, #56]	; 0x38
1000d414:	2300      	movs	r3, #0
1000d416:	63fb      	str	r3, [r7, #60]	; 0x3c
1000d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1000d41a:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
1000d41c:	001a      	movs	r2, r3
1000d41e:	1412      	asrs	r2, r2, #16
1000d420:	637a      	str	r2, [r7, #52]	; 0x34
1000d422:	041b      	lsls	r3, r3, #16
1000d424:	633b      	str	r3, [r7, #48]	; 0x30
1000d426:	4b85      	ldr	r3, [pc, #532]	; (1000d63c <MS5857_get_measurements+0x4f4>)
1000d428:	891b      	ldrh	r3, [r3, #8]
1000d42a:	62bb      	str	r3, [r7, #40]	; 0x28
1000d42c:	2300      	movs	r3, #0
1000d42e:	62fb      	str	r3, [r7, #44]	; 0x2c
1000d430:	23e4      	movs	r3, #228	; 0xe4
1000d432:	18fb      	adds	r3, r7, r3
1000d434:	681b      	ldr	r3, [r3, #0]
1000d436:	623b      	str	r3, [r7, #32]
1000d438:	17db      	asrs	r3, r3, #31
1000d43a:	627b      	str	r3, [r7, #36]	; 0x24
1000d43c:	4c7c      	ldr	r4, [pc, #496]	; (1000d630 <MS5857_get_measurements+0x4e8>)
1000d43e:	6a3a      	ldr	r2, [r7, #32]
1000d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000d442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000d444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000d446:	47a0      	blx	r4
1000d448:	0003      	movs	r3, r0
1000d44a:	000c      	movs	r4, r1
1000d44c:	0662      	lsls	r2, r4, #25
1000d44e:	09d9      	lsrs	r1, r3, #7
1000d450:	20b0      	movs	r0, #176	; 0xb0
1000d452:	1838      	adds	r0, r7, r0
1000d454:	6001      	str	r1, [r0, #0]
1000d456:	21b0      	movs	r1, #176	; 0xb0
1000d458:	1879      	adds	r1, r7, r1
1000d45a:	6809      	ldr	r1, [r1, #0]
1000d45c:	4311      	orrs	r1, r2
1000d45e:	22b0      	movs	r2, #176	; 0xb0
1000d460:	18ba      	adds	r2, r7, r2
1000d462:	6011      	str	r1, [r2, #0]
1000d464:	11e3      	asrs	r3, r4, #7
1000d466:	22b4      	movs	r2, #180	; 0xb4
1000d468:	18ba      	adds	r2, r7, r2
1000d46a:	6013      	str	r3, [r2, #0]
1000d46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000d46e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
1000d470:	22b0      	movs	r2, #176	; 0xb0
1000d472:	18ba      	adds	r2, r7, r2
1000d474:	6811      	ldr	r1, [r2, #0]
1000d476:	6852      	ldr	r2, [r2, #4]
1000d478:	185b      	adds	r3, r3, r1
1000d47a:	4154      	adcs	r4, r2
1000d47c:	22d0      	movs	r2, #208	; 0xd0
1000d47e:	18ba      	adds	r2, r7, r2
1000d480:	6013      	str	r3, [r2, #0]
1000d482:	6054      	str	r4, [r2, #4]
	SENS = ((int64_t)coefficient[1] << 15) + (((coefficient[3] * (int64_t)dT)) >> 8);
1000d484:	4b6d      	ldr	r3, [pc, #436]	; (1000d63c <MS5857_get_measurements+0x4f4>)
1000d486:	885b      	ldrh	r3, [r3, #2]
1000d488:	61bb      	str	r3, [r7, #24]
1000d48a:	2300      	movs	r3, #0
1000d48c:	61fb      	str	r3, [r7, #28]
1000d48e:	69b9      	ldr	r1, [r7, #24]
1000d490:	69fa      	ldr	r2, [r7, #28]
1000d492:	000b      	movs	r3, r1
1000d494:	0c5b      	lsrs	r3, r3, #17
1000d496:	0010      	movs	r0, r2
1000d498:	03c0      	lsls	r0, r0, #15
1000d49a:	24ac      	movs	r4, #172	; 0xac
1000d49c:	193c      	adds	r4, r7, r4
1000d49e:	6020      	str	r0, [r4, #0]
1000d4a0:	20ac      	movs	r0, #172	; 0xac
1000d4a2:	1838      	adds	r0, r7, r0
1000d4a4:	6800      	ldr	r0, [r0, #0]
1000d4a6:	4318      	orrs	r0, r3
1000d4a8:	23ac      	movs	r3, #172	; 0xac
1000d4aa:	18fb      	adds	r3, r7, r3
1000d4ac:	6018      	str	r0, [r3, #0]
1000d4ae:	000b      	movs	r3, r1
1000d4b0:	03db      	lsls	r3, r3, #15
1000d4b2:	22a8      	movs	r2, #168	; 0xa8
1000d4b4:	18ba      	adds	r2, r7, r2
1000d4b6:	6013      	str	r3, [r2, #0]
1000d4b8:	4b60      	ldr	r3, [pc, #384]	; (1000d63c <MS5857_get_measurements+0x4f4>)
1000d4ba:	88db      	ldrh	r3, [r3, #6]
1000d4bc:	613b      	str	r3, [r7, #16]
1000d4be:	2300      	movs	r3, #0
1000d4c0:	617b      	str	r3, [r7, #20]
1000d4c2:	23e4      	movs	r3, #228	; 0xe4
1000d4c4:	18fb      	adds	r3, r7, r3
1000d4c6:	681b      	ldr	r3, [r3, #0]
1000d4c8:	60bb      	str	r3, [r7, #8]
1000d4ca:	17db      	asrs	r3, r3, #31
1000d4cc:	60fb      	str	r3, [r7, #12]
1000d4ce:	4c58      	ldr	r4, [pc, #352]	; (1000d630 <MS5857_get_measurements+0x4e8>)
1000d4d0:	68ba      	ldr	r2, [r7, #8]
1000d4d2:	68fb      	ldr	r3, [r7, #12]
1000d4d4:	6938      	ldr	r0, [r7, #16]
1000d4d6:	6979      	ldr	r1, [r7, #20]
1000d4d8:	47a0      	blx	r4
1000d4da:	0003      	movs	r3, r0
1000d4dc:	000c      	movs	r4, r1
1000d4de:	0622      	lsls	r2, r4, #24
1000d4e0:	0a19      	lsrs	r1, r3, #8
1000d4e2:	20a0      	movs	r0, #160	; 0xa0
1000d4e4:	1838      	adds	r0, r7, r0
1000d4e6:	6001      	str	r1, [r0, #0]
1000d4e8:	21a0      	movs	r1, #160	; 0xa0
1000d4ea:	1879      	adds	r1, r7, r1
1000d4ec:	6809      	ldr	r1, [r1, #0]
1000d4ee:	4311      	orrs	r1, r2
1000d4f0:	22a0      	movs	r2, #160	; 0xa0
1000d4f2:	18ba      	adds	r2, r7, r2
1000d4f4:	6011      	str	r1, [r2, #0]
1000d4f6:	1223      	asrs	r3, r4, #8
1000d4f8:	22a4      	movs	r2, #164	; 0xa4
1000d4fa:	18ba      	adds	r2, r7, r2
1000d4fc:	6013      	str	r3, [r2, #0]
1000d4fe:	23a8      	movs	r3, #168	; 0xa8
1000d500:	18fb      	adds	r3, r7, r3
1000d502:	685c      	ldr	r4, [r3, #4]
1000d504:	681b      	ldr	r3, [r3, #0]
1000d506:	22a0      	movs	r2, #160	; 0xa0
1000d508:	18ba      	adds	r2, r7, r2
1000d50a:	6811      	ldr	r1, [r2, #0]
1000d50c:	6852      	ldr	r2, [r2, #4]
1000d50e:	185b      	adds	r3, r3, r1
1000d510:	4154      	adcs	r4, r2
1000d512:	22c8      	movs	r2, #200	; 0xc8
1000d514:	18ba      	adds	r2, r7, r2
1000d516:	6013      	str	r3, [r2, #0]
1000d518:	6054      	str	r4, [r2, #4]
	temp_calc = temp_calc - T2;
1000d51a:	23e0      	movs	r3, #224	; 0xe0
1000d51c:	18fb      	adds	r3, r7, r3
1000d51e:	681a      	ldr	r2, [r3, #0]
1000d520:	1c7b      	adds	r3, r7, #1
1000d522:	33ff      	adds	r3, #255	; 0xff
1000d524:	681b      	ldr	r3, [r3, #0]
1000d526:	1ad3      	subs	r3, r2, r3
1000d528:	22e0      	movs	r2, #224	; 0xe0
1000d52a:	18ba      	adds	r2, r7, r2
1000d52c:	6013      	str	r3, [r2, #0]
	OFF = OFF - OFF2;
1000d52e:	23d0      	movs	r3, #208	; 0xd0
1000d530:	18fb      	adds	r3, r7, r3
1000d532:	6819      	ldr	r1, [r3, #0]
1000d534:	685a      	ldr	r2, [r3, #4]
1000d536:	23f8      	movs	r3, #248	; 0xf8
1000d538:	18fb      	adds	r3, r7, r3
1000d53a:	685c      	ldr	r4, [r3, #4]
1000d53c:	681b      	ldr	r3, [r3, #0]
1000d53e:	1ac9      	subs	r1, r1, r3
1000d540:	41a2      	sbcs	r2, r4
1000d542:	000b      	movs	r3, r1
1000d544:	0014      	movs	r4, r2
1000d546:	22d0      	movs	r2, #208	; 0xd0
1000d548:	18ba      	adds	r2, r7, r2
1000d54a:	6013      	str	r3, [r2, #0]
1000d54c:	6054      	str	r4, [r2, #4]
	SENS = SENS - SENS2;
1000d54e:	23c8      	movs	r3, #200	; 0xc8
1000d550:	18fb      	adds	r3, r7, r3
1000d552:	6819      	ldr	r1, [r3, #0]
1000d554:	685a      	ldr	r2, [r3, #4]
1000d556:	23f0      	movs	r3, #240	; 0xf0
1000d558:	18fb      	adds	r3, r7, r3
1000d55a:	685c      	ldr	r4, [r3, #4]
1000d55c:	681b      	ldr	r3, [r3, #0]
1000d55e:	1ac9      	subs	r1, r1, r3
1000d560:	41a2      	sbcs	r2, r4
1000d562:	000b      	movs	r3, r1
1000d564:	0014      	movs	r4, r2
1000d566:	22c8      	movs	r2, #200	; 0xc8
1000d568:	18ba      	adds	r2, r7, r2
1000d56a:	6013      	str	r3, [r2, #0]
1000d56c:	6054      	str	r4, [r2, #4]

	// Now lets calculate the pressure
	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 8192;
1000d56e:	23e8      	movs	r3, #232	; 0xe8
1000d570:	18fb      	adds	r3, r7, r3
1000d572:	681b      	ldr	r3, [r3, #0]
1000d574:	603b      	str	r3, [r7, #0]
1000d576:	17db      	asrs	r3, r3, #31
1000d578:	607b      	str	r3, [r7, #4]
1000d57a:	4c2d      	ldr	r4, [pc, #180]	; (1000d630 <MS5857_get_measurements+0x4e8>)
1000d57c:	23c8      	movs	r3, #200	; 0xc8
1000d57e:	18fb      	adds	r3, r7, r3
1000d580:	681a      	ldr	r2, [r3, #0]
1000d582:	685b      	ldr	r3, [r3, #4]
1000d584:	6838      	ldr	r0, [r7, #0]
1000d586:	6879      	ldr	r1, [r7, #4]
1000d588:	47a0      	blx	r4
1000d58a:	0003      	movs	r3, r0
1000d58c:	000c      	movs	r4, r1
1000d58e:	2c00      	cmp	r4, #0
1000d590:	da03      	bge.n	1000d59a <MS5857_get_measurements+0x452>
1000d592:	492b      	ldr	r1, [pc, #172]	; (1000d640 <MS5857_get_measurements+0x4f8>)
1000d594:	2200      	movs	r2, #0
1000d596:	185b      	adds	r3, r3, r1
1000d598:	4154      	adcs	r4, r2
1000d59a:	02e2      	lsls	r2, r4, #11
1000d59c:	0d59      	lsrs	r1, r3, #21
1000d59e:	2090      	movs	r0, #144	; 0x90
1000d5a0:	1838      	adds	r0, r7, r0
1000d5a2:	6001      	str	r1, [r0, #0]
1000d5a4:	2190      	movs	r1, #144	; 0x90
1000d5a6:	1879      	adds	r1, r7, r1
1000d5a8:	6809      	ldr	r1, [r1, #0]
1000d5aa:	4311      	orrs	r1, r2
1000d5ac:	2290      	movs	r2, #144	; 0x90
1000d5ae:	18ba      	adds	r2, r7, r2
1000d5b0:	6011      	str	r1, [r2, #0]
1000d5b2:	1563      	asrs	r3, r4, #21
1000d5b4:	2294      	movs	r2, #148	; 0x94
1000d5b6:	18ba      	adds	r2, r7, r2
1000d5b8:	6013      	str	r3, [r2, #0]
1000d5ba:	2390      	movs	r3, #144	; 0x90
1000d5bc:	18fb      	adds	r3, r7, r3
1000d5be:	6819      	ldr	r1, [r3, #0]
1000d5c0:	685a      	ldr	r2, [r3, #4]
1000d5c2:	23d0      	movs	r3, #208	; 0xd0
1000d5c4:	18fb      	adds	r3, r7, r3
1000d5c6:	685c      	ldr	r4, [r3, #4]
1000d5c8:	681b      	ldr	r3, [r3, #0]
1000d5ca:	1ac9      	subs	r1, r1, r3
1000d5cc:	41a2      	sbcs	r2, r4
1000d5ce:	000b      	movs	r3, r1
1000d5d0:	0014      	movs	r4, r2
1000d5d2:	2c00      	cmp	r4, #0
1000d5d4:	da03      	bge.n	1000d5de <MS5857_get_measurements+0x496>
1000d5d6:	491b      	ldr	r1, [pc, #108]	; (1000d644 <MS5857_get_measurements+0x4fc>)
1000d5d8:	2200      	movs	r2, #0
1000d5da:	185b      	adds	r3, r3, r1
1000d5dc:	4154      	adcs	r4, r2
1000d5de:	04e2      	lsls	r2, r4, #19
1000d5e0:	0b59      	lsrs	r1, r3, #13
1000d5e2:	2088      	movs	r0, #136	; 0x88
1000d5e4:	1838      	adds	r0, r7, r0
1000d5e6:	6001      	str	r1, [r0, #0]
1000d5e8:	2188      	movs	r1, #136	; 0x88
1000d5ea:	1879      	adds	r1, r7, r1
1000d5ec:	6809      	ldr	r1, [r1, #0]
1000d5ee:	4311      	orrs	r1, r2
1000d5f0:	2288      	movs	r2, #136	; 0x88
1000d5f2:	18ba      	adds	r2, r7, r2
1000d5f4:	6011      	str	r1, [r2, #0]
1000d5f6:	1363      	asrs	r3, r4, #13
1000d5f8:	228c      	movs	r2, #140	; 0x8c
1000d5fa:	18ba      	adds	r2, r7, r2
1000d5fc:	6013      	str	r3, [r2, #0]
1000d5fe:	2388      	movs	r3, #136	; 0x88
1000d600:	18fb      	adds	r3, r7, r3
1000d602:	685c      	ldr	r4, [r3, #4]
1000d604:	681b      	ldr	r3, [r3, #0]
1000d606:	22c4      	movs	r2, #196	; 0xc4
1000d608:	18ba      	adds	r2, r7, r2
1000d60a:	6013      	str	r3, [r2, #0]
	
	measurements->temperature = temp_calc;
1000d60c:	23b8      	movs	r3, #184	; 0xb8
1000d60e:	18fb      	adds	r3, r7, r3
1000d610:	681b      	ldr	r3, [r3, #0]
1000d612:	22e0      	movs	r2, #224	; 0xe0
1000d614:	18ba      	adds	r2, r7, r2
1000d616:	6812      	ldr	r2, [r2, #0]
1000d618:	601a      	str	r2, [r3, #0]
	measurements->pressure = pressure_calc;
1000d61a:	23b8      	movs	r3, #184	; 0xb8
1000d61c:	18fb      	adds	r3, r7, r3
1000d61e:	681b      	ldr	r3, [r3, #0]
1000d620:	22c4      	movs	r2, #196	; 0xc4
1000d622:	18ba      	adds	r2, r7, r2
1000d624:	6812      	ldr	r2, [r2, #0]
1000d626:	605a      	str	r2, [r3, #4]
1000d628:	46c0      	nop			; (mov r8, r8)
1000d62a:	46bd      	mov	sp, r7
1000d62c:	b043      	add	sp, #268	; 0x10c
1000d62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d630:	1000da91 	.word	0x1000da91
1000d634:	1000da51 	.word	0x1000da51
1000d638:	fffff830 	.word	0xfffff830
1000d63c:	10018fc8 	.word	0x10018fc8
1000d640:	001fffff 	.word	0x001fffff
1000d644:	00001fff 	.word	0x00001fff

1000d648 <delay>:
#include "utilities.h"

void delay(uint32_t duration_ms)
{
1000d648:	b580      	push	{r7, lr}
1000d64a:	b084      	sub	sp, #16
1000d64c:	af00      	add	r7, sp, #0
1000d64e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
1000d650:	2300      	movs	r3, #0
1000d652:	60fb      	str	r3, [r7, #12]
	while(i++ != 2500 * duration_ms);
1000d654:	46c0      	nop			; (mov r8, r8)
1000d656:	68fb      	ldr	r3, [r7, #12]
1000d658:	1c5a      	adds	r2, r3, #1
1000d65a:	60fa      	str	r2, [r7, #12]
1000d65c:	687a      	ldr	r2, [r7, #4]
1000d65e:	4904      	ldr	r1, [pc, #16]	; (1000d670 <delay+0x28>)
1000d660:	434a      	muls	r2, r1
1000d662:	4293      	cmp	r3, r2
1000d664:	d1f7      	bne.n	1000d656 <delay+0xe>
1000d666:	46c0      	nop			; (mov r8, r8)
1000d668:	46bd      	mov	sp, r7
1000d66a:	b004      	add	sp, #16
1000d66c:	bd80      	pop	{r7, pc}
1000d66e:	46c0      	nop			; (mov r8, r8)
1000d670:	000009c4 	.word	0x000009c4

1000d674 <__udivsi3>:
1000d674:	2200      	movs	r2, #0
1000d676:	0843      	lsrs	r3, r0, #1
1000d678:	428b      	cmp	r3, r1
1000d67a:	d374      	bcc.n	1000d766 <__udivsi3+0xf2>
1000d67c:	0903      	lsrs	r3, r0, #4
1000d67e:	428b      	cmp	r3, r1
1000d680:	d35f      	bcc.n	1000d742 <__udivsi3+0xce>
1000d682:	0a03      	lsrs	r3, r0, #8
1000d684:	428b      	cmp	r3, r1
1000d686:	d344      	bcc.n	1000d712 <__udivsi3+0x9e>
1000d688:	0b03      	lsrs	r3, r0, #12
1000d68a:	428b      	cmp	r3, r1
1000d68c:	d328      	bcc.n	1000d6e0 <__udivsi3+0x6c>
1000d68e:	0c03      	lsrs	r3, r0, #16
1000d690:	428b      	cmp	r3, r1
1000d692:	d30d      	bcc.n	1000d6b0 <__udivsi3+0x3c>
1000d694:	22ff      	movs	r2, #255	; 0xff
1000d696:	0209      	lsls	r1, r1, #8
1000d698:	ba12      	rev	r2, r2
1000d69a:	0c03      	lsrs	r3, r0, #16
1000d69c:	428b      	cmp	r3, r1
1000d69e:	d302      	bcc.n	1000d6a6 <__udivsi3+0x32>
1000d6a0:	1212      	asrs	r2, r2, #8
1000d6a2:	0209      	lsls	r1, r1, #8
1000d6a4:	d065      	beq.n	1000d772 <__udivsi3+0xfe>
1000d6a6:	0b03      	lsrs	r3, r0, #12
1000d6a8:	428b      	cmp	r3, r1
1000d6aa:	d319      	bcc.n	1000d6e0 <__udivsi3+0x6c>
1000d6ac:	e000      	b.n	1000d6b0 <__udivsi3+0x3c>
1000d6ae:	0a09      	lsrs	r1, r1, #8
1000d6b0:	0bc3      	lsrs	r3, r0, #15
1000d6b2:	428b      	cmp	r3, r1
1000d6b4:	d301      	bcc.n	1000d6ba <__udivsi3+0x46>
1000d6b6:	03cb      	lsls	r3, r1, #15
1000d6b8:	1ac0      	subs	r0, r0, r3
1000d6ba:	4152      	adcs	r2, r2
1000d6bc:	0b83      	lsrs	r3, r0, #14
1000d6be:	428b      	cmp	r3, r1
1000d6c0:	d301      	bcc.n	1000d6c6 <__udivsi3+0x52>
1000d6c2:	038b      	lsls	r3, r1, #14
1000d6c4:	1ac0      	subs	r0, r0, r3
1000d6c6:	4152      	adcs	r2, r2
1000d6c8:	0b43      	lsrs	r3, r0, #13
1000d6ca:	428b      	cmp	r3, r1
1000d6cc:	d301      	bcc.n	1000d6d2 <__udivsi3+0x5e>
1000d6ce:	034b      	lsls	r3, r1, #13
1000d6d0:	1ac0      	subs	r0, r0, r3
1000d6d2:	4152      	adcs	r2, r2
1000d6d4:	0b03      	lsrs	r3, r0, #12
1000d6d6:	428b      	cmp	r3, r1
1000d6d8:	d301      	bcc.n	1000d6de <__udivsi3+0x6a>
1000d6da:	030b      	lsls	r3, r1, #12
1000d6dc:	1ac0      	subs	r0, r0, r3
1000d6de:	4152      	adcs	r2, r2
1000d6e0:	0ac3      	lsrs	r3, r0, #11
1000d6e2:	428b      	cmp	r3, r1
1000d6e4:	d301      	bcc.n	1000d6ea <__udivsi3+0x76>
1000d6e6:	02cb      	lsls	r3, r1, #11
1000d6e8:	1ac0      	subs	r0, r0, r3
1000d6ea:	4152      	adcs	r2, r2
1000d6ec:	0a83      	lsrs	r3, r0, #10
1000d6ee:	428b      	cmp	r3, r1
1000d6f0:	d301      	bcc.n	1000d6f6 <__udivsi3+0x82>
1000d6f2:	028b      	lsls	r3, r1, #10
1000d6f4:	1ac0      	subs	r0, r0, r3
1000d6f6:	4152      	adcs	r2, r2
1000d6f8:	0a43      	lsrs	r3, r0, #9
1000d6fa:	428b      	cmp	r3, r1
1000d6fc:	d301      	bcc.n	1000d702 <__udivsi3+0x8e>
1000d6fe:	024b      	lsls	r3, r1, #9
1000d700:	1ac0      	subs	r0, r0, r3
1000d702:	4152      	adcs	r2, r2
1000d704:	0a03      	lsrs	r3, r0, #8
1000d706:	428b      	cmp	r3, r1
1000d708:	d301      	bcc.n	1000d70e <__udivsi3+0x9a>
1000d70a:	020b      	lsls	r3, r1, #8
1000d70c:	1ac0      	subs	r0, r0, r3
1000d70e:	4152      	adcs	r2, r2
1000d710:	d2cd      	bcs.n	1000d6ae <__udivsi3+0x3a>
1000d712:	09c3      	lsrs	r3, r0, #7
1000d714:	428b      	cmp	r3, r1
1000d716:	d301      	bcc.n	1000d71c <__udivsi3+0xa8>
1000d718:	01cb      	lsls	r3, r1, #7
1000d71a:	1ac0      	subs	r0, r0, r3
1000d71c:	4152      	adcs	r2, r2
1000d71e:	0983      	lsrs	r3, r0, #6
1000d720:	428b      	cmp	r3, r1
1000d722:	d301      	bcc.n	1000d728 <__udivsi3+0xb4>
1000d724:	018b      	lsls	r3, r1, #6
1000d726:	1ac0      	subs	r0, r0, r3
1000d728:	4152      	adcs	r2, r2
1000d72a:	0943      	lsrs	r3, r0, #5
1000d72c:	428b      	cmp	r3, r1
1000d72e:	d301      	bcc.n	1000d734 <__udivsi3+0xc0>
1000d730:	014b      	lsls	r3, r1, #5
1000d732:	1ac0      	subs	r0, r0, r3
1000d734:	4152      	adcs	r2, r2
1000d736:	0903      	lsrs	r3, r0, #4
1000d738:	428b      	cmp	r3, r1
1000d73a:	d301      	bcc.n	1000d740 <__udivsi3+0xcc>
1000d73c:	010b      	lsls	r3, r1, #4
1000d73e:	1ac0      	subs	r0, r0, r3
1000d740:	4152      	adcs	r2, r2
1000d742:	08c3      	lsrs	r3, r0, #3
1000d744:	428b      	cmp	r3, r1
1000d746:	d301      	bcc.n	1000d74c <__udivsi3+0xd8>
1000d748:	00cb      	lsls	r3, r1, #3
1000d74a:	1ac0      	subs	r0, r0, r3
1000d74c:	4152      	adcs	r2, r2
1000d74e:	0883      	lsrs	r3, r0, #2
1000d750:	428b      	cmp	r3, r1
1000d752:	d301      	bcc.n	1000d758 <__udivsi3+0xe4>
1000d754:	008b      	lsls	r3, r1, #2
1000d756:	1ac0      	subs	r0, r0, r3
1000d758:	4152      	adcs	r2, r2
1000d75a:	0843      	lsrs	r3, r0, #1
1000d75c:	428b      	cmp	r3, r1
1000d75e:	d301      	bcc.n	1000d764 <__udivsi3+0xf0>
1000d760:	004b      	lsls	r3, r1, #1
1000d762:	1ac0      	subs	r0, r0, r3
1000d764:	4152      	adcs	r2, r2
1000d766:	1a41      	subs	r1, r0, r1
1000d768:	d200      	bcs.n	1000d76c <__udivsi3+0xf8>
1000d76a:	4601      	mov	r1, r0
1000d76c:	4152      	adcs	r2, r2
1000d76e:	4610      	mov	r0, r2
1000d770:	4770      	bx	lr
1000d772:	e7ff      	b.n	1000d774 <__udivsi3+0x100>
1000d774:	b501      	push	{r0, lr}
1000d776:	2000      	movs	r0, #0
1000d778:	f000 f8f0 	bl	1000d95c <__aeabi_idiv0>
1000d77c:	bd02      	pop	{r1, pc}
1000d77e:	46c0      	nop			; (mov r8, r8)

1000d780 <__aeabi_uidivmod>:
1000d780:	2900      	cmp	r1, #0
1000d782:	d0f7      	beq.n	1000d774 <__udivsi3+0x100>
1000d784:	e776      	b.n	1000d674 <__udivsi3>
1000d786:	4770      	bx	lr

1000d788 <__divsi3>:
1000d788:	4603      	mov	r3, r0
1000d78a:	430b      	orrs	r3, r1
1000d78c:	d47f      	bmi.n	1000d88e <__divsi3+0x106>
1000d78e:	2200      	movs	r2, #0
1000d790:	0843      	lsrs	r3, r0, #1
1000d792:	428b      	cmp	r3, r1
1000d794:	d374      	bcc.n	1000d880 <__divsi3+0xf8>
1000d796:	0903      	lsrs	r3, r0, #4
1000d798:	428b      	cmp	r3, r1
1000d79a:	d35f      	bcc.n	1000d85c <__divsi3+0xd4>
1000d79c:	0a03      	lsrs	r3, r0, #8
1000d79e:	428b      	cmp	r3, r1
1000d7a0:	d344      	bcc.n	1000d82c <__divsi3+0xa4>
1000d7a2:	0b03      	lsrs	r3, r0, #12
1000d7a4:	428b      	cmp	r3, r1
1000d7a6:	d328      	bcc.n	1000d7fa <__divsi3+0x72>
1000d7a8:	0c03      	lsrs	r3, r0, #16
1000d7aa:	428b      	cmp	r3, r1
1000d7ac:	d30d      	bcc.n	1000d7ca <__divsi3+0x42>
1000d7ae:	22ff      	movs	r2, #255	; 0xff
1000d7b0:	0209      	lsls	r1, r1, #8
1000d7b2:	ba12      	rev	r2, r2
1000d7b4:	0c03      	lsrs	r3, r0, #16
1000d7b6:	428b      	cmp	r3, r1
1000d7b8:	d302      	bcc.n	1000d7c0 <__divsi3+0x38>
1000d7ba:	1212      	asrs	r2, r2, #8
1000d7bc:	0209      	lsls	r1, r1, #8
1000d7be:	d065      	beq.n	1000d88c <__divsi3+0x104>
1000d7c0:	0b03      	lsrs	r3, r0, #12
1000d7c2:	428b      	cmp	r3, r1
1000d7c4:	d319      	bcc.n	1000d7fa <__divsi3+0x72>
1000d7c6:	e000      	b.n	1000d7ca <__divsi3+0x42>
1000d7c8:	0a09      	lsrs	r1, r1, #8
1000d7ca:	0bc3      	lsrs	r3, r0, #15
1000d7cc:	428b      	cmp	r3, r1
1000d7ce:	d301      	bcc.n	1000d7d4 <__divsi3+0x4c>
1000d7d0:	03cb      	lsls	r3, r1, #15
1000d7d2:	1ac0      	subs	r0, r0, r3
1000d7d4:	4152      	adcs	r2, r2
1000d7d6:	0b83      	lsrs	r3, r0, #14
1000d7d8:	428b      	cmp	r3, r1
1000d7da:	d301      	bcc.n	1000d7e0 <__divsi3+0x58>
1000d7dc:	038b      	lsls	r3, r1, #14
1000d7de:	1ac0      	subs	r0, r0, r3
1000d7e0:	4152      	adcs	r2, r2
1000d7e2:	0b43      	lsrs	r3, r0, #13
1000d7e4:	428b      	cmp	r3, r1
1000d7e6:	d301      	bcc.n	1000d7ec <__divsi3+0x64>
1000d7e8:	034b      	lsls	r3, r1, #13
1000d7ea:	1ac0      	subs	r0, r0, r3
1000d7ec:	4152      	adcs	r2, r2
1000d7ee:	0b03      	lsrs	r3, r0, #12
1000d7f0:	428b      	cmp	r3, r1
1000d7f2:	d301      	bcc.n	1000d7f8 <__divsi3+0x70>
1000d7f4:	030b      	lsls	r3, r1, #12
1000d7f6:	1ac0      	subs	r0, r0, r3
1000d7f8:	4152      	adcs	r2, r2
1000d7fa:	0ac3      	lsrs	r3, r0, #11
1000d7fc:	428b      	cmp	r3, r1
1000d7fe:	d301      	bcc.n	1000d804 <__divsi3+0x7c>
1000d800:	02cb      	lsls	r3, r1, #11
1000d802:	1ac0      	subs	r0, r0, r3
1000d804:	4152      	adcs	r2, r2
1000d806:	0a83      	lsrs	r3, r0, #10
1000d808:	428b      	cmp	r3, r1
1000d80a:	d301      	bcc.n	1000d810 <__divsi3+0x88>
1000d80c:	028b      	lsls	r3, r1, #10
1000d80e:	1ac0      	subs	r0, r0, r3
1000d810:	4152      	adcs	r2, r2
1000d812:	0a43      	lsrs	r3, r0, #9
1000d814:	428b      	cmp	r3, r1
1000d816:	d301      	bcc.n	1000d81c <__divsi3+0x94>
1000d818:	024b      	lsls	r3, r1, #9
1000d81a:	1ac0      	subs	r0, r0, r3
1000d81c:	4152      	adcs	r2, r2
1000d81e:	0a03      	lsrs	r3, r0, #8
1000d820:	428b      	cmp	r3, r1
1000d822:	d301      	bcc.n	1000d828 <__divsi3+0xa0>
1000d824:	020b      	lsls	r3, r1, #8
1000d826:	1ac0      	subs	r0, r0, r3
1000d828:	4152      	adcs	r2, r2
1000d82a:	d2cd      	bcs.n	1000d7c8 <__divsi3+0x40>
1000d82c:	09c3      	lsrs	r3, r0, #7
1000d82e:	428b      	cmp	r3, r1
1000d830:	d301      	bcc.n	1000d836 <__divsi3+0xae>
1000d832:	01cb      	lsls	r3, r1, #7
1000d834:	1ac0      	subs	r0, r0, r3
1000d836:	4152      	adcs	r2, r2
1000d838:	0983      	lsrs	r3, r0, #6
1000d83a:	428b      	cmp	r3, r1
1000d83c:	d301      	bcc.n	1000d842 <__divsi3+0xba>
1000d83e:	018b      	lsls	r3, r1, #6
1000d840:	1ac0      	subs	r0, r0, r3
1000d842:	4152      	adcs	r2, r2
1000d844:	0943      	lsrs	r3, r0, #5
1000d846:	428b      	cmp	r3, r1
1000d848:	d301      	bcc.n	1000d84e <__divsi3+0xc6>
1000d84a:	014b      	lsls	r3, r1, #5
1000d84c:	1ac0      	subs	r0, r0, r3
1000d84e:	4152      	adcs	r2, r2
1000d850:	0903      	lsrs	r3, r0, #4
1000d852:	428b      	cmp	r3, r1
1000d854:	d301      	bcc.n	1000d85a <__divsi3+0xd2>
1000d856:	010b      	lsls	r3, r1, #4
1000d858:	1ac0      	subs	r0, r0, r3
1000d85a:	4152      	adcs	r2, r2
1000d85c:	08c3      	lsrs	r3, r0, #3
1000d85e:	428b      	cmp	r3, r1
1000d860:	d301      	bcc.n	1000d866 <__divsi3+0xde>
1000d862:	00cb      	lsls	r3, r1, #3
1000d864:	1ac0      	subs	r0, r0, r3
1000d866:	4152      	adcs	r2, r2
1000d868:	0883      	lsrs	r3, r0, #2
1000d86a:	428b      	cmp	r3, r1
1000d86c:	d301      	bcc.n	1000d872 <__divsi3+0xea>
1000d86e:	008b      	lsls	r3, r1, #2
1000d870:	1ac0      	subs	r0, r0, r3
1000d872:	4152      	adcs	r2, r2
1000d874:	0843      	lsrs	r3, r0, #1
1000d876:	428b      	cmp	r3, r1
1000d878:	d301      	bcc.n	1000d87e <__divsi3+0xf6>
1000d87a:	004b      	lsls	r3, r1, #1
1000d87c:	1ac0      	subs	r0, r0, r3
1000d87e:	4152      	adcs	r2, r2
1000d880:	1a41      	subs	r1, r0, r1
1000d882:	d200      	bcs.n	1000d886 <__divsi3+0xfe>
1000d884:	4601      	mov	r1, r0
1000d886:	4152      	adcs	r2, r2
1000d888:	4610      	mov	r0, r2
1000d88a:	4770      	bx	lr
1000d88c:	e05d      	b.n	1000d94a <__divsi3+0x1c2>
1000d88e:	0fca      	lsrs	r2, r1, #31
1000d890:	d000      	beq.n	1000d894 <__divsi3+0x10c>
1000d892:	4249      	negs	r1, r1
1000d894:	1003      	asrs	r3, r0, #32
1000d896:	d300      	bcc.n	1000d89a <__divsi3+0x112>
1000d898:	4240      	negs	r0, r0
1000d89a:	4053      	eors	r3, r2
1000d89c:	2200      	movs	r2, #0
1000d89e:	469c      	mov	ip, r3
1000d8a0:	0903      	lsrs	r3, r0, #4
1000d8a2:	428b      	cmp	r3, r1
1000d8a4:	d32d      	bcc.n	1000d902 <__divsi3+0x17a>
1000d8a6:	0a03      	lsrs	r3, r0, #8
1000d8a8:	428b      	cmp	r3, r1
1000d8aa:	d312      	bcc.n	1000d8d2 <__divsi3+0x14a>
1000d8ac:	22fc      	movs	r2, #252	; 0xfc
1000d8ae:	0189      	lsls	r1, r1, #6
1000d8b0:	ba12      	rev	r2, r2
1000d8b2:	0a03      	lsrs	r3, r0, #8
1000d8b4:	428b      	cmp	r3, r1
1000d8b6:	d30c      	bcc.n	1000d8d2 <__divsi3+0x14a>
1000d8b8:	0189      	lsls	r1, r1, #6
1000d8ba:	1192      	asrs	r2, r2, #6
1000d8bc:	428b      	cmp	r3, r1
1000d8be:	d308      	bcc.n	1000d8d2 <__divsi3+0x14a>
1000d8c0:	0189      	lsls	r1, r1, #6
1000d8c2:	1192      	asrs	r2, r2, #6
1000d8c4:	428b      	cmp	r3, r1
1000d8c6:	d304      	bcc.n	1000d8d2 <__divsi3+0x14a>
1000d8c8:	0189      	lsls	r1, r1, #6
1000d8ca:	d03a      	beq.n	1000d942 <__divsi3+0x1ba>
1000d8cc:	1192      	asrs	r2, r2, #6
1000d8ce:	e000      	b.n	1000d8d2 <__divsi3+0x14a>
1000d8d0:	0989      	lsrs	r1, r1, #6
1000d8d2:	09c3      	lsrs	r3, r0, #7
1000d8d4:	428b      	cmp	r3, r1
1000d8d6:	d301      	bcc.n	1000d8dc <__divsi3+0x154>
1000d8d8:	01cb      	lsls	r3, r1, #7
1000d8da:	1ac0      	subs	r0, r0, r3
1000d8dc:	4152      	adcs	r2, r2
1000d8de:	0983      	lsrs	r3, r0, #6
1000d8e0:	428b      	cmp	r3, r1
1000d8e2:	d301      	bcc.n	1000d8e8 <__divsi3+0x160>
1000d8e4:	018b      	lsls	r3, r1, #6
1000d8e6:	1ac0      	subs	r0, r0, r3
1000d8e8:	4152      	adcs	r2, r2
1000d8ea:	0943      	lsrs	r3, r0, #5
1000d8ec:	428b      	cmp	r3, r1
1000d8ee:	d301      	bcc.n	1000d8f4 <__divsi3+0x16c>
1000d8f0:	014b      	lsls	r3, r1, #5
1000d8f2:	1ac0      	subs	r0, r0, r3
1000d8f4:	4152      	adcs	r2, r2
1000d8f6:	0903      	lsrs	r3, r0, #4
1000d8f8:	428b      	cmp	r3, r1
1000d8fa:	d301      	bcc.n	1000d900 <__divsi3+0x178>
1000d8fc:	010b      	lsls	r3, r1, #4
1000d8fe:	1ac0      	subs	r0, r0, r3
1000d900:	4152      	adcs	r2, r2
1000d902:	08c3      	lsrs	r3, r0, #3
1000d904:	428b      	cmp	r3, r1
1000d906:	d301      	bcc.n	1000d90c <__divsi3+0x184>
1000d908:	00cb      	lsls	r3, r1, #3
1000d90a:	1ac0      	subs	r0, r0, r3
1000d90c:	4152      	adcs	r2, r2
1000d90e:	0883      	lsrs	r3, r0, #2
1000d910:	428b      	cmp	r3, r1
1000d912:	d301      	bcc.n	1000d918 <__divsi3+0x190>
1000d914:	008b      	lsls	r3, r1, #2
1000d916:	1ac0      	subs	r0, r0, r3
1000d918:	4152      	adcs	r2, r2
1000d91a:	d2d9      	bcs.n	1000d8d0 <__divsi3+0x148>
1000d91c:	0843      	lsrs	r3, r0, #1
1000d91e:	428b      	cmp	r3, r1
1000d920:	d301      	bcc.n	1000d926 <__divsi3+0x19e>
1000d922:	004b      	lsls	r3, r1, #1
1000d924:	1ac0      	subs	r0, r0, r3
1000d926:	4152      	adcs	r2, r2
1000d928:	1a41      	subs	r1, r0, r1
1000d92a:	d200      	bcs.n	1000d92e <__divsi3+0x1a6>
1000d92c:	4601      	mov	r1, r0
1000d92e:	4663      	mov	r3, ip
1000d930:	4152      	adcs	r2, r2
1000d932:	105b      	asrs	r3, r3, #1
1000d934:	4610      	mov	r0, r2
1000d936:	d301      	bcc.n	1000d93c <__divsi3+0x1b4>
1000d938:	4240      	negs	r0, r0
1000d93a:	2b00      	cmp	r3, #0
1000d93c:	d500      	bpl.n	1000d940 <__divsi3+0x1b8>
1000d93e:	4249      	negs	r1, r1
1000d940:	4770      	bx	lr
1000d942:	4663      	mov	r3, ip
1000d944:	105b      	asrs	r3, r3, #1
1000d946:	d300      	bcc.n	1000d94a <__divsi3+0x1c2>
1000d948:	4240      	negs	r0, r0
1000d94a:	b501      	push	{r0, lr}
1000d94c:	2000      	movs	r0, #0
1000d94e:	f000 f805 	bl	1000d95c <__aeabi_idiv0>
1000d952:	bd02      	pop	{r1, pc}

1000d954 <__aeabi_idivmod>:
1000d954:	2900      	cmp	r1, #0
1000d956:	d0f8      	beq.n	1000d94a <__divsi3+0x1c2>
1000d958:	e716      	b.n	1000d788 <__divsi3>
1000d95a:	4770      	bx	lr

1000d95c <__aeabi_idiv0>:
1000d95c:	4770      	bx	lr
1000d95e:	46c0      	nop			; (mov r8, r8)

1000d960 <__aeabi_cdrcmple>:
1000d960:	4684      	mov	ip, r0
1000d962:	1c10      	adds	r0, r2, #0
1000d964:	4662      	mov	r2, ip
1000d966:	468c      	mov	ip, r1
1000d968:	1c19      	adds	r1, r3, #0
1000d96a:	4663      	mov	r3, ip
1000d96c:	e000      	b.n	1000d970 <__aeabi_cdcmpeq>
1000d96e:	46c0      	nop			; (mov r8, r8)

1000d970 <__aeabi_cdcmpeq>:
1000d970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000d972:	f001 f91d 	bl	1000ebb0 <__ledf2>
1000d976:	2800      	cmp	r0, #0
1000d978:	d401      	bmi.n	1000d97e <__aeabi_cdcmpeq+0xe>
1000d97a:	2100      	movs	r1, #0
1000d97c:	42c8      	cmn	r0, r1
1000d97e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000d980 <__aeabi_dcmpeq>:
1000d980:	b510      	push	{r4, lr}
1000d982:	f001 f877 	bl	1000ea74 <__eqdf2>
1000d986:	4240      	negs	r0, r0
1000d988:	3001      	adds	r0, #1
1000d98a:	bd10      	pop	{r4, pc}

1000d98c <__aeabi_dcmplt>:
1000d98c:	b510      	push	{r4, lr}
1000d98e:	f001 f90f 	bl	1000ebb0 <__ledf2>
1000d992:	2800      	cmp	r0, #0
1000d994:	db01      	blt.n	1000d99a <__aeabi_dcmplt+0xe>
1000d996:	2000      	movs	r0, #0
1000d998:	bd10      	pop	{r4, pc}
1000d99a:	2001      	movs	r0, #1
1000d99c:	bd10      	pop	{r4, pc}
1000d99e:	46c0      	nop			; (mov r8, r8)

1000d9a0 <__aeabi_dcmple>:
1000d9a0:	b510      	push	{r4, lr}
1000d9a2:	f001 f905 	bl	1000ebb0 <__ledf2>
1000d9a6:	2800      	cmp	r0, #0
1000d9a8:	dd01      	ble.n	1000d9ae <__aeabi_dcmple+0xe>
1000d9aa:	2000      	movs	r0, #0
1000d9ac:	bd10      	pop	{r4, pc}
1000d9ae:	2001      	movs	r0, #1
1000d9b0:	bd10      	pop	{r4, pc}
1000d9b2:	46c0      	nop			; (mov r8, r8)

1000d9b4 <__aeabi_dcmpgt>:
1000d9b4:	b510      	push	{r4, lr}
1000d9b6:	f001 f897 	bl	1000eae8 <__gedf2>
1000d9ba:	2800      	cmp	r0, #0
1000d9bc:	dc01      	bgt.n	1000d9c2 <__aeabi_dcmpgt+0xe>
1000d9be:	2000      	movs	r0, #0
1000d9c0:	bd10      	pop	{r4, pc}
1000d9c2:	2001      	movs	r0, #1
1000d9c4:	bd10      	pop	{r4, pc}
1000d9c6:	46c0      	nop			; (mov r8, r8)

1000d9c8 <__aeabi_dcmpge>:
1000d9c8:	b510      	push	{r4, lr}
1000d9ca:	f001 f88d 	bl	1000eae8 <__gedf2>
1000d9ce:	2800      	cmp	r0, #0
1000d9d0:	da01      	bge.n	1000d9d6 <__aeabi_dcmpge+0xe>
1000d9d2:	2000      	movs	r0, #0
1000d9d4:	bd10      	pop	{r4, pc}
1000d9d6:	2001      	movs	r0, #1
1000d9d8:	bd10      	pop	{r4, pc}
1000d9da:	46c0      	nop			; (mov r8, r8)

1000d9dc <__aeabi_cfrcmple>:
1000d9dc:	4684      	mov	ip, r0
1000d9de:	1c08      	adds	r0, r1, #0
1000d9e0:	4661      	mov	r1, ip
1000d9e2:	e7ff      	b.n	1000d9e4 <__aeabi_cfcmpeq>

1000d9e4 <__aeabi_cfcmpeq>:
1000d9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000d9e6:	f000 f9a3 	bl	1000dd30 <__lesf2>
1000d9ea:	2800      	cmp	r0, #0
1000d9ec:	d401      	bmi.n	1000d9f2 <__aeabi_cfcmpeq+0xe>
1000d9ee:	2100      	movs	r1, #0
1000d9f0:	42c8      	cmn	r0, r1
1000d9f2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000d9f4 <__aeabi_fcmpeq>:
1000d9f4:	b510      	push	{r4, lr}
1000d9f6:	f000 f935 	bl	1000dc64 <__eqsf2>
1000d9fa:	4240      	negs	r0, r0
1000d9fc:	3001      	adds	r0, #1
1000d9fe:	bd10      	pop	{r4, pc}

1000da00 <__aeabi_fcmplt>:
1000da00:	b510      	push	{r4, lr}
1000da02:	f000 f995 	bl	1000dd30 <__lesf2>
1000da06:	2800      	cmp	r0, #0
1000da08:	db01      	blt.n	1000da0e <__aeabi_fcmplt+0xe>
1000da0a:	2000      	movs	r0, #0
1000da0c:	bd10      	pop	{r4, pc}
1000da0e:	2001      	movs	r0, #1
1000da10:	bd10      	pop	{r4, pc}
1000da12:	46c0      	nop			; (mov r8, r8)

1000da14 <__aeabi_fcmple>:
1000da14:	b510      	push	{r4, lr}
1000da16:	f000 f98b 	bl	1000dd30 <__lesf2>
1000da1a:	2800      	cmp	r0, #0
1000da1c:	dd01      	ble.n	1000da22 <__aeabi_fcmple+0xe>
1000da1e:	2000      	movs	r0, #0
1000da20:	bd10      	pop	{r4, pc}
1000da22:	2001      	movs	r0, #1
1000da24:	bd10      	pop	{r4, pc}
1000da26:	46c0      	nop			; (mov r8, r8)

1000da28 <__aeabi_fcmpgt>:
1000da28:	b510      	push	{r4, lr}
1000da2a:	f000 f941 	bl	1000dcb0 <__gesf2>
1000da2e:	2800      	cmp	r0, #0
1000da30:	dc01      	bgt.n	1000da36 <__aeabi_fcmpgt+0xe>
1000da32:	2000      	movs	r0, #0
1000da34:	bd10      	pop	{r4, pc}
1000da36:	2001      	movs	r0, #1
1000da38:	bd10      	pop	{r4, pc}
1000da3a:	46c0      	nop			; (mov r8, r8)

1000da3c <__aeabi_fcmpge>:
1000da3c:	b510      	push	{r4, lr}
1000da3e:	f000 f937 	bl	1000dcb0 <__gesf2>
1000da42:	2800      	cmp	r0, #0
1000da44:	da01      	bge.n	1000da4a <__aeabi_fcmpge+0xe>
1000da46:	2000      	movs	r0, #0
1000da48:	bd10      	pop	{r4, pc}
1000da4a:	2001      	movs	r0, #1
1000da4c:	bd10      	pop	{r4, pc}
1000da4e:	46c0      	nop			; (mov r8, r8)

1000da50 <__aeabi_uldivmod>:
1000da50:	2b00      	cmp	r3, #0
1000da52:	d111      	bne.n	1000da78 <__aeabi_uldivmod+0x28>
1000da54:	2a00      	cmp	r2, #0
1000da56:	d10f      	bne.n	1000da78 <__aeabi_uldivmod+0x28>
1000da58:	2900      	cmp	r1, #0
1000da5a:	d100      	bne.n	1000da5e <__aeabi_uldivmod+0xe>
1000da5c:	2800      	cmp	r0, #0
1000da5e:	d002      	beq.n	1000da66 <__aeabi_uldivmod+0x16>
1000da60:	2100      	movs	r1, #0
1000da62:	43c9      	mvns	r1, r1
1000da64:	1c08      	adds	r0, r1, #0
1000da66:	b407      	push	{r0, r1, r2}
1000da68:	4802      	ldr	r0, [pc, #8]	; (1000da74 <__aeabi_uldivmod+0x24>)
1000da6a:	a102      	add	r1, pc, #8	; (adr r1, 1000da74 <__aeabi_uldivmod+0x24>)
1000da6c:	1840      	adds	r0, r0, r1
1000da6e:	9002      	str	r0, [sp, #8]
1000da70:	bd03      	pop	{r0, r1, pc}
1000da72:	46c0      	nop			; (mov r8, r8)
1000da74:	fffffee9 	.word	0xfffffee9
1000da78:	b403      	push	{r0, r1}
1000da7a:	4668      	mov	r0, sp
1000da7c:	b501      	push	{r0, lr}
1000da7e:	9802      	ldr	r0, [sp, #8]
1000da80:	f000 f830 	bl	1000dae4 <__udivmoddi4>
1000da84:	9b01      	ldr	r3, [sp, #4]
1000da86:	469e      	mov	lr, r3
1000da88:	b002      	add	sp, #8
1000da8a:	bc0c      	pop	{r2, r3}
1000da8c:	4770      	bx	lr
1000da8e:	46c0      	nop			; (mov r8, r8)

1000da90 <__aeabi_lmul>:
1000da90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da92:	46ce      	mov	lr, r9
1000da94:	4647      	mov	r7, r8
1000da96:	0415      	lsls	r5, r2, #16
1000da98:	0c2d      	lsrs	r5, r5, #16
1000da9a:	002e      	movs	r6, r5
1000da9c:	b580      	push	{r7, lr}
1000da9e:	0407      	lsls	r7, r0, #16
1000daa0:	0c14      	lsrs	r4, r2, #16
1000daa2:	0c3f      	lsrs	r7, r7, #16
1000daa4:	4699      	mov	r9, r3
1000daa6:	0c03      	lsrs	r3, r0, #16
1000daa8:	437e      	muls	r6, r7
1000daaa:	435d      	muls	r5, r3
1000daac:	4367      	muls	r7, r4
1000daae:	4363      	muls	r3, r4
1000dab0:	197f      	adds	r7, r7, r5
1000dab2:	0c34      	lsrs	r4, r6, #16
1000dab4:	19e4      	adds	r4, r4, r7
1000dab6:	469c      	mov	ip, r3
1000dab8:	42a5      	cmp	r5, r4
1000daba:	d903      	bls.n	1000dac4 <__aeabi_lmul+0x34>
1000dabc:	2380      	movs	r3, #128	; 0x80
1000dabe:	025b      	lsls	r3, r3, #9
1000dac0:	4698      	mov	r8, r3
1000dac2:	44c4      	add	ip, r8
1000dac4:	464b      	mov	r3, r9
1000dac6:	4351      	muls	r1, r2
1000dac8:	4343      	muls	r3, r0
1000daca:	0436      	lsls	r6, r6, #16
1000dacc:	0c36      	lsrs	r6, r6, #16
1000dace:	0c25      	lsrs	r5, r4, #16
1000dad0:	0424      	lsls	r4, r4, #16
1000dad2:	4465      	add	r5, ip
1000dad4:	19a4      	adds	r4, r4, r6
1000dad6:	1859      	adds	r1, r3, r1
1000dad8:	1949      	adds	r1, r1, r5
1000dada:	0020      	movs	r0, r4
1000dadc:	bc0c      	pop	{r2, r3}
1000dade:	4690      	mov	r8, r2
1000dae0:	4699      	mov	r9, r3
1000dae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000dae4 <__udivmoddi4>:
1000dae4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dae6:	4657      	mov	r7, sl
1000dae8:	464e      	mov	r6, r9
1000daea:	4645      	mov	r5, r8
1000daec:	46de      	mov	lr, fp
1000daee:	b5e0      	push	{r5, r6, r7, lr}
1000daf0:	0004      	movs	r4, r0
1000daf2:	b083      	sub	sp, #12
1000daf4:	000d      	movs	r5, r1
1000daf6:	4692      	mov	sl, r2
1000daf8:	4699      	mov	r9, r3
1000dafa:	428b      	cmp	r3, r1
1000dafc:	d82f      	bhi.n	1000db5e <__udivmoddi4+0x7a>
1000dafe:	d02c      	beq.n	1000db5a <__udivmoddi4+0x76>
1000db00:	4649      	mov	r1, r9
1000db02:	4650      	mov	r0, sl
1000db04:	f001 f9f2 	bl	1000eeec <__clzdi2>
1000db08:	0029      	movs	r1, r5
1000db0a:	0006      	movs	r6, r0
1000db0c:	0020      	movs	r0, r4
1000db0e:	f001 f9ed 	bl	1000eeec <__clzdi2>
1000db12:	1a33      	subs	r3, r6, r0
1000db14:	4698      	mov	r8, r3
1000db16:	3b20      	subs	r3, #32
1000db18:	469b      	mov	fp, r3
1000db1a:	d500      	bpl.n	1000db1e <__udivmoddi4+0x3a>
1000db1c:	e074      	b.n	1000dc08 <__udivmoddi4+0x124>
1000db1e:	4653      	mov	r3, sl
1000db20:	465a      	mov	r2, fp
1000db22:	4093      	lsls	r3, r2
1000db24:	001f      	movs	r7, r3
1000db26:	4653      	mov	r3, sl
1000db28:	4642      	mov	r2, r8
1000db2a:	4093      	lsls	r3, r2
1000db2c:	001e      	movs	r6, r3
1000db2e:	42af      	cmp	r7, r5
1000db30:	d829      	bhi.n	1000db86 <__udivmoddi4+0xa2>
1000db32:	d026      	beq.n	1000db82 <__udivmoddi4+0x9e>
1000db34:	465b      	mov	r3, fp
1000db36:	1ba4      	subs	r4, r4, r6
1000db38:	41bd      	sbcs	r5, r7
1000db3a:	2b00      	cmp	r3, #0
1000db3c:	da00      	bge.n	1000db40 <__udivmoddi4+0x5c>
1000db3e:	e079      	b.n	1000dc34 <__udivmoddi4+0x150>
1000db40:	2200      	movs	r2, #0
1000db42:	2300      	movs	r3, #0
1000db44:	9200      	str	r2, [sp, #0]
1000db46:	9301      	str	r3, [sp, #4]
1000db48:	2301      	movs	r3, #1
1000db4a:	465a      	mov	r2, fp
1000db4c:	4093      	lsls	r3, r2
1000db4e:	9301      	str	r3, [sp, #4]
1000db50:	2301      	movs	r3, #1
1000db52:	4642      	mov	r2, r8
1000db54:	4093      	lsls	r3, r2
1000db56:	9300      	str	r3, [sp, #0]
1000db58:	e019      	b.n	1000db8e <__udivmoddi4+0xaa>
1000db5a:	4282      	cmp	r2, r0
1000db5c:	d9d0      	bls.n	1000db00 <__udivmoddi4+0x1c>
1000db5e:	2200      	movs	r2, #0
1000db60:	2300      	movs	r3, #0
1000db62:	9200      	str	r2, [sp, #0]
1000db64:	9301      	str	r3, [sp, #4]
1000db66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000db68:	2b00      	cmp	r3, #0
1000db6a:	d001      	beq.n	1000db70 <__udivmoddi4+0x8c>
1000db6c:	601c      	str	r4, [r3, #0]
1000db6e:	605d      	str	r5, [r3, #4]
1000db70:	9800      	ldr	r0, [sp, #0]
1000db72:	9901      	ldr	r1, [sp, #4]
1000db74:	b003      	add	sp, #12
1000db76:	bc3c      	pop	{r2, r3, r4, r5}
1000db78:	4690      	mov	r8, r2
1000db7a:	4699      	mov	r9, r3
1000db7c:	46a2      	mov	sl, r4
1000db7e:	46ab      	mov	fp, r5
1000db80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000db82:	42a3      	cmp	r3, r4
1000db84:	d9d6      	bls.n	1000db34 <__udivmoddi4+0x50>
1000db86:	2200      	movs	r2, #0
1000db88:	2300      	movs	r3, #0
1000db8a:	9200      	str	r2, [sp, #0]
1000db8c:	9301      	str	r3, [sp, #4]
1000db8e:	4643      	mov	r3, r8
1000db90:	2b00      	cmp	r3, #0
1000db92:	d0e8      	beq.n	1000db66 <__udivmoddi4+0x82>
1000db94:	07fb      	lsls	r3, r7, #31
1000db96:	0872      	lsrs	r2, r6, #1
1000db98:	431a      	orrs	r2, r3
1000db9a:	4646      	mov	r6, r8
1000db9c:	087b      	lsrs	r3, r7, #1
1000db9e:	e00e      	b.n	1000dbbe <__udivmoddi4+0xda>
1000dba0:	42ab      	cmp	r3, r5
1000dba2:	d101      	bne.n	1000dba8 <__udivmoddi4+0xc4>
1000dba4:	42a2      	cmp	r2, r4
1000dba6:	d80c      	bhi.n	1000dbc2 <__udivmoddi4+0xde>
1000dba8:	1aa4      	subs	r4, r4, r2
1000dbaa:	419d      	sbcs	r5, r3
1000dbac:	2001      	movs	r0, #1
1000dbae:	1924      	adds	r4, r4, r4
1000dbb0:	416d      	adcs	r5, r5
1000dbb2:	2100      	movs	r1, #0
1000dbb4:	3e01      	subs	r6, #1
1000dbb6:	1824      	adds	r4, r4, r0
1000dbb8:	414d      	adcs	r5, r1
1000dbba:	2e00      	cmp	r6, #0
1000dbbc:	d006      	beq.n	1000dbcc <__udivmoddi4+0xe8>
1000dbbe:	42ab      	cmp	r3, r5
1000dbc0:	d9ee      	bls.n	1000dba0 <__udivmoddi4+0xbc>
1000dbc2:	3e01      	subs	r6, #1
1000dbc4:	1924      	adds	r4, r4, r4
1000dbc6:	416d      	adcs	r5, r5
1000dbc8:	2e00      	cmp	r6, #0
1000dbca:	d1f8      	bne.n	1000dbbe <__udivmoddi4+0xda>
1000dbcc:	465b      	mov	r3, fp
1000dbce:	9800      	ldr	r0, [sp, #0]
1000dbd0:	9901      	ldr	r1, [sp, #4]
1000dbd2:	1900      	adds	r0, r0, r4
1000dbd4:	4169      	adcs	r1, r5
1000dbd6:	2b00      	cmp	r3, #0
1000dbd8:	db22      	blt.n	1000dc20 <__udivmoddi4+0x13c>
1000dbda:	002b      	movs	r3, r5
1000dbdc:	465a      	mov	r2, fp
1000dbde:	40d3      	lsrs	r3, r2
1000dbe0:	002a      	movs	r2, r5
1000dbe2:	4644      	mov	r4, r8
1000dbe4:	40e2      	lsrs	r2, r4
1000dbe6:	001c      	movs	r4, r3
1000dbe8:	465b      	mov	r3, fp
1000dbea:	0015      	movs	r5, r2
1000dbec:	2b00      	cmp	r3, #0
1000dbee:	db2c      	blt.n	1000dc4a <__udivmoddi4+0x166>
1000dbf0:	0026      	movs	r6, r4
1000dbf2:	409e      	lsls	r6, r3
1000dbf4:	0033      	movs	r3, r6
1000dbf6:	0026      	movs	r6, r4
1000dbf8:	4647      	mov	r7, r8
1000dbfa:	40be      	lsls	r6, r7
1000dbfc:	0032      	movs	r2, r6
1000dbfe:	1a80      	subs	r0, r0, r2
1000dc00:	4199      	sbcs	r1, r3
1000dc02:	9000      	str	r0, [sp, #0]
1000dc04:	9101      	str	r1, [sp, #4]
1000dc06:	e7ae      	b.n	1000db66 <__udivmoddi4+0x82>
1000dc08:	4642      	mov	r2, r8
1000dc0a:	2320      	movs	r3, #32
1000dc0c:	1a9b      	subs	r3, r3, r2
1000dc0e:	4652      	mov	r2, sl
1000dc10:	40da      	lsrs	r2, r3
1000dc12:	4641      	mov	r1, r8
1000dc14:	0013      	movs	r3, r2
1000dc16:	464a      	mov	r2, r9
1000dc18:	408a      	lsls	r2, r1
1000dc1a:	0017      	movs	r7, r2
1000dc1c:	431f      	orrs	r7, r3
1000dc1e:	e782      	b.n	1000db26 <__udivmoddi4+0x42>
1000dc20:	4642      	mov	r2, r8
1000dc22:	2320      	movs	r3, #32
1000dc24:	1a9b      	subs	r3, r3, r2
1000dc26:	002a      	movs	r2, r5
1000dc28:	4646      	mov	r6, r8
1000dc2a:	409a      	lsls	r2, r3
1000dc2c:	0023      	movs	r3, r4
1000dc2e:	40f3      	lsrs	r3, r6
1000dc30:	4313      	orrs	r3, r2
1000dc32:	e7d5      	b.n	1000dbe0 <__udivmoddi4+0xfc>
1000dc34:	4642      	mov	r2, r8
1000dc36:	2320      	movs	r3, #32
1000dc38:	2100      	movs	r1, #0
1000dc3a:	1a9b      	subs	r3, r3, r2
1000dc3c:	2200      	movs	r2, #0
1000dc3e:	9100      	str	r1, [sp, #0]
1000dc40:	9201      	str	r2, [sp, #4]
1000dc42:	2201      	movs	r2, #1
1000dc44:	40da      	lsrs	r2, r3
1000dc46:	9201      	str	r2, [sp, #4]
1000dc48:	e782      	b.n	1000db50 <__udivmoddi4+0x6c>
1000dc4a:	4642      	mov	r2, r8
1000dc4c:	2320      	movs	r3, #32
1000dc4e:	0026      	movs	r6, r4
1000dc50:	1a9b      	subs	r3, r3, r2
1000dc52:	40de      	lsrs	r6, r3
1000dc54:	002f      	movs	r7, r5
1000dc56:	46b4      	mov	ip, r6
1000dc58:	4097      	lsls	r7, r2
1000dc5a:	4666      	mov	r6, ip
1000dc5c:	003b      	movs	r3, r7
1000dc5e:	4333      	orrs	r3, r6
1000dc60:	e7c9      	b.n	1000dbf6 <__udivmoddi4+0x112>
1000dc62:	46c0      	nop			; (mov r8, r8)

1000dc64 <__eqsf2>:
1000dc64:	b570      	push	{r4, r5, r6, lr}
1000dc66:	0042      	lsls	r2, r0, #1
1000dc68:	0245      	lsls	r5, r0, #9
1000dc6a:	024e      	lsls	r6, r1, #9
1000dc6c:	004c      	lsls	r4, r1, #1
1000dc6e:	0fc3      	lsrs	r3, r0, #31
1000dc70:	0a6d      	lsrs	r5, r5, #9
1000dc72:	0e12      	lsrs	r2, r2, #24
1000dc74:	0a76      	lsrs	r6, r6, #9
1000dc76:	0e24      	lsrs	r4, r4, #24
1000dc78:	0fc9      	lsrs	r1, r1, #31
1000dc7a:	2001      	movs	r0, #1
1000dc7c:	2aff      	cmp	r2, #255	; 0xff
1000dc7e:	d006      	beq.n	1000dc8e <__eqsf2+0x2a>
1000dc80:	2cff      	cmp	r4, #255	; 0xff
1000dc82:	d003      	beq.n	1000dc8c <__eqsf2+0x28>
1000dc84:	42a2      	cmp	r2, r4
1000dc86:	d101      	bne.n	1000dc8c <__eqsf2+0x28>
1000dc88:	42b5      	cmp	r5, r6
1000dc8a:	d006      	beq.n	1000dc9a <__eqsf2+0x36>
1000dc8c:	bd70      	pop	{r4, r5, r6, pc}
1000dc8e:	2d00      	cmp	r5, #0
1000dc90:	d1fc      	bne.n	1000dc8c <__eqsf2+0x28>
1000dc92:	2cff      	cmp	r4, #255	; 0xff
1000dc94:	d1fa      	bne.n	1000dc8c <__eqsf2+0x28>
1000dc96:	2e00      	cmp	r6, #0
1000dc98:	d1f8      	bne.n	1000dc8c <__eqsf2+0x28>
1000dc9a:	428b      	cmp	r3, r1
1000dc9c:	d006      	beq.n	1000dcac <__eqsf2+0x48>
1000dc9e:	2001      	movs	r0, #1
1000dca0:	2a00      	cmp	r2, #0
1000dca2:	d1f3      	bne.n	1000dc8c <__eqsf2+0x28>
1000dca4:	0028      	movs	r0, r5
1000dca6:	1e45      	subs	r5, r0, #1
1000dca8:	41a8      	sbcs	r0, r5
1000dcaa:	e7ef      	b.n	1000dc8c <__eqsf2+0x28>
1000dcac:	2000      	movs	r0, #0
1000dcae:	e7ed      	b.n	1000dc8c <__eqsf2+0x28>

1000dcb0 <__gesf2>:
1000dcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dcb2:	0042      	lsls	r2, r0, #1
1000dcb4:	0245      	lsls	r5, r0, #9
1000dcb6:	024c      	lsls	r4, r1, #9
1000dcb8:	0fc3      	lsrs	r3, r0, #31
1000dcba:	0048      	lsls	r0, r1, #1
1000dcbc:	0a6d      	lsrs	r5, r5, #9
1000dcbe:	0e12      	lsrs	r2, r2, #24
1000dcc0:	0a64      	lsrs	r4, r4, #9
1000dcc2:	0e00      	lsrs	r0, r0, #24
1000dcc4:	0fc9      	lsrs	r1, r1, #31
1000dcc6:	2aff      	cmp	r2, #255	; 0xff
1000dcc8:	d01e      	beq.n	1000dd08 <__gesf2+0x58>
1000dcca:	28ff      	cmp	r0, #255	; 0xff
1000dccc:	d021      	beq.n	1000dd12 <__gesf2+0x62>
1000dcce:	2a00      	cmp	r2, #0
1000dcd0:	d10a      	bne.n	1000dce8 <__gesf2+0x38>
1000dcd2:	426e      	negs	r6, r5
1000dcd4:	416e      	adcs	r6, r5
1000dcd6:	b2f6      	uxtb	r6, r6
1000dcd8:	2800      	cmp	r0, #0
1000dcda:	d10f      	bne.n	1000dcfc <__gesf2+0x4c>
1000dcdc:	2c00      	cmp	r4, #0
1000dcde:	d10d      	bne.n	1000dcfc <__gesf2+0x4c>
1000dce0:	2000      	movs	r0, #0
1000dce2:	2d00      	cmp	r5, #0
1000dce4:	d009      	beq.n	1000dcfa <__gesf2+0x4a>
1000dce6:	e005      	b.n	1000dcf4 <__gesf2+0x44>
1000dce8:	2800      	cmp	r0, #0
1000dcea:	d101      	bne.n	1000dcf0 <__gesf2+0x40>
1000dcec:	2c00      	cmp	r4, #0
1000dcee:	d001      	beq.n	1000dcf4 <__gesf2+0x44>
1000dcf0:	428b      	cmp	r3, r1
1000dcf2:	d011      	beq.n	1000dd18 <__gesf2+0x68>
1000dcf4:	2101      	movs	r1, #1
1000dcf6:	4258      	negs	r0, r3
1000dcf8:	4308      	orrs	r0, r1
1000dcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dcfc:	2e00      	cmp	r6, #0
1000dcfe:	d0f7      	beq.n	1000dcf0 <__gesf2+0x40>
1000dd00:	2001      	movs	r0, #1
1000dd02:	3901      	subs	r1, #1
1000dd04:	4308      	orrs	r0, r1
1000dd06:	e7f8      	b.n	1000dcfa <__gesf2+0x4a>
1000dd08:	2d00      	cmp	r5, #0
1000dd0a:	d0de      	beq.n	1000dcca <__gesf2+0x1a>
1000dd0c:	2002      	movs	r0, #2
1000dd0e:	4240      	negs	r0, r0
1000dd10:	e7f3      	b.n	1000dcfa <__gesf2+0x4a>
1000dd12:	2c00      	cmp	r4, #0
1000dd14:	d0db      	beq.n	1000dcce <__gesf2+0x1e>
1000dd16:	e7f9      	b.n	1000dd0c <__gesf2+0x5c>
1000dd18:	4282      	cmp	r2, r0
1000dd1a:	dceb      	bgt.n	1000dcf4 <__gesf2+0x44>
1000dd1c:	db04      	blt.n	1000dd28 <__gesf2+0x78>
1000dd1e:	42a5      	cmp	r5, r4
1000dd20:	d8e8      	bhi.n	1000dcf4 <__gesf2+0x44>
1000dd22:	2000      	movs	r0, #0
1000dd24:	42a5      	cmp	r5, r4
1000dd26:	d2e8      	bcs.n	1000dcfa <__gesf2+0x4a>
1000dd28:	2101      	movs	r1, #1
1000dd2a:	1e58      	subs	r0, r3, #1
1000dd2c:	4308      	orrs	r0, r1
1000dd2e:	e7e4      	b.n	1000dcfa <__gesf2+0x4a>

1000dd30 <__lesf2>:
1000dd30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd32:	0042      	lsls	r2, r0, #1
1000dd34:	024d      	lsls	r5, r1, #9
1000dd36:	004c      	lsls	r4, r1, #1
1000dd38:	0246      	lsls	r6, r0, #9
1000dd3a:	0a76      	lsrs	r6, r6, #9
1000dd3c:	0e12      	lsrs	r2, r2, #24
1000dd3e:	0fc3      	lsrs	r3, r0, #31
1000dd40:	0a6d      	lsrs	r5, r5, #9
1000dd42:	0e24      	lsrs	r4, r4, #24
1000dd44:	0fc9      	lsrs	r1, r1, #31
1000dd46:	2aff      	cmp	r2, #255	; 0xff
1000dd48:	d016      	beq.n	1000dd78 <__lesf2+0x48>
1000dd4a:	2cff      	cmp	r4, #255	; 0xff
1000dd4c:	d018      	beq.n	1000dd80 <__lesf2+0x50>
1000dd4e:	2a00      	cmp	r2, #0
1000dd50:	d10a      	bne.n	1000dd68 <__lesf2+0x38>
1000dd52:	4270      	negs	r0, r6
1000dd54:	4170      	adcs	r0, r6
1000dd56:	b2c0      	uxtb	r0, r0
1000dd58:	2c00      	cmp	r4, #0
1000dd5a:	d015      	beq.n	1000dd88 <__lesf2+0x58>
1000dd5c:	2800      	cmp	r0, #0
1000dd5e:	d005      	beq.n	1000dd6c <__lesf2+0x3c>
1000dd60:	2001      	movs	r0, #1
1000dd62:	3901      	subs	r1, #1
1000dd64:	4308      	orrs	r0, r1
1000dd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd68:	2c00      	cmp	r4, #0
1000dd6a:	d013      	beq.n	1000dd94 <__lesf2+0x64>
1000dd6c:	4299      	cmp	r1, r3
1000dd6e:	d014      	beq.n	1000dd9a <__lesf2+0x6a>
1000dd70:	2001      	movs	r0, #1
1000dd72:	425b      	negs	r3, r3
1000dd74:	4318      	orrs	r0, r3
1000dd76:	e7f6      	b.n	1000dd66 <__lesf2+0x36>
1000dd78:	2002      	movs	r0, #2
1000dd7a:	2e00      	cmp	r6, #0
1000dd7c:	d1f3      	bne.n	1000dd66 <__lesf2+0x36>
1000dd7e:	e7e4      	b.n	1000dd4a <__lesf2+0x1a>
1000dd80:	2002      	movs	r0, #2
1000dd82:	2d00      	cmp	r5, #0
1000dd84:	d1ef      	bne.n	1000dd66 <__lesf2+0x36>
1000dd86:	e7e2      	b.n	1000dd4e <__lesf2+0x1e>
1000dd88:	2d00      	cmp	r5, #0
1000dd8a:	d1e7      	bne.n	1000dd5c <__lesf2+0x2c>
1000dd8c:	2000      	movs	r0, #0
1000dd8e:	2e00      	cmp	r6, #0
1000dd90:	d0e9      	beq.n	1000dd66 <__lesf2+0x36>
1000dd92:	e7ed      	b.n	1000dd70 <__lesf2+0x40>
1000dd94:	2d00      	cmp	r5, #0
1000dd96:	d1e9      	bne.n	1000dd6c <__lesf2+0x3c>
1000dd98:	e7ea      	b.n	1000dd70 <__lesf2+0x40>
1000dd9a:	42a2      	cmp	r2, r4
1000dd9c:	dc06      	bgt.n	1000ddac <__lesf2+0x7c>
1000dd9e:	dbdf      	blt.n	1000dd60 <__lesf2+0x30>
1000dda0:	42ae      	cmp	r6, r5
1000dda2:	d803      	bhi.n	1000ddac <__lesf2+0x7c>
1000dda4:	2000      	movs	r0, #0
1000dda6:	42ae      	cmp	r6, r5
1000dda8:	d3da      	bcc.n	1000dd60 <__lesf2+0x30>
1000ddaa:	e7dc      	b.n	1000dd66 <__lesf2+0x36>
1000ddac:	2001      	movs	r0, #1
1000ddae:	4249      	negs	r1, r1
1000ddb0:	4308      	orrs	r0, r1
1000ddb2:	e7d8      	b.n	1000dd66 <__lesf2+0x36>

1000ddb4 <__aeabi_fmul>:
1000ddb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ddb6:	4657      	mov	r7, sl
1000ddb8:	464e      	mov	r6, r9
1000ddba:	4645      	mov	r5, r8
1000ddbc:	46de      	mov	lr, fp
1000ddbe:	b5e0      	push	{r5, r6, r7, lr}
1000ddc0:	0247      	lsls	r7, r0, #9
1000ddc2:	0046      	lsls	r6, r0, #1
1000ddc4:	4688      	mov	r8, r1
1000ddc6:	0a7f      	lsrs	r7, r7, #9
1000ddc8:	0e36      	lsrs	r6, r6, #24
1000ddca:	0fc4      	lsrs	r4, r0, #31
1000ddcc:	2e00      	cmp	r6, #0
1000ddce:	d047      	beq.n	1000de60 <__aeabi_fmul+0xac>
1000ddd0:	2eff      	cmp	r6, #255	; 0xff
1000ddd2:	d024      	beq.n	1000de1e <__aeabi_fmul+0x6a>
1000ddd4:	00fb      	lsls	r3, r7, #3
1000ddd6:	2780      	movs	r7, #128	; 0x80
1000ddd8:	04ff      	lsls	r7, r7, #19
1000ddda:	431f      	orrs	r7, r3
1000dddc:	2300      	movs	r3, #0
1000ddde:	4699      	mov	r9, r3
1000dde0:	469a      	mov	sl, r3
1000dde2:	3e7f      	subs	r6, #127	; 0x7f
1000dde4:	4643      	mov	r3, r8
1000dde6:	025d      	lsls	r5, r3, #9
1000dde8:	0058      	lsls	r0, r3, #1
1000ddea:	0fdb      	lsrs	r3, r3, #31
1000ddec:	0a6d      	lsrs	r5, r5, #9
1000ddee:	0e00      	lsrs	r0, r0, #24
1000ddf0:	4698      	mov	r8, r3
1000ddf2:	d043      	beq.n	1000de7c <__aeabi_fmul+0xc8>
1000ddf4:	28ff      	cmp	r0, #255	; 0xff
1000ddf6:	d03b      	beq.n	1000de70 <__aeabi_fmul+0xbc>
1000ddf8:	00eb      	lsls	r3, r5, #3
1000ddfa:	2580      	movs	r5, #128	; 0x80
1000ddfc:	2200      	movs	r2, #0
1000ddfe:	04ed      	lsls	r5, r5, #19
1000de00:	431d      	orrs	r5, r3
1000de02:	387f      	subs	r0, #127	; 0x7f
1000de04:	1836      	adds	r6, r6, r0
1000de06:	1c73      	adds	r3, r6, #1
1000de08:	4641      	mov	r1, r8
1000de0a:	469b      	mov	fp, r3
1000de0c:	464b      	mov	r3, r9
1000de0e:	4061      	eors	r1, r4
1000de10:	4313      	orrs	r3, r2
1000de12:	2b0f      	cmp	r3, #15
1000de14:	d864      	bhi.n	1000dee0 <__aeabi_fmul+0x12c>
1000de16:	4875      	ldr	r0, [pc, #468]	; (1000dfec <__aeabi_fmul+0x238>)
1000de18:	009b      	lsls	r3, r3, #2
1000de1a:	58c3      	ldr	r3, [r0, r3]
1000de1c:	469f      	mov	pc, r3
1000de1e:	2f00      	cmp	r7, #0
1000de20:	d142      	bne.n	1000dea8 <__aeabi_fmul+0xf4>
1000de22:	2308      	movs	r3, #8
1000de24:	4699      	mov	r9, r3
1000de26:	3b06      	subs	r3, #6
1000de28:	26ff      	movs	r6, #255	; 0xff
1000de2a:	469a      	mov	sl, r3
1000de2c:	e7da      	b.n	1000dde4 <__aeabi_fmul+0x30>
1000de2e:	4641      	mov	r1, r8
1000de30:	2a02      	cmp	r2, #2
1000de32:	d028      	beq.n	1000de86 <__aeabi_fmul+0xd2>
1000de34:	2a03      	cmp	r2, #3
1000de36:	d100      	bne.n	1000de3a <__aeabi_fmul+0x86>
1000de38:	e0ce      	b.n	1000dfd8 <__aeabi_fmul+0x224>
1000de3a:	2a01      	cmp	r2, #1
1000de3c:	d000      	beq.n	1000de40 <__aeabi_fmul+0x8c>
1000de3e:	e0ac      	b.n	1000df9a <__aeabi_fmul+0x1e6>
1000de40:	4011      	ands	r1, r2
1000de42:	2000      	movs	r0, #0
1000de44:	2200      	movs	r2, #0
1000de46:	b2cc      	uxtb	r4, r1
1000de48:	0240      	lsls	r0, r0, #9
1000de4a:	05d2      	lsls	r2, r2, #23
1000de4c:	0a40      	lsrs	r0, r0, #9
1000de4e:	07e4      	lsls	r4, r4, #31
1000de50:	4310      	orrs	r0, r2
1000de52:	4320      	orrs	r0, r4
1000de54:	bc3c      	pop	{r2, r3, r4, r5}
1000de56:	4690      	mov	r8, r2
1000de58:	4699      	mov	r9, r3
1000de5a:	46a2      	mov	sl, r4
1000de5c:	46ab      	mov	fp, r5
1000de5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000de60:	2f00      	cmp	r7, #0
1000de62:	d115      	bne.n	1000de90 <__aeabi_fmul+0xdc>
1000de64:	2304      	movs	r3, #4
1000de66:	4699      	mov	r9, r3
1000de68:	3b03      	subs	r3, #3
1000de6a:	2600      	movs	r6, #0
1000de6c:	469a      	mov	sl, r3
1000de6e:	e7b9      	b.n	1000dde4 <__aeabi_fmul+0x30>
1000de70:	20ff      	movs	r0, #255	; 0xff
1000de72:	2202      	movs	r2, #2
1000de74:	2d00      	cmp	r5, #0
1000de76:	d0c5      	beq.n	1000de04 <__aeabi_fmul+0x50>
1000de78:	2203      	movs	r2, #3
1000de7a:	e7c3      	b.n	1000de04 <__aeabi_fmul+0x50>
1000de7c:	2d00      	cmp	r5, #0
1000de7e:	d119      	bne.n	1000deb4 <__aeabi_fmul+0x100>
1000de80:	2000      	movs	r0, #0
1000de82:	2201      	movs	r2, #1
1000de84:	e7be      	b.n	1000de04 <__aeabi_fmul+0x50>
1000de86:	2401      	movs	r4, #1
1000de88:	22ff      	movs	r2, #255	; 0xff
1000de8a:	400c      	ands	r4, r1
1000de8c:	2000      	movs	r0, #0
1000de8e:	e7db      	b.n	1000de48 <__aeabi_fmul+0x94>
1000de90:	0038      	movs	r0, r7
1000de92:	f001 f80d 	bl	1000eeb0 <__clzsi2>
1000de96:	2676      	movs	r6, #118	; 0x76
1000de98:	1f43      	subs	r3, r0, #5
1000de9a:	409f      	lsls	r7, r3
1000de9c:	2300      	movs	r3, #0
1000de9e:	4276      	negs	r6, r6
1000dea0:	1a36      	subs	r6, r6, r0
1000dea2:	4699      	mov	r9, r3
1000dea4:	469a      	mov	sl, r3
1000dea6:	e79d      	b.n	1000dde4 <__aeabi_fmul+0x30>
1000dea8:	230c      	movs	r3, #12
1000deaa:	4699      	mov	r9, r3
1000deac:	3b09      	subs	r3, #9
1000deae:	26ff      	movs	r6, #255	; 0xff
1000deb0:	469a      	mov	sl, r3
1000deb2:	e797      	b.n	1000dde4 <__aeabi_fmul+0x30>
1000deb4:	0028      	movs	r0, r5
1000deb6:	f000 fffb 	bl	1000eeb0 <__clzsi2>
1000deba:	1f43      	subs	r3, r0, #5
1000debc:	409d      	lsls	r5, r3
1000debe:	2376      	movs	r3, #118	; 0x76
1000dec0:	425b      	negs	r3, r3
1000dec2:	1a18      	subs	r0, r3, r0
1000dec4:	2200      	movs	r2, #0
1000dec6:	e79d      	b.n	1000de04 <__aeabi_fmul+0x50>
1000dec8:	2080      	movs	r0, #128	; 0x80
1000deca:	2400      	movs	r4, #0
1000decc:	03c0      	lsls	r0, r0, #15
1000dece:	22ff      	movs	r2, #255	; 0xff
1000ded0:	e7ba      	b.n	1000de48 <__aeabi_fmul+0x94>
1000ded2:	003d      	movs	r5, r7
1000ded4:	4652      	mov	r2, sl
1000ded6:	e7ab      	b.n	1000de30 <__aeabi_fmul+0x7c>
1000ded8:	003d      	movs	r5, r7
1000deda:	0021      	movs	r1, r4
1000dedc:	4652      	mov	r2, sl
1000dede:	e7a7      	b.n	1000de30 <__aeabi_fmul+0x7c>
1000dee0:	0c3b      	lsrs	r3, r7, #16
1000dee2:	469c      	mov	ip, r3
1000dee4:	042a      	lsls	r2, r5, #16
1000dee6:	0c12      	lsrs	r2, r2, #16
1000dee8:	0c2b      	lsrs	r3, r5, #16
1000deea:	0014      	movs	r4, r2
1000deec:	4660      	mov	r0, ip
1000deee:	4665      	mov	r5, ip
1000def0:	043f      	lsls	r7, r7, #16
1000def2:	0c3f      	lsrs	r7, r7, #16
1000def4:	437c      	muls	r4, r7
1000def6:	4342      	muls	r2, r0
1000def8:	435d      	muls	r5, r3
1000defa:	437b      	muls	r3, r7
1000defc:	0c27      	lsrs	r7, r4, #16
1000defe:	189b      	adds	r3, r3, r2
1000df00:	18ff      	adds	r7, r7, r3
1000df02:	42ba      	cmp	r2, r7
1000df04:	d903      	bls.n	1000df0e <__aeabi_fmul+0x15a>
1000df06:	2380      	movs	r3, #128	; 0x80
1000df08:	025b      	lsls	r3, r3, #9
1000df0a:	469c      	mov	ip, r3
1000df0c:	4465      	add	r5, ip
1000df0e:	0424      	lsls	r4, r4, #16
1000df10:	043a      	lsls	r2, r7, #16
1000df12:	0c24      	lsrs	r4, r4, #16
1000df14:	1912      	adds	r2, r2, r4
1000df16:	0193      	lsls	r3, r2, #6
1000df18:	1e5c      	subs	r4, r3, #1
1000df1a:	41a3      	sbcs	r3, r4
1000df1c:	0c3f      	lsrs	r7, r7, #16
1000df1e:	0e92      	lsrs	r2, r2, #26
1000df20:	197d      	adds	r5, r7, r5
1000df22:	431a      	orrs	r2, r3
1000df24:	01ad      	lsls	r5, r5, #6
1000df26:	4315      	orrs	r5, r2
1000df28:	012b      	lsls	r3, r5, #4
1000df2a:	d504      	bpl.n	1000df36 <__aeabi_fmul+0x182>
1000df2c:	2301      	movs	r3, #1
1000df2e:	465e      	mov	r6, fp
1000df30:	086a      	lsrs	r2, r5, #1
1000df32:	401d      	ands	r5, r3
1000df34:	4315      	orrs	r5, r2
1000df36:	0032      	movs	r2, r6
1000df38:	327f      	adds	r2, #127	; 0x7f
1000df3a:	2a00      	cmp	r2, #0
1000df3c:	dd25      	ble.n	1000df8a <__aeabi_fmul+0x1d6>
1000df3e:	076b      	lsls	r3, r5, #29
1000df40:	d004      	beq.n	1000df4c <__aeabi_fmul+0x198>
1000df42:	230f      	movs	r3, #15
1000df44:	402b      	ands	r3, r5
1000df46:	2b04      	cmp	r3, #4
1000df48:	d000      	beq.n	1000df4c <__aeabi_fmul+0x198>
1000df4a:	3504      	adds	r5, #4
1000df4c:	012b      	lsls	r3, r5, #4
1000df4e:	d503      	bpl.n	1000df58 <__aeabi_fmul+0x1a4>
1000df50:	0032      	movs	r2, r6
1000df52:	4b27      	ldr	r3, [pc, #156]	; (1000dff0 <__aeabi_fmul+0x23c>)
1000df54:	3280      	adds	r2, #128	; 0x80
1000df56:	401d      	ands	r5, r3
1000df58:	2afe      	cmp	r2, #254	; 0xfe
1000df5a:	dc94      	bgt.n	1000de86 <__aeabi_fmul+0xd2>
1000df5c:	2401      	movs	r4, #1
1000df5e:	01a8      	lsls	r0, r5, #6
1000df60:	0a40      	lsrs	r0, r0, #9
1000df62:	b2d2      	uxtb	r2, r2
1000df64:	400c      	ands	r4, r1
1000df66:	e76f      	b.n	1000de48 <__aeabi_fmul+0x94>
1000df68:	2080      	movs	r0, #128	; 0x80
1000df6a:	03c0      	lsls	r0, r0, #15
1000df6c:	4207      	tst	r7, r0
1000df6e:	d007      	beq.n	1000df80 <__aeabi_fmul+0x1cc>
1000df70:	4205      	tst	r5, r0
1000df72:	d105      	bne.n	1000df80 <__aeabi_fmul+0x1cc>
1000df74:	4328      	orrs	r0, r5
1000df76:	0240      	lsls	r0, r0, #9
1000df78:	0a40      	lsrs	r0, r0, #9
1000df7a:	4644      	mov	r4, r8
1000df7c:	22ff      	movs	r2, #255	; 0xff
1000df7e:	e763      	b.n	1000de48 <__aeabi_fmul+0x94>
1000df80:	4338      	orrs	r0, r7
1000df82:	0240      	lsls	r0, r0, #9
1000df84:	0a40      	lsrs	r0, r0, #9
1000df86:	22ff      	movs	r2, #255	; 0xff
1000df88:	e75e      	b.n	1000de48 <__aeabi_fmul+0x94>
1000df8a:	2401      	movs	r4, #1
1000df8c:	1aa3      	subs	r3, r4, r2
1000df8e:	2b1b      	cmp	r3, #27
1000df90:	dd05      	ble.n	1000df9e <__aeabi_fmul+0x1ea>
1000df92:	400c      	ands	r4, r1
1000df94:	2200      	movs	r2, #0
1000df96:	2000      	movs	r0, #0
1000df98:	e756      	b.n	1000de48 <__aeabi_fmul+0x94>
1000df9a:	465e      	mov	r6, fp
1000df9c:	e7cb      	b.n	1000df36 <__aeabi_fmul+0x182>
1000df9e:	002a      	movs	r2, r5
1000dfa0:	2020      	movs	r0, #32
1000dfa2:	40da      	lsrs	r2, r3
1000dfa4:	1ac3      	subs	r3, r0, r3
1000dfa6:	409d      	lsls	r5, r3
1000dfa8:	002b      	movs	r3, r5
1000dfaa:	1e5d      	subs	r5, r3, #1
1000dfac:	41ab      	sbcs	r3, r5
1000dfae:	4313      	orrs	r3, r2
1000dfb0:	075a      	lsls	r2, r3, #29
1000dfb2:	d004      	beq.n	1000dfbe <__aeabi_fmul+0x20a>
1000dfb4:	220f      	movs	r2, #15
1000dfb6:	401a      	ands	r2, r3
1000dfb8:	2a04      	cmp	r2, #4
1000dfba:	d000      	beq.n	1000dfbe <__aeabi_fmul+0x20a>
1000dfbc:	3304      	adds	r3, #4
1000dfbe:	015a      	lsls	r2, r3, #5
1000dfc0:	d504      	bpl.n	1000dfcc <__aeabi_fmul+0x218>
1000dfc2:	2401      	movs	r4, #1
1000dfc4:	2201      	movs	r2, #1
1000dfc6:	400c      	ands	r4, r1
1000dfc8:	2000      	movs	r0, #0
1000dfca:	e73d      	b.n	1000de48 <__aeabi_fmul+0x94>
1000dfcc:	2401      	movs	r4, #1
1000dfce:	019b      	lsls	r3, r3, #6
1000dfd0:	0a58      	lsrs	r0, r3, #9
1000dfd2:	400c      	ands	r4, r1
1000dfd4:	2200      	movs	r2, #0
1000dfd6:	e737      	b.n	1000de48 <__aeabi_fmul+0x94>
1000dfd8:	2080      	movs	r0, #128	; 0x80
1000dfda:	2401      	movs	r4, #1
1000dfdc:	03c0      	lsls	r0, r0, #15
1000dfde:	4328      	orrs	r0, r5
1000dfe0:	0240      	lsls	r0, r0, #9
1000dfe2:	0a40      	lsrs	r0, r0, #9
1000dfe4:	400c      	ands	r4, r1
1000dfe6:	22ff      	movs	r2, #255	; 0xff
1000dfe8:	e72e      	b.n	1000de48 <__aeabi_fmul+0x94>
1000dfea:	46c0      	nop			; (mov r8, r8)
1000dfec:	10010ab8 	.word	0x10010ab8
1000dff0:	f7ffffff 	.word	0xf7ffffff

1000dff4 <__aeabi_fsub>:
1000dff4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dff6:	464f      	mov	r7, r9
1000dff8:	46d6      	mov	lr, sl
1000dffa:	4646      	mov	r6, r8
1000dffc:	0044      	lsls	r4, r0, #1
1000dffe:	b5c0      	push	{r6, r7, lr}
1000e000:	0fc2      	lsrs	r2, r0, #31
1000e002:	0247      	lsls	r7, r0, #9
1000e004:	0248      	lsls	r0, r1, #9
1000e006:	0a40      	lsrs	r0, r0, #9
1000e008:	4684      	mov	ip, r0
1000e00a:	4666      	mov	r6, ip
1000e00c:	0a7b      	lsrs	r3, r7, #9
1000e00e:	0048      	lsls	r0, r1, #1
1000e010:	0fc9      	lsrs	r1, r1, #31
1000e012:	469a      	mov	sl, r3
1000e014:	0e24      	lsrs	r4, r4, #24
1000e016:	0015      	movs	r5, r2
1000e018:	00db      	lsls	r3, r3, #3
1000e01a:	0e00      	lsrs	r0, r0, #24
1000e01c:	4689      	mov	r9, r1
1000e01e:	00f6      	lsls	r6, r6, #3
1000e020:	28ff      	cmp	r0, #255	; 0xff
1000e022:	d100      	bne.n	1000e026 <__aeabi_fsub+0x32>
1000e024:	e08f      	b.n	1000e146 <__aeabi_fsub+0x152>
1000e026:	2101      	movs	r1, #1
1000e028:	464f      	mov	r7, r9
1000e02a:	404f      	eors	r7, r1
1000e02c:	0039      	movs	r1, r7
1000e02e:	4291      	cmp	r1, r2
1000e030:	d066      	beq.n	1000e100 <__aeabi_fsub+0x10c>
1000e032:	1a22      	subs	r2, r4, r0
1000e034:	2a00      	cmp	r2, #0
1000e036:	dc00      	bgt.n	1000e03a <__aeabi_fsub+0x46>
1000e038:	e09d      	b.n	1000e176 <__aeabi_fsub+0x182>
1000e03a:	2800      	cmp	r0, #0
1000e03c:	d13d      	bne.n	1000e0ba <__aeabi_fsub+0xc6>
1000e03e:	2e00      	cmp	r6, #0
1000e040:	d100      	bne.n	1000e044 <__aeabi_fsub+0x50>
1000e042:	e08b      	b.n	1000e15c <__aeabi_fsub+0x168>
1000e044:	1e51      	subs	r1, r2, #1
1000e046:	2900      	cmp	r1, #0
1000e048:	d000      	beq.n	1000e04c <__aeabi_fsub+0x58>
1000e04a:	e0b5      	b.n	1000e1b8 <__aeabi_fsub+0x1c4>
1000e04c:	2401      	movs	r4, #1
1000e04e:	1b9b      	subs	r3, r3, r6
1000e050:	015a      	lsls	r2, r3, #5
1000e052:	d544      	bpl.n	1000e0de <__aeabi_fsub+0xea>
1000e054:	019b      	lsls	r3, r3, #6
1000e056:	099f      	lsrs	r7, r3, #6
1000e058:	0038      	movs	r0, r7
1000e05a:	f000 ff29 	bl	1000eeb0 <__clzsi2>
1000e05e:	3805      	subs	r0, #5
1000e060:	4087      	lsls	r7, r0
1000e062:	4284      	cmp	r4, r0
1000e064:	dd00      	ble.n	1000e068 <__aeabi_fsub+0x74>
1000e066:	e096      	b.n	1000e196 <__aeabi_fsub+0x1a2>
1000e068:	1b04      	subs	r4, r0, r4
1000e06a:	003a      	movs	r2, r7
1000e06c:	2020      	movs	r0, #32
1000e06e:	3401      	adds	r4, #1
1000e070:	40e2      	lsrs	r2, r4
1000e072:	1b04      	subs	r4, r0, r4
1000e074:	40a7      	lsls	r7, r4
1000e076:	003b      	movs	r3, r7
1000e078:	1e5f      	subs	r7, r3, #1
1000e07a:	41bb      	sbcs	r3, r7
1000e07c:	2400      	movs	r4, #0
1000e07e:	4313      	orrs	r3, r2
1000e080:	075a      	lsls	r2, r3, #29
1000e082:	d004      	beq.n	1000e08e <__aeabi_fsub+0x9a>
1000e084:	220f      	movs	r2, #15
1000e086:	401a      	ands	r2, r3
1000e088:	2a04      	cmp	r2, #4
1000e08a:	d000      	beq.n	1000e08e <__aeabi_fsub+0x9a>
1000e08c:	3304      	adds	r3, #4
1000e08e:	015a      	lsls	r2, r3, #5
1000e090:	d527      	bpl.n	1000e0e2 <__aeabi_fsub+0xee>
1000e092:	3401      	adds	r4, #1
1000e094:	2cff      	cmp	r4, #255	; 0xff
1000e096:	d100      	bne.n	1000e09a <__aeabi_fsub+0xa6>
1000e098:	e079      	b.n	1000e18e <__aeabi_fsub+0x19a>
1000e09a:	2201      	movs	r2, #1
1000e09c:	019b      	lsls	r3, r3, #6
1000e09e:	0a5b      	lsrs	r3, r3, #9
1000e0a0:	b2e4      	uxtb	r4, r4
1000e0a2:	402a      	ands	r2, r5
1000e0a4:	025b      	lsls	r3, r3, #9
1000e0a6:	05e4      	lsls	r4, r4, #23
1000e0a8:	0a58      	lsrs	r0, r3, #9
1000e0aa:	07d2      	lsls	r2, r2, #31
1000e0ac:	4320      	orrs	r0, r4
1000e0ae:	4310      	orrs	r0, r2
1000e0b0:	bc1c      	pop	{r2, r3, r4}
1000e0b2:	4690      	mov	r8, r2
1000e0b4:	4699      	mov	r9, r3
1000e0b6:	46a2      	mov	sl, r4
1000e0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0ba:	2cff      	cmp	r4, #255	; 0xff
1000e0bc:	d0e0      	beq.n	1000e080 <__aeabi_fsub+0x8c>
1000e0be:	2180      	movs	r1, #128	; 0x80
1000e0c0:	04c9      	lsls	r1, r1, #19
1000e0c2:	430e      	orrs	r6, r1
1000e0c4:	2a1b      	cmp	r2, #27
1000e0c6:	dc7b      	bgt.n	1000e1c0 <__aeabi_fsub+0x1cc>
1000e0c8:	0031      	movs	r1, r6
1000e0ca:	2020      	movs	r0, #32
1000e0cc:	40d1      	lsrs	r1, r2
1000e0ce:	1a82      	subs	r2, r0, r2
1000e0d0:	4096      	lsls	r6, r2
1000e0d2:	1e72      	subs	r2, r6, #1
1000e0d4:	4196      	sbcs	r6, r2
1000e0d6:	430e      	orrs	r6, r1
1000e0d8:	1b9b      	subs	r3, r3, r6
1000e0da:	015a      	lsls	r2, r3, #5
1000e0dc:	d4ba      	bmi.n	1000e054 <__aeabi_fsub+0x60>
1000e0de:	075a      	lsls	r2, r3, #29
1000e0e0:	d1d0      	bne.n	1000e084 <__aeabi_fsub+0x90>
1000e0e2:	2201      	movs	r2, #1
1000e0e4:	08df      	lsrs	r7, r3, #3
1000e0e6:	402a      	ands	r2, r5
1000e0e8:	2cff      	cmp	r4, #255	; 0xff
1000e0ea:	d133      	bne.n	1000e154 <__aeabi_fsub+0x160>
1000e0ec:	2f00      	cmp	r7, #0
1000e0ee:	d100      	bne.n	1000e0f2 <__aeabi_fsub+0xfe>
1000e0f0:	e0a8      	b.n	1000e244 <__aeabi_fsub+0x250>
1000e0f2:	2380      	movs	r3, #128	; 0x80
1000e0f4:	03db      	lsls	r3, r3, #15
1000e0f6:	433b      	orrs	r3, r7
1000e0f8:	025b      	lsls	r3, r3, #9
1000e0fa:	0a5b      	lsrs	r3, r3, #9
1000e0fc:	24ff      	movs	r4, #255	; 0xff
1000e0fe:	e7d1      	b.n	1000e0a4 <__aeabi_fsub+0xb0>
1000e100:	1a21      	subs	r1, r4, r0
1000e102:	2900      	cmp	r1, #0
1000e104:	dd4c      	ble.n	1000e1a0 <__aeabi_fsub+0x1ac>
1000e106:	2800      	cmp	r0, #0
1000e108:	d02a      	beq.n	1000e160 <__aeabi_fsub+0x16c>
1000e10a:	2cff      	cmp	r4, #255	; 0xff
1000e10c:	d0b8      	beq.n	1000e080 <__aeabi_fsub+0x8c>
1000e10e:	2080      	movs	r0, #128	; 0x80
1000e110:	04c0      	lsls	r0, r0, #19
1000e112:	4306      	orrs	r6, r0
1000e114:	291b      	cmp	r1, #27
1000e116:	dd00      	ble.n	1000e11a <__aeabi_fsub+0x126>
1000e118:	e0af      	b.n	1000e27a <__aeabi_fsub+0x286>
1000e11a:	0030      	movs	r0, r6
1000e11c:	2720      	movs	r7, #32
1000e11e:	40c8      	lsrs	r0, r1
1000e120:	1a79      	subs	r1, r7, r1
1000e122:	408e      	lsls	r6, r1
1000e124:	1e71      	subs	r1, r6, #1
1000e126:	418e      	sbcs	r6, r1
1000e128:	4306      	orrs	r6, r0
1000e12a:	199b      	adds	r3, r3, r6
1000e12c:	0159      	lsls	r1, r3, #5
1000e12e:	d5d6      	bpl.n	1000e0de <__aeabi_fsub+0xea>
1000e130:	3401      	adds	r4, #1
1000e132:	2cff      	cmp	r4, #255	; 0xff
1000e134:	d100      	bne.n	1000e138 <__aeabi_fsub+0x144>
1000e136:	e085      	b.n	1000e244 <__aeabi_fsub+0x250>
1000e138:	2201      	movs	r2, #1
1000e13a:	497a      	ldr	r1, [pc, #488]	; (1000e324 <__aeabi_fsub+0x330>)
1000e13c:	401a      	ands	r2, r3
1000e13e:	085b      	lsrs	r3, r3, #1
1000e140:	400b      	ands	r3, r1
1000e142:	4313      	orrs	r3, r2
1000e144:	e79c      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e146:	2e00      	cmp	r6, #0
1000e148:	d000      	beq.n	1000e14c <__aeabi_fsub+0x158>
1000e14a:	e770      	b.n	1000e02e <__aeabi_fsub+0x3a>
1000e14c:	e76b      	b.n	1000e026 <__aeabi_fsub+0x32>
1000e14e:	1e3b      	subs	r3, r7, #0
1000e150:	d1c5      	bne.n	1000e0de <__aeabi_fsub+0xea>
1000e152:	2200      	movs	r2, #0
1000e154:	027b      	lsls	r3, r7, #9
1000e156:	0a5b      	lsrs	r3, r3, #9
1000e158:	b2e4      	uxtb	r4, r4
1000e15a:	e7a3      	b.n	1000e0a4 <__aeabi_fsub+0xb0>
1000e15c:	0014      	movs	r4, r2
1000e15e:	e78f      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e160:	2e00      	cmp	r6, #0
1000e162:	d04d      	beq.n	1000e200 <__aeabi_fsub+0x20c>
1000e164:	1e48      	subs	r0, r1, #1
1000e166:	2800      	cmp	r0, #0
1000e168:	d157      	bne.n	1000e21a <__aeabi_fsub+0x226>
1000e16a:	199b      	adds	r3, r3, r6
1000e16c:	2401      	movs	r4, #1
1000e16e:	015a      	lsls	r2, r3, #5
1000e170:	d5b5      	bpl.n	1000e0de <__aeabi_fsub+0xea>
1000e172:	2402      	movs	r4, #2
1000e174:	e7e0      	b.n	1000e138 <__aeabi_fsub+0x144>
1000e176:	2a00      	cmp	r2, #0
1000e178:	d125      	bne.n	1000e1c6 <__aeabi_fsub+0x1d2>
1000e17a:	1c62      	adds	r2, r4, #1
1000e17c:	b2d2      	uxtb	r2, r2
1000e17e:	2a01      	cmp	r2, #1
1000e180:	dd72      	ble.n	1000e268 <__aeabi_fsub+0x274>
1000e182:	1b9f      	subs	r7, r3, r6
1000e184:	017a      	lsls	r2, r7, #5
1000e186:	d535      	bpl.n	1000e1f4 <__aeabi_fsub+0x200>
1000e188:	1af7      	subs	r7, r6, r3
1000e18a:	000d      	movs	r5, r1
1000e18c:	e764      	b.n	1000e058 <__aeabi_fsub+0x64>
1000e18e:	2201      	movs	r2, #1
1000e190:	2300      	movs	r3, #0
1000e192:	402a      	ands	r2, r5
1000e194:	e786      	b.n	1000e0a4 <__aeabi_fsub+0xb0>
1000e196:	003b      	movs	r3, r7
1000e198:	4a63      	ldr	r2, [pc, #396]	; (1000e328 <__aeabi_fsub+0x334>)
1000e19a:	1a24      	subs	r4, r4, r0
1000e19c:	4013      	ands	r3, r2
1000e19e:	e76f      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e1a0:	2900      	cmp	r1, #0
1000e1a2:	d16c      	bne.n	1000e27e <__aeabi_fsub+0x28a>
1000e1a4:	1c61      	adds	r1, r4, #1
1000e1a6:	b2c8      	uxtb	r0, r1
1000e1a8:	2801      	cmp	r0, #1
1000e1aa:	dd4e      	ble.n	1000e24a <__aeabi_fsub+0x256>
1000e1ac:	29ff      	cmp	r1, #255	; 0xff
1000e1ae:	d049      	beq.n	1000e244 <__aeabi_fsub+0x250>
1000e1b0:	199b      	adds	r3, r3, r6
1000e1b2:	085b      	lsrs	r3, r3, #1
1000e1b4:	000c      	movs	r4, r1
1000e1b6:	e763      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e1b8:	2aff      	cmp	r2, #255	; 0xff
1000e1ba:	d041      	beq.n	1000e240 <__aeabi_fsub+0x24c>
1000e1bc:	000a      	movs	r2, r1
1000e1be:	e781      	b.n	1000e0c4 <__aeabi_fsub+0xd0>
1000e1c0:	2601      	movs	r6, #1
1000e1c2:	1b9b      	subs	r3, r3, r6
1000e1c4:	e789      	b.n	1000e0da <__aeabi_fsub+0xe6>
1000e1c6:	2c00      	cmp	r4, #0
1000e1c8:	d01c      	beq.n	1000e204 <__aeabi_fsub+0x210>
1000e1ca:	28ff      	cmp	r0, #255	; 0xff
1000e1cc:	d021      	beq.n	1000e212 <__aeabi_fsub+0x21e>
1000e1ce:	2480      	movs	r4, #128	; 0x80
1000e1d0:	04e4      	lsls	r4, r4, #19
1000e1d2:	4252      	negs	r2, r2
1000e1d4:	4323      	orrs	r3, r4
1000e1d6:	2a1b      	cmp	r2, #27
1000e1d8:	dd00      	ble.n	1000e1dc <__aeabi_fsub+0x1e8>
1000e1da:	e096      	b.n	1000e30a <__aeabi_fsub+0x316>
1000e1dc:	001c      	movs	r4, r3
1000e1de:	2520      	movs	r5, #32
1000e1e0:	40d4      	lsrs	r4, r2
1000e1e2:	1aaa      	subs	r2, r5, r2
1000e1e4:	4093      	lsls	r3, r2
1000e1e6:	1e5a      	subs	r2, r3, #1
1000e1e8:	4193      	sbcs	r3, r2
1000e1ea:	4323      	orrs	r3, r4
1000e1ec:	1af3      	subs	r3, r6, r3
1000e1ee:	0004      	movs	r4, r0
1000e1f0:	000d      	movs	r5, r1
1000e1f2:	e72d      	b.n	1000e050 <__aeabi_fsub+0x5c>
1000e1f4:	2f00      	cmp	r7, #0
1000e1f6:	d000      	beq.n	1000e1fa <__aeabi_fsub+0x206>
1000e1f8:	e72e      	b.n	1000e058 <__aeabi_fsub+0x64>
1000e1fa:	2200      	movs	r2, #0
1000e1fc:	2400      	movs	r4, #0
1000e1fe:	e7a9      	b.n	1000e154 <__aeabi_fsub+0x160>
1000e200:	000c      	movs	r4, r1
1000e202:	e73d      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e204:	2b00      	cmp	r3, #0
1000e206:	d058      	beq.n	1000e2ba <__aeabi_fsub+0x2c6>
1000e208:	43d2      	mvns	r2, r2
1000e20a:	2a00      	cmp	r2, #0
1000e20c:	d0ee      	beq.n	1000e1ec <__aeabi_fsub+0x1f8>
1000e20e:	28ff      	cmp	r0, #255	; 0xff
1000e210:	d1e1      	bne.n	1000e1d6 <__aeabi_fsub+0x1e2>
1000e212:	0033      	movs	r3, r6
1000e214:	24ff      	movs	r4, #255	; 0xff
1000e216:	000d      	movs	r5, r1
1000e218:	e732      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e21a:	29ff      	cmp	r1, #255	; 0xff
1000e21c:	d010      	beq.n	1000e240 <__aeabi_fsub+0x24c>
1000e21e:	0001      	movs	r1, r0
1000e220:	e778      	b.n	1000e114 <__aeabi_fsub+0x120>
1000e222:	2b00      	cmp	r3, #0
1000e224:	d06e      	beq.n	1000e304 <__aeabi_fsub+0x310>
1000e226:	24ff      	movs	r4, #255	; 0xff
1000e228:	2e00      	cmp	r6, #0
1000e22a:	d100      	bne.n	1000e22e <__aeabi_fsub+0x23a>
1000e22c:	e728      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e22e:	2280      	movs	r2, #128	; 0x80
1000e230:	4651      	mov	r1, sl
1000e232:	03d2      	lsls	r2, r2, #15
1000e234:	4211      	tst	r1, r2
1000e236:	d003      	beq.n	1000e240 <__aeabi_fsub+0x24c>
1000e238:	4661      	mov	r1, ip
1000e23a:	4211      	tst	r1, r2
1000e23c:	d100      	bne.n	1000e240 <__aeabi_fsub+0x24c>
1000e23e:	0033      	movs	r3, r6
1000e240:	24ff      	movs	r4, #255	; 0xff
1000e242:	e71d      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e244:	24ff      	movs	r4, #255	; 0xff
1000e246:	2300      	movs	r3, #0
1000e248:	e72c      	b.n	1000e0a4 <__aeabi_fsub+0xb0>
1000e24a:	2c00      	cmp	r4, #0
1000e24c:	d1e9      	bne.n	1000e222 <__aeabi_fsub+0x22e>
1000e24e:	2b00      	cmp	r3, #0
1000e250:	d063      	beq.n	1000e31a <__aeabi_fsub+0x326>
1000e252:	2e00      	cmp	r6, #0
1000e254:	d100      	bne.n	1000e258 <__aeabi_fsub+0x264>
1000e256:	e713      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e258:	199b      	adds	r3, r3, r6
1000e25a:	015a      	lsls	r2, r3, #5
1000e25c:	d400      	bmi.n	1000e260 <__aeabi_fsub+0x26c>
1000e25e:	e73e      	b.n	1000e0de <__aeabi_fsub+0xea>
1000e260:	4a31      	ldr	r2, [pc, #196]	; (1000e328 <__aeabi_fsub+0x334>)
1000e262:	000c      	movs	r4, r1
1000e264:	4013      	ands	r3, r2
1000e266:	e70b      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e268:	2c00      	cmp	r4, #0
1000e26a:	d11e      	bne.n	1000e2aa <__aeabi_fsub+0x2b6>
1000e26c:	2b00      	cmp	r3, #0
1000e26e:	d12f      	bne.n	1000e2d0 <__aeabi_fsub+0x2dc>
1000e270:	2e00      	cmp	r6, #0
1000e272:	d04f      	beq.n	1000e314 <__aeabi_fsub+0x320>
1000e274:	0033      	movs	r3, r6
1000e276:	000d      	movs	r5, r1
1000e278:	e702      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e27a:	2601      	movs	r6, #1
1000e27c:	e755      	b.n	1000e12a <__aeabi_fsub+0x136>
1000e27e:	2c00      	cmp	r4, #0
1000e280:	d11f      	bne.n	1000e2c2 <__aeabi_fsub+0x2ce>
1000e282:	2b00      	cmp	r3, #0
1000e284:	d043      	beq.n	1000e30e <__aeabi_fsub+0x31a>
1000e286:	43c9      	mvns	r1, r1
1000e288:	2900      	cmp	r1, #0
1000e28a:	d00b      	beq.n	1000e2a4 <__aeabi_fsub+0x2b0>
1000e28c:	28ff      	cmp	r0, #255	; 0xff
1000e28e:	d039      	beq.n	1000e304 <__aeabi_fsub+0x310>
1000e290:	291b      	cmp	r1, #27
1000e292:	dc44      	bgt.n	1000e31e <__aeabi_fsub+0x32a>
1000e294:	001c      	movs	r4, r3
1000e296:	2720      	movs	r7, #32
1000e298:	40cc      	lsrs	r4, r1
1000e29a:	1a79      	subs	r1, r7, r1
1000e29c:	408b      	lsls	r3, r1
1000e29e:	1e59      	subs	r1, r3, #1
1000e2a0:	418b      	sbcs	r3, r1
1000e2a2:	4323      	orrs	r3, r4
1000e2a4:	199b      	adds	r3, r3, r6
1000e2a6:	0004      	movs	r4, r0
1000e2a8:	e740      	b.n	1000e12c <__aeabi_fsub+0x138>
1000e2aa:	2b00      	cmp	r3, #0
1000e2ac:	d11a      	bne.n	1000e2e4 <__aeabi_fsub+0x2f0>
1000e2ae:	2e00      	cmp	r6, #0
1000e2b0:	d124      	bne.n	1000e2fc <__aeabi_fsub+0x308>
1000e2b2:	2780      	movs	r7, #128	; 0x80
1000e2b4:	2200      	movs	r2, #0
1000e2b6:	03ff      	lsls	r7, r7, #15
1000e2b8:	e71b      	b.n	1000e0f2 <__aeabi_fsub+0xfe>
1000e2ba:	0033      	movs	r3, r6
1000e2bc:	0004      	movs	r4, r0
1000e2be:	000d      	movs	r5, r1
1000e2c0:	e6de      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e2c2:	28ff      	cmp	r0, #255	; 0xff
1000e2c4:	d01e      	beq.n	1000e304 <__aeabi_fsub+0x310>
1000e2c6:	2480      	movs	r4, #128	; 0x80
1000e2c8:	04e4      	lsls	r4, r4, #19
1000e2ca:	4249      	negs	r1, r1
1000e2cc:	4323      	orrs	r3, r4
1000e2ce:	e7df      	b.n	1000e290 <__aeabi_fsub+0x29c>
1000e2d0:	2e00      	cmp	r6, #0
1000e2d2:	d100      	bne.n	1000e2d6 <__aeabi_fsub+0x2e2>
1000e2d4:	e6d4      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e2d6:	1b9f      	subs	r7, r3, r6
1000e2d8:	017a      	lsls	r2, r7, #5
1000e2da:	d400      	bmi.n	1000e2de <__aeabi_fsub+0x2ea>
1000e2dc:	e737      	b.n	1000e14e <__aeabi_fsub+0x15a>
1000e2de:	1af3      	subs	r3, r6, r3
1000e2e0:	000d      	movs	r5, r1
1000e2e2:	e6cd      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e2e4:	24ff      	movs	r4, #255	; 0xff
1000e2e6:	2e00      	cmp	r6, #0
1000e2e8:	d100      	bne.n	1000e2ec <__aeabi_fsub+0x2f8>
1000e2ea:	e6c9      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e2ec:	2280      	movs	r2, #128	; 0x80
1000e2ee:	4650      	mov	r0, sl
1000e2f0:	03d2      	lsls	r2, r2, #15
1000e2f2:	4210      	tst	r0, r2
1000e2f4:	d0a4      	beq.n	1000e240 <__aeabi_fsub+0x24c>
1000e2f6:	4660      	mov	r0, ip
1000e2f8:	4210      	tst	r0, r2
1000e2fa:	d1a1      	bne.n	1000e240 <__aeabi_fsub+0x24c>
1000e2fc:	0033      	movs	r3, r6
1000e2fe:	000d      	movs	r5, r1
1000e300:	24ff      	movs	r4, #255	; 0xff
1000e302:	e6bd      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e304:	0033      	movs	r3, r6
1000e306:	24ff      	movs	r4, #255	; 0xff
1000e308:	e6ba      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e30a:	2301      	movs	r3, #1
1000e30c:	e76e      	b.n	1000e1ec <__aeabi_fsub+0x1f8>
1000e30e:	0033      	movs	r3, r6
1000e310:	0004      	movs	r4, r0
1000e312:	e6b5      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e314:	2700      	movs	r7, #0
1000e316:	2200      	movs	r2, #0
1000e318:	e71c      	b.n	1000e154 <__aeabi_fsub+0x160>
1000e31a:	0033      	movs	r3, r6
1000e31c:	e6b0      	b.n	1000e080 <__aeabi_fsub+0x8c>
1000e31e:	2301      	movs	r3, #1
1000e320:	e7c0      	b.n	1000e2a4 <__aeabi_fsub+0x2b0>
1000e322:	46c0      	nop			; (mov r8, r8)
1000e324:	7dffffff 	.word	0x7dffffff
1000e328:	fbffffff 	.word	0xfbffffff

1000e32c <__aeabi_f2iz>:
1000e32c:	0241      	lsls	r1, r0, #9
1000e32e:	0043      	lsls	r3, r0, #1
1000e330:	0fc2      	lsrs	r2, r0, #31
1000e332:	0a49      	lsrs	r1, r1, #9
1000e334:	0e1b      	lsrs	r3, r3, #24
1000e336:	2000      	movs	r0, #0
1000e338:	2b7e      	cmp	r3, #126	; 0x7e
1000e33a:	dd0d      	ble.n	1000e358 <__aeabi_f2iz+0x2c>
1000e33c:	2b9d      	cmp	r3, #157	; 0x9d
1000e33e:	dc0c      	bgt.n	1000e35a <__aeabi_f2iz+0x2e>
1000e340:	2080      	movs	r0, #128	; 0x80
1000e342:	0400      	lsls	r0, r0, #16
1000e344:	4301      	orrs	r1, r0
1000e346:	2b95      	cmp	r3, #149	; 0x95
1000e348:	dc0a      	bgt.n	1000e360 <__aeabi_f2iz+0x34>
1000e34a:	2096      	movs	r0, #150	; 0x96
1000e34c:	1ac3      	subs	r3, r0, r3
1000e34e:	40d9      	lsrs	r1, r3
1000e350:	4248      	negs	r0, r1
1000e352:	2a00      	cmp	r2, #0
1000e354:	d100      	bne.n	1000e358 <__aeabi_f2iz+0x2c>
1000e356:	0008      	movs	r0, r1
1000e358:	4770      	bx	lr
1000e35a:	4b03      	ldr	r3, [pc, #12]	; (1000e368 <__aeabi_f2iz+0x3c>)
1000e35c:	18d0      	adds	r0, r2, r3
1000e35e:	e7fb      	b.n	1000e358 <__aeabi_f2iz+0x2c>
1000e360:	3b96      	subs	r3, #150	; 0x96
1000e362:	4099      	lsls	r1, r3
1000e364:	e7f4      	b.n	1000e350 <__aeabi_f2iz+0x24>
1000e366:	46c0      	nop			; (mov r8, r8)
1000e368:	7fffffff 	.word	0x7fffffff

1000e36c <__aeabi_i2f>:
1000e36c:	b570      	push	{r4, r5, r6, lr}
1000e36e:	2800      	cmp	r0, #0
1000e370:	d030      	beq.n	1000e3d4 <__aeabi_i2f+0x68>
1000e372:	17c3      	asrs	r3, r0, #31
1000e374:	18c4      	adds	r4, r0, r3
1000e376:	405c      	eors	r4, r3
1000e378:	0fc5      	lsrs	r5, r0, #31
1000e37a:	0020      	movs	r0, r4
1000e37c:	f000 fd98 	bl	1000eeb0 <__clzsi2>
1000e380:	239e      	movs	r3, #158	; 0x9e
1000e382:	1a1b      	subs	r3, r3, r0
1000e384:	2b96      	cmp	r3, #150	; 0x96
1000e386:	dc0d      	bgt.n	1000e3a4 <__aeabi_i2f+0x38>
1000e388:	2296      	movs	r2, #150	; 0x96
1000e38a:	1ad2      	subs	r2, r2, r3
1000e38c:	4094      	lsls	r4, r2
1000e38e:	002a      	movs	r2, r5
1000e390:	0264      	lsls	r4, r4, #9
1000e392:	0a64      	lsrs	r4, r4, #9
1000e394:	b2db      	uxtb	r3, r3
1000e396:	0264      	lsls	r4, r4, #9
1000e398:	05db      	lsls	r3, r3, #23
1000e39a:	0a60      	lsrs	r0, r4, #9
1000e39c:	07d2      	lsls	r2, r2, #31
1000e39e:	4318      	orrs	r0, r3
1000e3a0:	4310      	orrs	r0, r2
1000e3a2:	bd70      	pop	{r4, r5, r6, pc}
1000e3a4:	2b99      	cmp	r3, #153	; 0x99
1000e3a6:	dc19      	bgt.n	1000e3dc <__aeabi_i2f+0x70>
1000e3a8:	2299      	movs	r2, #153	; 0x99
1000e3aa:	1ad2      	subs	r2, r2, r3
1000e3ac:	2a00      	cmp	r2, #0
1000e3ae:	dd29      	ble.n	1000e404 <__aeabi_i2f+0x98>
1000e3b0:	4094      	lsls	r4, r2
1000e3b2:	0022      	movs	r2, r4
1000e3b4:	4c14      	ldr	r4, [pc, #80]	; (1000e408 <__aeabi_i2f+0x9c>)
1000e3b6:	4014      	ands	r4, r2
1000e3b8:	0751      	lsls	r1, r2, #29
1000e3ba:	d004      	beq.n	1000e3c6 <__aeabi_i2f+0x5a>
1000e3bc:	210f      	movs	r1, #15
1000e3be:	400a      	ands	r2, r1
1000e3c0:	2a04      	cmp	r2, #4
1000e3c2:	d000      	beq.n	1000e3c6 <__aeabi_i2f+0x5a>
1000e3c4:	3404      	adds	r4, #4
1000e3c6:	0162      	lsls	r2, r4, #5
1000e3c8:	d413      	bmi.n	1000e3f2 <__aeabi_i2f+0x86>
1000e3ca:	01a4      	lsls	r4, r4, #6
1000e3cc:	0a64      	lsrs	r4, r4, #9
1000e3ce:	b2db      	uxtb	r3, r3
1000e3d0:	002a      	movs	r2, r5
1000e3d2:	e7e0      	b.n	1000e396 <__aeabi_i2f+0x2a>
1000e3d4:	2200      	movs	r2, #0
1000e3d6:	2300      	movs	r3, #0
1000e3d8:	2400      	movs	r4, #0
1000e3da:	e7dc      	b.n	1000e396 <__aeabi_i2f+0x2a>
1000e3dc:	2205      	movs	r2, #5
1000e3de:	0021      	movs	r1, r4
1000e3e0:	1a12      	subs	r2, r2, r0
1000e3e2:	40d1      	lsrs	r1, r2
1000e3e4:	22b9      	movs	r2, #185	; 0xb9
1000e3e6:	1ad2      	subs	r2, r2, r3
1000e3e8:	4094      	lsls	r4, r2
1000e3ea:	1e62      	subs	r2, r4, #1
1000e3ec:	4194      	sbcs	r4, r2
1000e3ee:	430c      	orrs	r4, r1
1000e3f0:	e7da      	b.n	1000e3a8 <__aeabi_i2f+0x3c>
1000e3f2:	4b05      	ldr	r3, [pc, #20]	; (1000e408 <__aeabi_i2f+0x9c>)
1000e3f4:	002a      	movs	r2, r5
1000e3f6:	401c      	ands	r4, r3
1000e3f8:	239f      	movs	r3, #159	; 0x9f
1000e3fa:	01a4      	lsls	r4, r4, #6
1000e3fc:	1a1b      	subs	r3, r3, r0
1000e3fe:	0a64      	lsrs	r4, r4, #9
1000e400:	b2db      	uxtb	r3, r3
1000e402:	e7c8      	b.n	1000e396 <__aeabi_i2f+0x2a>
1000e404:	0022      	movs	r2, r4
1000e406:	e7d5      	b.n	1000e3b4 <__aeabi_i2f+0x48>
1000e408:	fbffffff 	.word	0xfbffffff

1000e40c <__aeabi_ddiv>:
1000e40c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e40e:	4657      	mov	r7, sl
1000e410:	4645      	mov	r5, r8
1000e412:	46de      	mov	lr, fp
1000e414:	464e      	mov	r6, r9
1000e416:	b5e0      	push	{r5, r6, r7, lr}
1000e418:	004c      	lsls	r4, r1, #1
1000e41a:	030e      	lsls	r6, r1, #12
1000e41c:	b087      	sub	sp, #28
1000e41e:	4683      	mov	fp, r0
1000e420:	4692      	mov	sl, r2
1000e422:	001d      	movs	r5, r3
1000e424:	4680      	mov	r8, r0
1000e426:	0b36      	lsrs	r6, r6, #12
1000e428:	0d64      	lsrs	r4, r4, #21
1000e42a:	0fcf      	lsrs	r7, r1, #31
1000e42c:	2c00      	cmp	r4, #0
1000e42e:	d04f      	beq.n	1000e4d0 <__aeabi_ddiv+0xc4>
1000e430:	4b6f      	ldr	r3, [pc, #444]	; (1000e5f0 <__aeabi_ddiv+0x1e4>)
1000e432:	429c      	cmp	r4, r3
1000e434:	d035      	beq.n	1000e4a2 <__aeabi_ddiv+0x96>
1000e436:	2380      	movs	r3, #128	; 0x80
1000e438:	0f42      	lsrs	r2, r0, #29
1000e43a:	041b      	lsls	r3, r3, #16
1000e43c:	00f6      	lsls	r6, r6, #3
1000e43e:	4313      	orrs	r3, r2
1000e440:	4333      	orrs	r3, r6
1000e442:	4699      	mov	r9, r3
1000e444:	00c3      	lsls	r3, r0, #3
1000e446:	4698      	mov	r8, r3
1000e448:	4b6a      	ldr	r3, [pc, #424]	; (1000e5f4 <__aeabi_ddiv+0x1e8>)
1000e44a:	2600      	movs	r6, #0
1000e44c:	469c      	mov	ip, r3
1000e44e:	2300      	movs	r3, #0
1000e450:	4464      	add	r4, ip
1000e452:	9303      	str	r3, [sp, #12]
1000e454:	032b      	lsls	r3, r5, #12
1000e456:	0b1b      	lsrs	r3, r3, #12
1000e458:	469b      	mov	fp, r3
1000e45a:	006b      	lsls	r3, r5, #1
1000e45c:	0fed      	lsrs	r5, r5, #31
1000e45e:	4650      	mov	r0, sl
1000e460:	0d5b      	lsrs	r3, r3, #21
1000e462:	9501      	str	r5, [sp, #4]
1000e464:	d05e      	beq.n	1000e524 <__aeabi_ddiv+0x118>
1000e466:	4a62      	ldr	r2, [pc, #392]	; (1000e5f0 <__aeabi_ddiv+0x1e4>)
1000e468:	4293      	cmp	r3, r2
1000e46a:	d053      	beq.n	1000e514 <__aeabi_ddiv+0x108>
1000e46c:	465a      	mov	r2, fp
1000e46e:	00d1      	lsls	r1, r2, #3
1000e470:	2280      	movs	r2, #128	; 0x80
1000e472:	0f40      	lsrs	r0, r0, #29
1000e474:	0412      	lsls	r2, r2, #16
1000e476:	4302      	orrs	r2, r0
1000e478:	430a      	orrs	r2, r1
1000e47a:	4693      	mov	fp, r2
1000e47c:	4652      	mov	r2, sl
1000e47e:	00d1      	lsls	r1, r2, #3
1000e480:	4a5c      	ldr	r2, [pc, #368]	; (1000e5f4 <__aeabi_ddiv+0x1e8>)
1000e482:	4694      	mov	ip, r2
1000e484:	2200      	movs	r2, #0
1000e486:	4463      	add	r3, ip
1000e488:	0038      	movs	r0, r7
1000e48a:	4068      	eors	r0, r5
1000e48c:	4684      	mov	ip, r0
1000e48e:	9002      	str	r0, [sp, #8]
1000e490:	1ae4      	subs	r4, r4, r3
1000e492:	4316      	orrs	r6, r2
1000e494:	2e0f      	cmp	r6, #15
1000e496:	d900      	bls.n	1000e49a <__aeabi_ddiv+0x8e>
1000e498:	e0b4      	b.n	1000e604 <__aeabi_ddiv+0x1f8>
1000e49a:	4b57      	ldr	r3, [pc, #348]	; (1000e5f8 <__aeabi_ddiv+0x1ec>)
1000e49c:	00b6      	lsls	r6, r6, #2
1000e49e:	599b      	ldr	r3, [r3, r6]
1000e4a0:	469f      	mov	pc, r3
1000e4a2:	0003      	movs	r3, r0
1000e4a4:	4333      	orrs	r3, r6
1000e4a6:	4699      	mov	r9, r3
1000e4a8:	d16c      	bne.n	1000e584 <__aeabi_ddiv+0x178>
1000e4aa:	2300      	movs	r3, #0
1000e4ac:	4698      	mov	r8, r3
1000e4ae:	3302      	adds	r3, #2
1000e4b0:	2608      	movs	r6, #8
1000e4b2:	9303      	str	r3, [sp, #12]
1000e4b4:	e7ce      	b.n	1000e454 <__aeabi_ddiv+0x48>
1000e4b6:	46cb      	mov	fp, r9
1000e4b8:	4641      	mov	r1, r8
1000e4ba:	9a03      	ldr	r2, [sp, #12]
1000e4bc:	9701      	str	r7, [sp, #4]
1000e4be:	2a02      	cmp	r2, #2
1000e4c0:	d165      	bne.n	1000e58e <__aeabi_ddiv+0x182>
1000e4c2:	9b01      	ldr	r3, [sp, #4]
1000e4c4:	4c4a      	ldr	r4, [pc, #296]	; (1000e5f0 <__aeabi_ddiv+0x1e4>)
1000e4c6:	469c      	mov	ip, r3
1000e4c8:	2300      	movs	r3, #0
1000e4ca:	2200      	movs	r2, #0
1000e4cc:	4698      	mov	r8, r3
1000e4ce:	e06b      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e4d0:	0003      	movs	r3, r0
1000e4d2:	4333      	orrs	r3, r6
1000e4d4:	4699      	mov	r9, r3
1000e4d6:	d04e      	beq.n	1000e576 <__aeabi_ddiv+0x16a>
1000e4d8:	2e00      	cmp	r6, #0
1000e4da:	d100      	bne.n	1000e4de <__aeabi_ddiv+0xd2>
1000e4dc:	e1bc      	b.n	1000e858 <__aeabi_ddiv+0x44c>
1000e4de:	0030      	movs	r0, r6
1000e4e0:	f000 fce6 	bl	1000eeb0 <__clzsi2>
1000e4e4:	0003      	movs	r3, r0
1000e4e6:	3b0b      	subs	r3, #11
1000e4e8:	2b1c      	cmp	r3, #28
1000e4ea:	dd00      	ble.n	1000e4ee <__aeabi_ddiv+0xe2>
1000e4ec:	e1ac      	b.n	1000e848 <__aeabi_ddiv+0x43c>
1000e4ee:	221d      	movs	r2, #29
1000e4f0:	1ad3      	subs	r3, r2, r3
1000e4f2:	465a      	mov	r2, fp
1000e4f4:	0001      	movs	r1, r0
1000e4f6:	40da      	lsrs	r2, r3
1000e4f8:	3908      	subs	r1, #8
1000e4fa:	408e      	lsls	r6, r1
1000e4fc:	0013      	movs	r3, r2
1000e4fe:	4333      	orrs	r3, r6
1000e500:	4699      	mov	r9, r3
1000e502:	465b      	mov	r3, fp
1000e504:	408b      	lsls	r3, r1
1000e506:	4698      	mov	r8, r3
1000e508:	2300      	movs	r3, #0
1000e50a:	4c3c      	ldr	r4, [pc, #240]	; (1000e5fc <__aeabi_ddiv+0x1f0>)
1000e50c:	2600      	movs	r6, #0
1000e50e:	1a24      	subs	r4, r4, r0
1000e510:	9303      	str	r3, [sp, #12]
1000e512:	e79f      	b.n	1000e454 <__aeabi_ddiv+0x48>
1000e514:	4651      	mov	r1, sl
1000e516:	465a      	mov	r2, fp
1000e518:	4311      	orrs	r1, r2
1000e51a:	d129      	bne.n	1000e570 <__aeabi_ddiv+0x164>
1000e51c:	2200      	movs	r2, #0
1000e51e:	4693      	mov	fp, r2
1000e520:	3202      	adds	r2, #2
1000e522:	e7b1      	b.n	1000e488 <__aeabi_ddiv+0x7c>
1000e524:	4659      	mov	r1, fp
1000e526:	4301      	orrs	r1, r0
1000e528:	d01e      	beq.n	1000e568 <__aeabi_ddiv+0x15c>
1000e52a:	465b      	mov	r3, fp
1000e52c:	2b00      	cmp	r3, #0
1000e52e:	d100      	bne.n	1000e532 <__aeabi_ddiv+0x126>
1000e530:	e19e      	b.n	1000e870 <__aeabi_ddiv+0x464>
1000e532:	4658      	mov	r0, fp
1000e534:	f000 fcbc 	bl	1000eeb0 <__clzsi2>
1000e538:	0003      	movs	r3, r0
1000e53a:	3b0b      	subs	r3, #11
1000e53c:	2b1c      	cmp	r3, #28
1000e53e:	dd00      	ble.n	1000e542 <__aeabi_ddiv+0x136>
1000e540:	e18f      	b.n	1000e862 <__aeabi_ddiv+0x456>
1000e542:	0002      	movs	r2, r0
1000e544:	4659      	mov	r1, fp
1000e546:	3a08      	subs	r2, #8
1000e548:	4091      	lsls	r1, r2
1000e54a:	468b      	mov	fp, r1
1000e54c:	211d      	movs	r1, #29
1000e54e:	1acb      	subs	r3, r1, r3
1000e550:	4651      	mov	r1, sl
1000e552:	40d9      	lsrs	r1, r3
1000e554:	000b      	movs	r3, r1
1000e556:	4659      	mov	r1, fp
1000e558:	430b      	orrs	r3, r1
1000e55a:	4651      	mov	r1, sl
1000e55c:	469b      	mov	fp, r3
1000e55e:	4091      	lsls	r1, r2
1000e560:	4b26      	ldr	r3, [pc, #152]	; (1000e5fc <__aeabi_ddiv+0x1f0>)
1000e562:	2200      	movs	r2, #0
1000e564:	1a1b      	subs	r3, r3, r0
1000e566:	e78f      	b.n	1000e488 <__aeabi_ddiv+0x7c>
1000e568:	2300      	movs	r3, #0
1000e56a:	2201      	movs	r2, #1
1000e56c:	469b      	mov	fp, r3
1000e56e:	e78b      	b.n	1000e488 <__aeabi_ddiv+0x7c>
1000e570:	4651      	mov	r1, sl
1000e572:	2203      	movs	r2, #3
1000e574:	e788      	b.n	1000e488 <__aeabi_ddiv+0x7c>
1000e576:	2300      	movs	r3, #0
1000e578:	4698      	mov	r8, r3
1000e57a:	3301      	adds	r3, #1
1000e57c:	2604      	movs	r6, #4
1000e57e:	2400      	movs	r4, #0
1000e580:	9303      	str	r3, [sp, #12]
1000e582:	e767      	b.n	1000e454 <__aeabi_ddiv+0x48>
1000e584:	2303      	movs	r3, #3
1000e586:	46b1      	mov	r9, r6
1000e588:	9303      	str	r3, [sp, #12]
1000e58a:	260c      	movs	r6, #12
1000e58c:	e762      	b.n	1000e454 <__aeabi_ddiv+0x48>
1000e58e:	2a03      	cmp	r2, #3
1000e590:	d100      	bne.n	1000e594 <__aeabi_ddiv+0x188>
1000e592:	e25c      	b.n	1000ea4e <__aeabi_ddiv+0x642>
1000e594:	9b01      	ldr	r3, [sp, #4]
1000e596:	2a01      	cmp	r2, #1
1000e598:	d000      	beq.n	1000e59c <__aeabi_ddiv+0x190>
1000e59a:	e1e4      	b.n	1000e966 <__aeabi_ddiv+0x55a>
1000e59c:	4013      	ands	r3, r2
1000e59e:	469c      	mov	ip, r3
1000e5a0:	2300      	movs	r3, #0
1000e5a2:	2400      	movs	r4, #0
1000e5a4:	2200      	movs	r2, #0
1000e5a6:	4698      	mov	r8, r3
1000e5a8:	2100      	movs	r1, #0
1000e5aa:	0312      	lsls	r2, r2, #12
1000e5ac:	0b13      	lsrs	r3, r2, #12
1000e5ae:	0d0a      	lsrs	r2, r1, #20
1000e5b0:	0512      	lsls	r2, r2, #20
1000e5b2:	431a      	orrs	r2, r3
1000e5b4:	0523      	lsls	r3, r4, #20
1000e5b6:	4c12      	ldr	r4, [pc, #72]	; (1000e600 <__aeabi_ddiv+0x1f4>)
1000e5b8:	4640      	mov	r0, r8
1000e5ba:	4022      	ands	r2, r4
1000e5bc:	4313      	orrs	r3, r2
1000e5be:	4662      	mov	r2, ip
1000e5c0:	005b      	lsls	r3, r3, #1
1000e5c2:	07d2      	lsls	r2, r2, #31
1000e5c4:	085b      	lsrs	r3, r3, #1
1000e5c6:	4313      	orrs	r3, r2
1000e5c8:	0019      	movs	r1, r3
1000e5ca:	b007      	add	sp, #28
1000e5cc:	bc3c      	pop	{r2, r3, r4, r5}
1000e5ce:	4690      	mov	r8, r2
1000e5d0:	4699      	mov	r9, r3
1000e5d2:	46a2      	mov	sl, r4
1000e5d4:	46ab      	mov	fp, r5
1000e5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5d8:	2300      	movs	r3, #0
1000e5da:	2280      	movs	r2, #128	; 0x80
1000e5dc:	469c      	mov	ip, r3
1000e5de:	0312      	lsls	r2, r2, #12
1000e5e0:	4698      	mov	r8, r3
1000e5e2:	4c03      	ldr	r4, [pc, #12]	; (1000e5f0 <__aeabi_ddiv+0x1e4>)
1000e5e4:	e7e0      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e5e6:	2300      	movs	r3, #0
1000e5e8:	4c01      	ldr	r4, [pc, #4]	; (1000e5f0 <__aeabi_ddiv+0x1e4>)
1000e5ea:	2200      	movs	r2, #0
1000e5ec:	4698      	mov	r8, r3
1000e5ee:	e7db      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e5f0:	000007ff 	.word	0x000007ff
1000e5f4:	fffffc01 	.word	0xfffffc01
1000e5f8:	10010af8 	.word	0x10010af8
1000e5fc:	fffffc0d 	.word	0xfffffc0d
1000e600:	800fffff 	.word	0x800fffff
1000e604:	45d9      	cmp	r9, fp
1000e606:	d900      	bls.n	1000e60a <__aeabi_ddiv+0x1fe>
1000e608:	e139      	b.n	1000e87e <__aeabi_ddiv+0x472>
1000e60a:	d100      	bne.n	1000e60e <__aeabi_ddiv+0x202>
1000e60c:	e134      	b.n	1000e878 <__aeabi_ddiv+0x46c>
1000e60e:	2300      	movs	r3, #0
1000e610:	4646      	mov	r6, r8
1000e612:	464d      	mov	r5, r9
1000e614:	469a      	mov	sl, r3
1000e616:	3c01      	subs	r4, #1
1000e618:	465b      	mov	r3, fp
1000e61a:	0e0a      	lsrs	r2, r1, #24
1000e61c:	021b      	lsls	r3, r3, #8
1000e61e:	431a      	orrs	r2, r3
1000e620:	020b      	lsls	r3, r1, #8
1000e622:	0c17      	lsrs	r7, r2, #16
1000e624:	9303      	str	r3, [sp, #12]
1000e626:	0413      	lsls	r3, r2, #16
1000e628:	0c1b      	lsrs	r3, r3, #16
1000e62a:	0039      	movs	r1, r7
1000e62c:	0028      	movs	r0, r5
1000e62e:	4690      	mov	r8, r2
1000e630:	9301      	str	r3, [sp, #4]
1000e632:	f7ff f81f 	bl	1000d674 <__udivsi3>
1000e636:	0002      	movs	r2, r0
1000e638:	9b01      	ldr	r3, [sp, #4]
1000e63a:	4683      	mov	fp, r0
1000e63c:	435a      	muls	r2, r3
1000e63e:	0028      	movs	r0, r5
1000e640:	0039      	movs	r1, r7
1000e642:	4691      	mov	r9, r2
1000e644:	f7ff f89c 	bl	1000d780 <__aeabi_uidivmod>
1000e648:	0c35      	lsrs	r5, r6, #16
1000e64a:	0409      	lsls	r1, r1, #16
1000e64c:	430d      	orrs	r5, r1
1000e64e:	45a9      	cmp	r9, r5
1000e650:	d90d      	bls.n	1000e66e <__aeabi_ddiv+0x262>
1000e652:	465b      	mov	r3, fp
1000e654:	4445      	add	r5, r8
1000e656:	3b01      	subs	r3, #1
1000e658:	45a8      	cmp	r8, r5
1000e65a:	d900      	bls.n	1000e65e <__aeabi_ddiv+0x252>
1000e65c:	e13a      	b.n	1000e8d4 <__aeabi_ddiv+0x4c8>
1000e65e:	45a9      	cmp	r9, r5
1000e660:	d800      	bhi.n	1000e664 <__aeabi_ddiv+0x258>
1000e662:	e137      	b.n	1000e8d4 <__aeabi_ddiv+0x4c8>
1000e664:	2302      	movs	r3, #2
1000e666:	425b      	negs	r3, r3
1000e668:	469c      	mov	ip, r3
1000e66a:	4445      	add	r5, r8
1000e66c:	44e3      	add	fp, ip
1000e66e:	464b      	mov	r3, r9
1000e670:	1aeb      	subs	r3, r5, r3
1000e672:	0039      	movs	r1, r7
1000e674:	0018      	movs	r0, r3
1000e676:	9304      	str	r3, [sp, #16]
1000e678:	f7fe fffc 	bl	1000d674 <__udivsi3>
1000e67c:	9b01      	ldr	r3, [sp, #4]
1000e67e:	0005      	movs	r5, r0
1000e680:	4343      	muls	r3, r0
1000e682:	0039      	movs	r1, r7
1000e684:	9804      	ldr	r0, [sp, #16]
1000e686:	4699      	mov	r9, r3
1000e688:	f7ff f87a 	bl	1000d780 <__aeabi_uidivmod>
1000e68c:	0433      	lsls	r3, r6, #16
1000e68e:	0409      	lsls	r1, r1, #16
1000e690:	0c1b      	lsrs	r3, r3, #16
1000e692:	430b      	orrs	r3, r1
1000e694:	4599      	cmp	r9, r3
1000e696:	d909      	bls.n	1000e6ac <__aeabi_ddiv+0x2a0>
1000e698:	4443      	add	r3, r8
1000e69a:	1e6a      	subs	r2, r5, #1
1000e69c:	4598      	cmp	r8, r3
1000e69e:	d900      	bls.n	1000e6a2 <__aeabi_ddiv+0x296>
1000e6a0:	e11a      	b.n	1000e8d8 <__aeabi_ddiv+0x4cc>
1000e6a2:	4599      	cmp	r9, r3
1000e6a4:	d800      	bhi.n	1000e6a8 <__aeabi_ddiv+0x29c>
1000e6a6:	e117      	b.n	1000e8d8 <__aeabi_ddiv+0x4cc>
1000e6a8:	3d02      	subs	r5, #2
1000e6aa:	4443      	add	r3, r8
1000e6ac:	464a      	mov	r2, r9
1000e6ae:	1a9b      	subs	r3, r3, r2
1000e6b0:	465a      	mov	r2, fp
1000e6b2:	0412      	lsls	r2, r2, #16
1000e6b4:	432a      	orrs	r2, r5
1000e6b6:	9903      	ldr	r1, [sp, #12]
1000e6b8:	4693      	mov	fp, r2
1000e6ba:	0c10      	lsrs	r0, r2, #16
1000e6bc:	0c0a      	lsrs	r2, r1, #16
1000e6be:	4691      	mov	r9, r2
1000e6c0:	0409      	lsls	r1, r1, #16
1000e6c2:	465a      	mov	r2, fp
1000e6c4:	0c09      	lsrs	r1, r1, #16
1000e6c6:	464e      	mov	r6, r9
1000e6c8:	000d      	movs	r5, r1
1000e6ca:	0412      	lsls	r2, r2, #16
1000e6cc:	0c12      	lsrs	r2, r2, #16
1000e6ce:	4345      	muls	r5, r0
1000e6d0:	9105      	str	r1, [sp, #20]
1000e6d2:	4351      	muls	r1, r2
1000e6d4:	4372      	muls	r2, r6
1000e6d6:	4370      	muls	r0, r6
1000e6d8:	1952      	adds	r2, r2, r5
1000e6da:	0c0e      	lsrs	r6, r1, #16
1000e6dc:	18b2      	adds	r2, r6, r2
1000e6de:	4295      	cmp	r5, r2
1000e6e0:	d903      	bls.n	1000e6ea <__aeabi_ddiv+0x2de>
1000e6e2:	2580      	movs	r5, #128	; 0x80
1000e6e4:	026d      	lsls	r5, r5, #9
1000e6e6:	46ac      	mov	ip, r5
1000e6e8:	4460      	add	r0, ip
1000e6ea:	0c15      	lsrs	r5, r2, #16
1000e6ec:	0409      	lsls	r1, r1, #16
1000e6ee:	0412      	lsls	r2, r2, #16
1000e6f0:	0c09      	lsrs	r1, r1, #16
1000e6f2:	1828      	adds	r0, r5, r0
1000e6f4:	1852      	adds	r2, r2, r1
1000e6f6:	4283      	cmp	r3, r0
1000e6f8:	d200      	bcs.n	1000e6fc <__aeabi_ddiv+0x2f0>
1000e6fa:	e0ce      	b.n	1000e89a <__aeabi_ddiv+0x48e>
1000e6fc:	d100      	bne.n	1000e700 <__aeabi_ddiv+0x2f4>
1000e6fe:	e0c8      	b.n	1000e892 <__aeabi_ddiv+0x486>
1000e700:	1a1d      	subs	r5, r3, r0
1000e702:	4653      	mov	r3, sl
1000e704:	1a9e      	subs	r6, r3, r2
1000e706:	45b2      	cmp	sl, r6
1000e708:	4192      	sbcs	r2, r2
1000e70a:	4252      	negs	r2, r2
1000e70c:	1aab      	subs	r3, r5, r2
1000e70e:	469a      	mov	sl, r3
1000e710:	4598      	cmp	r8, r3
1000e712:	d100      	bne.n	1000e716 <__aeabi_ddiv+0x30a>
1000e714:	e117      	b.n	1000e946 <__aeabi_ddiv+0x53a>
1000e716:	0039      	movs	r1, r7
1000e718:	0018      	movs	r0, r3
1000e71a:	f7fe ffab 	bl	1000d674 <__udivsi3>
1000e71e:	9b01      	ldr	r3, [sp, #4]
1000e720:	0005      	movs	r5, r0
1000e722:	4343      	muls	r3, r0
1000e724:	0039      	movs	r1, r7
1000e726:	4650      	mov	r0, sl
1000e728:	9304      	str	r3, [sp, #16]
1000e72a:	f7ff f829 	bl	1000d780 <__aeabi_uidivmod>
1000e72e:	9804      	ldr	r0, [sp, #16]
1000e730:	040b      	lsls	r3, r1, #16
1000e732:	0c31      	lsrs	r1, r6, #16
1000e734:	4319      	orrs	r1, r3
1000e736:	4288      	cmp	r0, r1
1000e738:	d909      	bls.n	1000e74e <__aeabi_ddiv+0x342>
1000e73a:	4441      	add	r1, r8
1000e73c:	1e6b      	subs	r3, r5, #1
1000e73e:	4588      	cmp	r8, r1
1000e740:	d900      	bls.n	1000e744 <__aeabi_ddiv+0x338>
1000e742:	e107      	b.n	1000e954 <__aeabi_ddiv+0x548>
1000e744:	4288      	cmp	r0, r1
1000e746:	d800      	bhi.n	1000e74a <__aeabi_ddiv+0x33e>
1000e748:	e104      	b.n	1000e954 <__aeabi_ddiv+0x548>
1000e74a:	3d02      	subs	r5, #2
1000e74c:	4441      	add	r1, r8
1000e74e:	9b04      	ldr	r3, [sp, #16]
1000e750:	1acb      	subs	r3, r1, r3
1000e752:	0018      	movs	r0, r3
1000e754:	0039      	movs	r1, r7
1000e756:	9304      	str	r3, [sp, #16]
1000e758:	f7fe ff8c 	bl	1000d674 <__udivsi3>
1000e75c:	9b01      	ldr	r3, [sp, #4]
1000e75e:	4682      	mov	sl, r0
1000e760:	4343      	muls	r3, r0
1000e762:	0039      	movs	r1, r7
1000e764:	9804      	ldr	r0, [sp, #16]
1000e766:	9301      	str	r3, [sp, #4]
1000e768:	f7ff f80a 	bl	1000d780 <__aeabi_uidivmod>
1000e76c:	9801      	ldr	r0, [sp, #4]
1000e76e:	040b      	lsls	r3, r1, #16
1000e770:	0431      	lsls	r1, r6, #16
1000e772:	0c09      	lsrs	r1, r1, #16
1000e774:	4319      	orrs	r1, r3
1000e776:	4288      	cmp	r0, r1
1000e778:	d90d      	bls.n	1000e796 <__aeabi_ddiv+0x38a>
1000e77a:	4653      	mov	r3, sl
1000e77c:	4441      	add	r1, r8
1000e77e:	3b01      	subs	r3, #1
1000e780:	4588      	cmp	r8, r1
1000e782:	d900      	bls.n	1000e786 <__aeabi_ddiv+0x37a>
1000e784:	e0e8      	b.n	1000e958 <__aeabi_ddiv+0x54c>
1000e786:	4288      	cmp	r0, r1
1000e788:	d800      	bhi.n	1000e78c <__aeabi_ddiv+0x380>
1000e78a:	e0e5      	b.n	1000e958 <__aeabi_ddiv+0x54c>
1000e78c:	2302      	movs	r3, #2
1000e78e:	425b      	negs	r3, r3
1000e790:	469c      	mov	ip, r3
1000e792:	4441      	add	r1, r8
1000e794:	44e2      	add	sl, ip
1000e796:	9b01      	ldr	r3, [sp, #4]
1000e798:	042d      	lsls	r5, r5, #16
1000e79a:	1ace      	subs	r6, r1, r3
1000e79c:	4651      	mov	r1, sl
1000e79e:	4329      	orrs	r1, r5
1000e7a0:	9d05      	ldr	r5, [sp, #20]
1000e7a2:	464f      	mov	r7, r9
1000e7a4:	002a      	movs	r2, r5
1000e7a6:	040b      	lsls	r3, r1, #16
1000e7a8:	0c08      	lsrs	r0, r1, #16
1000e7aa:	0c1b      	lsrs	r3, r3, #16
1000e7ac:	435a      	muls	r2, r3
1000e7ae:	4345      	muls	r5, r0
1000e7b0:	437b      	muls	r3, r7
1000e7b2:	4378      	muls	r0, r7
1000e7b4:	195b      	adds	r3, r3, r5
1000e7b6:	0c17      	lsrs	r7, r2, #16
1000e7b8:	18fb      	adds	r3, r7, r3
1000e7ba:	429d      	cmp	r5, r3
1000e7bc:	d903      	bls.n	1000e7c6 <__aeabi_ddiv+0x3ba>
1000e7be:	2580      	movs	r5, #128	; 0x80
1000e7c0:	026d      	lsls	r5, r5, #9
1000e7c2:	46ac      	mov	ip, r5
1000e7c4:	4460      	add	r0, ip
1000e7c6:	0c1d      	lsrs	r5, r3, #16
1000e7c8:	0412      	lsls	r2, r2, #16
1000e7ca:	041b      	lsls	r3, r3, #16
1000e7cc:	0c12      	lsrs	r2, r2, #16
1000e7ce:	1828      	adds	r0, r5, r0
1000e7d0:	189b      	adds	r3, r3, r2
1000e7d2:	4286      	cmp	r6, r0
1000e7d4:	d200      	bcs.n	1000e7d8 <__aeabi_ddiv+0x3cc>
1000e7d6:	e093      	b.n	1000e900 <__aeabi_ddiv+0x4f4>
1000e7d8:	d100      	bne.n	1000e7dc <__aeabi_ddiv+0x3d0>
1000e7da:	e08e      	b.n	1000e8fa <__aeabi_ddiv+0x4ee>
1000e7dc:	2301      	movs	r3, #1
1000e7de:	4319      	orrs	r1, r3
1000e7e0:	4ba0      	ldr	r3, [pc, #640]	; (1000ea64 <__aeabi_ddiv+0x658>)
1000e7e2:	18e3      	adds	r3, r4, r3
1000e7e4:	2b00      	cmp	r3, #0
1000e7e6:	dc00      	bgt.n	1000e7ea <__aeabi_ddiv+0x3de>
1000e7e8:	e099      	b.n	1000e91e <__aeabi_ddiv+0x512>
1000e7ea:	074a      	lsls	r2, r1, #29
1000e7ec:	d000      	beq.n	1000e7f0 <__aeabi_ddiv+0x3e4>
1000e7ee:	e09e      	b.n	1000e92e <__aeabi_ddiv+0x522>
1000e7f0:	465a      	mov	r2, fp
1000e7f2:	01d2      	lsls	r2, r2, #7
1000e7f4:	d506      	bpl.n	1000e804 <__aeabi_ddiv+0x3f8>
1000e7f6:	465a      	mov	r2, fp
1000e7f8:	4b9b      	ldr	r3, [pc, #620]	; (1000ea68 <__aeabi_ddiv+0x65c>)
1000e7fa:	401a      	ands	r2, r3
1000e7fc:	2380      	movs	r3, #128	; 0x80
1000e7fe:	4693      	mov	fp, r2
1000e800:	00db      	lsls	r3, r3, #3
1000e802:	18e3      	adds	r3, r4, r3
1000e804:	4a99      	ldr	r2, [pc, #612]	; (1000ea6c <__aeabi_ddiv+0x660>)
1000e806:	4293      	cmp	r3, r2
1000e808:	dd68      	ble.n	1000e8dc <__aeabi_ddiv+0x4d0>
1000e80a:	2301      	movs	r3, #1
1000e80c:	9a02      	ldr	r2, [sp, #8]
1000e80e:	4c98      	ldr	r4, [pc, #608]	; (1000ea70 <__aeabi_ddiv+0x664>)
1000e810:	401a      	ands	r2, r3
1000e812:	2300      	movs	r3, #0
1000e814:	4694      	mov	ip, r2
1000e816:	4698      	mov	r8, r3
1000e818:	2200      	movs	r2, #0
1000e81a:	e6c5      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e81c:	2280      	movs	r2, #128	; 0x80
1000e81e:	464b      	mov	r3, r9
1000e820:	0312      	lsls	r2, r2, #12
1000e822:	4213      	tst	r3, r2
1000e824:	d00a      	beq.n	1000e83c <__aeabi_ddiv+0x430>
1000e826:	465b      	mov	r3, fp
1000e828:	4213      	tst	r3, r2
1000e82a:	d106      	bne.n	1000e83a <__aeabi_ddiv+0x42e>
1000e82c:	431a      	orrs	r2, r3
1000e82e:	0312      	lsls	r2, r2, #12
1000e830:	0b12      	lsrs	r2, r2, #12
1000e832:	46ac      	mov	ip, r5
1000e834:	4688      	mov	r8, r1
1000e836:	4c8e      	ldr	r4, [pc, #568]	; (1000ea70 <__aeabi_ddiv+0x664>)
1000e838:	e6b6      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e83a:	464b      	mov	r3, r9
1000e83c:	431a      	orrs	r2, r3
1000e83e:	0312      	lsls	r2, r2, #12
1000e840:	0b12      	lsrs	r2, r2, #12
1000e842:	46bc      	mov	ip, r7
1000e844:	4c8a      	ldr	r4, [pc, #552]	; (1000ea70 <__aeabi_ddiv+0x664>)
1000e846:	e6af      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e848:	0003      	movs	r3, r0
1000e84a:	465a      	mov	r2, fp
1000e84c:	3b28      	subs	r3, #40	; 0x28
1000e84e:	409a      	lsls	r2, r3
1000e850:	2300      	movs	r3, #0
1000e852:	4691      	mov	r9, r2
1000e854:	4698      	mov	r8, r3
1000e856:	e657      	b.n	1000e508 <__aeabi_ddiv+0xfc>
1000e858:	4658      	mov	r0, fp
1000e85a:	f000 fb29 	bl	1000eeb0 <__clzsi2>
1000e85e:	3020      	adds	r0, #32
1000e860:	e640      	b.n	1000e4e4 <__aeabi_ddiv+0xd8>
1000e862:	0003      	movs	r3, r0
1000e864:	4652      	mov	r2, sl
1000e866:	3b28      	subs	r3, #40	; 0x28
1000e868:	409a      	lsls	r2, r3
1000e86a:	2100      	movs	r1, #0
1000e86c:	4693      	mov	fp, r2
1000e86e:	e677      	b.n	1000e560 <__aeabi_ddiv+0x154>
1000e870:	f000 fb1e 	bl	1000eeb0 <__clzsi2>
1000e874:	3020      	adds	r0, #32
1000e876:	e65f      	b.n	1000e538 <__aeabi_ddiv+0x12c>
1000e878:	4588      	cmp	r8, r1
1000e87a:	d200      	bcs.n	1000e87e <__aeabi_ddiv+0x472>
1000e87c:	e6c7      	b.n	1000e60e <__aeabi_ddiv+0x202>
1000e87e:	464b      	mov	r3, r9
1000e880:	07de      	lsls	r6, r3, #31
1000e882:	085d      	lsrs	r5, r3, #1
1000e884:	4643      	mov	r3, r8
1000e886:	085b      	lsrs	r3, r3, #1
1000e888:	431e      	orrs	r6, r3
1000e88a:	4643      	mov	r3, r8
1000e88c:	07db      	lsls	r3, r3, #31
1000e88e:	469a      	mov	sl, r3
1000e890:	e6c2      	b.n	1000e618 <__aeabi_ddiv+0x20c>
1000e892:	2500      	movs	r5, #0
1000e894:	4592      	cmp	sl, r2
1000e896:	d300      	bcc.n	1000e89a <__aeabi_ddiv+0x48e>
1000e898:	e733      	b.n	1000e702 <__aeabi_ddiv+0x2f6>
1000e89a:	9e03      	ldr	r6, [sp, #12]
1000e89c:	4659      	mov	r1, fp
1000e89e:	46b4      	mov	ip, r6
1000e8a0:	44e2      	add	sl, ip
1000e8a2:	45b2      	cmp	sl, r6
1000e8a4:	41ad      	sbcs	r5, r5
1000e8a6:	426d      	negs	r5, r5
1000e8a8:	4445      	add	r5, r8
1000e8aa:	18eb      	adds	r3, r5, r3
1000e8ac:	3901      	subs	r1, #1
1000e8ae:	4598      	cmp	r8, r3
1000e8b0:	d207      	bcs.n	1000e8c2 <__aeabi_ddiv+0x4b6>
1000e8b2:	4298      	cmp	r0, r3
1000e8b4:	d900      	bls.n	1000e8b8 <__aeabi_ddiv+0x4ac>
1000e8b6:	e07f      	b.n	1000e9b8 <__aeabi_ddiv+0x5ac>
1000e8b8:	d100      	bne.n	1000e8bc <__aeabi_ddiv+0x4b0>
1000e8ba:	e0bc      	b.n	1000ea36 <__aeabi_ddiv+0x62a>
1000e8bc:	1a1d      	subs	r5, r3, r0
1000e8be:	468b      	mov	fp, r1
1000e8c0:	e71f      	b.n	1000e702 <__aeabi_ddiv+0x2f6>
1000e8c2:	4598      	cmp	r8, r3
1000e8c4:	d1fa      	bne.n	1000e8bc <__aeabi_ddiv+0x4b0>
1000e8c6:	9d03      	ldr	r5, [sp, #12]
1000e8c8:	4555      	cmp	r5, sl
1000e8ca:	d9f2      	bls.n	1000e8b2 <__aeabi_ddiv+0x4a6>
1000e8cc:	4643      	mov	r3, r8
1000e8ce:	468b      	mov	fp, r1
1000e8d0:	1a1d      	subs	r5, r3, r0
1000e8d2:	e716      	b.n	1000e702 <__aeabi_ddiv+0x2f6>
1000e8d4:	469b      	mov	fp, r3
1000e8d6:	e6ca      	b.n	1000e66e <__aeabi_ddiv+0x262>
1000e8d8:	0015      	movs	r5, r2
1000e8da:	e6e7      	b.n	1000e6ac <__aeabi_ddiv+0x2a0>
1000e8dc:	465a      	mov	r2, fp
1000e8de:	08c9      	lsrs	r1, r1, #3
1000e8e0:	0752      	lsls	r2, r2, #29
1000e8e2:	430a      	orrs	r2, r1
1000e8e4:	055b      	lsls	r3, r3, #21
1000e8e6:	4690      	mov	r8, r2
1000e8e8:	0d5c      	lsrs	r4, r3, #21
1000e8ea:	465a      	mov	r2, fp
1000e8ec:	2301      	movs	r3, #1
1000e8ee:	9902      	ldr	r1, [sp, #8]
1000e8f0:	0252      	lsls	r2, r2, #9
1000e8f2:	4019      	ands	r1, r3
1000e8f4:	0b12      	lsrs	r2, r2, #12
1000e8f6:	468c      	mov	ip, r1
1000e8f8:	e656      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e8fa:	2b00      	cmp	r3, #0
1000e8fc:	d100      	bne.n	1000e900 <__aeabi_ddiv+0x4f4>
1000e8fe:	e76f      	b.n	1000e7e0 <__aeabi_ddiv+0x3d4>
1000e900:	4446      	add	r6, r8
1000e902:	1e4a      	subs	r2, r1, #1
1000e904:	45b0      	cmp	r8, r6
1000e906:	d929      	bls.n	1000e95c <__aeabi_ddiv+0x550>
1000e908:	0011      	movs	r1, r2
1000e90a:	4286      	cmp	r6, r0
1000e90c:	d000      	beq.n	1000e910 <__aeabi_ddiv+0x504>
1000e90e:	e765      	b.n	1000e7dc <__aeabi_ddiv+0x3d0>
1000e910:	9a03      	ldr	r2, [sp, #12]
1000e912:	4293      	cmp	r3, r2
1000e914:	d000      	beq.n	1000e918 <__aeabi_ddiv+0x50c>
1000e916:	e761      	b.n	1000e7dc <__aeabi_ddiv+0x3d0>
1000e918:	e762      	b.n	1000e7e0 <__aeabi_ddiv+0x3d4>
1000e91a:	2101      	movs	r1, #1
1000e91c:	4249      	negs	r1, r1
1000e91e:	2001      	movs	r0, #1
1000e920:	1ac2      	subs	r2, r0, r3
1000e922:	2a38      	cmp	r2, #56	; 0x38
1000e924:	dd21      	ble.n	1000e96a <__aeabi_ddiv+0x55e>
1000e926:	9b02      	ldr	r3, [sp, #8]
1000e928:	4003      	ands	r3, r0
1000e92a:	469c      	mov	ip, r3
1000e92c:	e638      	b.n	1000e5a0 <__aeabi_ddiv+0x194>
1000e92e:	220f      	movs	r2, #15
1000e930:	400a      	ands	r2, r1
1000e932:	2a04      	cmp	r2, #4
1000e934:	d100      	bne.n	1000e938 <__aeabi_ddiv+0x52c>
1000e936:	e75b      	b.n	1000e7f0 <__aeabi_ddiv+0x3e4>
1000e938:	000a      	movs	r2, r1
1000e93a:	1d11      	adds	r1, r2, #4
1000e93c:	4291      	cmp	r1, r2
1000e93e:	4192      	sbcs	r2, r2
1000e940:	4252      	negs	r2, r2
1000e942:	4493      	add	fp, r2
1000e944:	e754      	b.n	1000e7f0 <__aeabi_ddiv+0x3e4>
1000e946:	4b47      	ldr	r3, [pc, #284]	; (1000ea64 <__aeabi_ddiv+0x658>)
1000e948:	18e3      	adds	r3, r4, r3
1000e94a:	2b00      	cmp	r3, #0
1000e94c:	dde5      	ble.n	1000e91a <__aeabi_ddiv+0x50e>
1000e94e:	2201      	movs	r2, #1
1000e950:	4252      	negs	r2, r2
1000e952:	e7f2      	b.n	1000e93a <__aeabi_ddiv+0x52e>
1000e954:	001d      	movs	r5, r3
1000e956:	e6fa      	b.n	1000e74e <__aeabi_ddiv+0x342>
1000e958:	469a      	mov	sl, r3
1000e95a:	e71c      	b.n	1000e796 <__aeabi_ddiv+0x38a>
1000e95c:	42b0      	cmp	r0, r6
1000e95e:	d839      	bhi.n	1000e9d4 <__aeabi_ddiv+0x5c8>
1000e960:	d06e      	beq.n	1000ea40 <__aeabi_ddiv+0x634>
1000e962:	0011      	movs	r1, r2
1000e964:	e73a      	b.n	1000e7dc <__aeabi_ddiv+0x3d0>
1000e966:	9302      	str	r3, [sp, #8]
1000e968:	e73a      	b.n	1000e7e0 <__aeabi_ddiv+0x3d4>
1000e96a:	2a1f      	cmp	r2, #31
1000e96c:	dc3c      	bgt.n	1000e9e8 <__aeabi_ddiv+0x5dc>
1000e96e:	2320      	movs	r3, #32
1000e970:	1a9b      	subs	r3, r3, r2
1000e972:	000c      	movs	r4, r1
1000e974:	4658      	mov	r0, fp
1000e976:	4099      	lsls	r1, r3
1000e978:	4098      	lsls	r0, r3
1000e97a:	1e4b      	subs	r3, r1, #1
1000e97c:	4199      	sbcs	r1, r3
1000e97e:	465b      	mov	r3, fp
1000e980:	40d4      	lsrs	r4, r2
1000e982:	40d3      	lsrs	r3, r2
1000e984:	4320      	orrs	r0, r4
1000e986:	4308      	orrs	r0, r1
1000e988:	001a      	movs	r2, r3
1000e98a:	0743      	lsls	r3, r0, #29
1000e98c:	d009      	beq.n	1000e9a2 <__aeabi_ddiv+0x596>
1000e98e:	230f      	movs	r3, #15
1000e990:	4003      	ands	r3, r0
1000e992:	2b04      	cmp	r3, #4
1000e994:	d005      	beq.n	1000e9a2 <__aeabi_ddiv+0x596>
1000e996:	0001      	movs	r1, r0
1000e998:	1d08      	adds	r0, r1, #4
1000e99a:	4288      	cmp	r0, r1
1000e99c:	419b      	sbcs	r3, r3
1000e99e:	425b      	negs	r3, r3
1000e9a0:	18d2      	adds	r2, r2, r3
1000e9a2:	0213      	lsls	r3, r2, #8
1000e9a4:	d53a      	bpl.n	1000ea1c <__aeabi_ddiv+0x610>
1000e9a6:	2301      	movs	r3, #1
1000e9a8:	9a02      	ldr	r2, [sp, #8]
1000e9aa:	2401      	movs	r4, #1
1000e9ac:	401a      	ands	r2, r3
1000e9ae:	2300      	movs	r3, #0
1000e9b0:	4694      	mov	ip, r2
1000e9b2:	4698      	mov	r8, r3
1000e9b4:	2200      	movs	r2, #0
1000e9b6:	e5f7      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000e9b8:	2102      	movs	r1, #2
1000e9ba:	4249      	negs	r1, r1
1000e9bc:	468c      	mov	ip, r1
1000e9be:	9d03      	ldr	r5, [sp, #12]
1000e9c0:	44e3      	add	fp, ip
1000e9c2:	46ac      	mov	ip, r5
1000e9c4:	44e2      	add	sl, ip
1000e9c6:	45aa      	cmp	sl, r5
1000e9c8:	41ad      	sbcs	r5, r5
1000e9ca:	426d      	negs	r5, r5
1000e9cc:	4445      	add	r5, r8
1000e9ce:	18ed      	adds	r5, r5, r3
1000e9d0:	1a2d      	subs	r5, r5, r0
1000e9d2:	e696      	b.n	1000e702 <__aeabi_ddiv+0x2f6>
1000e9d4:	1e8a      	subs	r2, r1, #2
1000e9d6:	9903      	ldr	r1, [sp, #12]
1000e9d8:	004d      	lsls	r5, r1, #1
1000e9da:	428d      	cmp	r5, r1
1000e9dc:	4189      	sbcs	r1, r1
1000e9de:	4249      	negs	r1, r1
1000e9e0:	4441      	add	r1, r8
1000e9e2:	1876      	adds	r6, r6, r1
1000e9e4:	9503      	str	r5, [sp, #12]
1000e9e6:	e78f      	b.n	1000e908 <__aeabi_ddiv+0x4fc>
1000e9e8:	201f      	movs	r0, #31
1000e9ea:	4240      	negs	r0, r0
1000e9ec:	1ac3      	subs	r3, r0, r3
1000e9ee:	4658      	mov	r0, fp
1000e9f0:	40d8      	lsrs	r0, r3
1000e9f2:	0003      	movs	r3, r0
1000e9f4:	2a20      	cmp	r2, #32
1000e9f6:	d028      	beq.n	1000ea4a <__aeabi_ddiv+0x63e>
1000e9f8:	2040      	movs	r0, #64	; 0x40
1000e9fa:	465d      	mov	r5, fp
1000e9fc:	1a82      	subs	r2, r0, r2
1000e9fe:	4095      	lsls	r5, r2
1000ea00:	4329      	orrs	r1, r5
1000ea02:	1e4a      	subs	r2, r1, #1
1000ea04:	4191      	sbcs	r1, r2
1000ea06:	4319      	orrs	r1, r3
1000ea08:	2307      	movs	r3, #7
1000ea0a:	2200      	movs	r2, #0
1000ea0c:	400b      	ands	r3, r1
1000ea0e:	d009      	beq.n	1000ea24 <__aeabi_ddiv+0x618>
1000ea10:	230f      	movs	r3, #15
1000ea12:	2200      	movs	r2, #0
1000ea14:	400b      	ands	r3, r1
1000ea16:	0008      	movs	r0, r1
1000ea18:	2b04      	cmp	r3, #4
1000ea1a:	d1bd      	bne.n	1000e998 <__aeabi_ddiv+0x58c>
1000ea1c:	0001      	movs	r1, r0
1000ea1e:	0753      	lsls	r3, r2, #29
1000ea20:	0252      	lsls	r2, r2, #9
1000ea22:	0b12      	lsrs	r2, r2, #12
1000ea24:	08c9      	lsrs	r1, r1, #3
1000ea26:	4319      	orrs	r1, r3
1000ea28:	2301      	movs	r3, #1
1000ea2a:	4688      	mov	r8, r1
1000ea2c:	9902      	ldr	r1, [sp, #8]
1000ea2e:	2400      	movs	r4, #0
1000ea30:	4019      	ands	r1, r3
1000ea32:	468c      	mov	ip, r1
1000ea34:	e5b8      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000ea36:	4552      	cmp	r2, sl
1000ea38:	d8be      	bhi.n	1000e9b8 <__aeabi_ddiv+0x5ac>
1000ea3a:	468b      	mov	fp, r1
1000ea3c:	2500      	movs	r5, #0
1000ea3e:	e660      	b.n	1000e702 <__aeabi_ddiv+0x2f6>
1000ea40:	9d03      	ldr	r5, [sp, #12]
1000ea42:	429d      	cmp	r5, r3
1000ea44:	d3c6      	bcc.n	1000e9d4 <__aeabi_ddiv+0x5c8>
1000ea46:	0011      	movs	r1, r2
1000ea48:	e762      	b.n	1000e910 <__aeabi_ddiv+0x504>
1000ea4a:	2500      	movs	r5, #0
1000ea4c:	e7d8      	b.n	1000ea00 <__aeabi_ddiv+0x5f4>
1000ea4e:	2280      	movs	r2, #128	; 0x80
1000ea50:	465b      	mov	r3, fp
1000ea52:	0312      	lsls	r2, r2, #12
1000ea54:	431a      	orrs	r2, r3
1000ea56:	9b01      	ldr	r3, [sp, #4]
1000ea58:	0312      	lsls	r2, r2, #12
1000ea5a:	0b12      	lsrs	r2, r2, #12
1000ea5c:	469c      	mov	ip, r3
1000ea5e:	4688      	mov	r8, r1
1000ea60:	4c03      	ldr	r4, [pc, #12]	; (1000ea70 <__aeabi_ddiv+0x664>)
1000ea62:	e5a1      	b.n	1000e5a8 <__aeabi_ddiv+0x19c>
1000ea64:	000003ff 	.word	0x000003ff
1000ea68:	feffffff 	.word	0xfeffffff
1000ea6c:	000007fe 	.word	0x000007fe
1000ea70:	000007ff 	.word	0x000007ff

1000ea74 <__eqdf2>:
1000ea74:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ea76:	464f      	mov	r7, r9
1000ea78:	4646      	mov	r6, r8
1000ea7a:	46d6      	mov	lr, sl
1000ea7c:	005c      	lsls	r4, r3, #1
1000ea7e:	b5c0      	push	{r6, r7, lr}
1000ea80:	031f      	lsls	r7, r3, #12
1000ea82:	0fdb      	lsrs	r3, r3, #31
1000ea84:	469a      	mov	sl, r3
1000ea86:	4b17      	ldr	r3, [pc, #92]	; (1000eae4 <__eqdf2+0x70>)
1000ea88:	030e      	lsls	r6, r1, #12
1000ea8a:	004d      	lsls	r5, r1, #1
1000ea8c:	4684      	mov	ip, r0
1000ea8e:	4680      	mov	r8, r0
1000ea90:	0b36      	lsrs	r6, r6, #12
1000ea92:	0d6d      	lsrs	r5, r5, #21
1000ea94:	0fc9      	lsrs	r1, r1, #31
1000ea96:	4691      	mov	r9, r2
1000ea98:	0b3f      	lsrs	r7, r7, #12
1000ea9a:	0d64      	lsrs	r4, r4, #21
1000ea9c:	2001      	movs	r0, #1
1000ea9e:	429d      	cmp	r5, r3
1000eaa0:	d008      	beq.n	1000eab4 <__eqdf2+0x40>
1000eaa2:	429c      	cmp	r4, r3
1000eaa4:	d001      	beq.n	1000eaaa <__eqdf2+0x36>
1000eaa6:	42a5      	cmp	r5, r4
1000eaa8:	d00b      	beq.n	1000eac2 <__eqdf2+0x4e>
1000eaaa:	bc1c      	pop	{r2, r3, r4}
1000eaac:	4690      	mov	r8, r2
1000eaae:	4699      	mov	r9, r3
1000eab0:	46a2      	mov	sl, r4
1000eab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eab4:	4663      	mov	r3, ip
1000eab6:	4333      	orrs	r3, r6
1000eab8:	d1f7      	bne.n	1000eaaa <__eqdf2+0x36>
1000eaba:	42ac      	cmp	r4, r5
1000eabc:	d1f5      	bne.n	1000eaaa <__eqdf2+0x36>
1000eabe:	433a      	orrs	r2, r7
1000eac0:	d1f3      	bne.n	1000eaaa <__eqdf2+0x36>
1000eac2:	2001      	movs	r0, #1
1000eac4:	42be      	cmp	r6, r7
1000eac6:	d1f0      	bne.n	1000eaaa <__eqdf2+0x36>
1000eac8:	45c8      	cmp	r8, r9
1000eaca:	d1ee      	bne.n	1000eaaa <__eqdf2+0x36>
1000eacc:	4551      	cmp	r1, sl
1000eace:	d007      	beq.n	1000eae0 <__eqdf2+0x6c>
1000ead0:	2d00      	cmp	r5, #0
1000ead2:	d1ea      	bne.n	1000eaaa <__eqdf2+0x36>
1000ead4:	4663      	mov	r3, ip
1000ead6:	431e      	orrs	r6, r3
1000ead8:	0030      	movs	r0, r6
1000eada:	1e46      	subs	r6, r0, #1
1000eadc:	41b0      	sbcs	r0, r6
1000eade:	e7e4      	b.n	1000eaaa <__eqdf2+0x36>
1000eae0:	2000      	movs	r0, #0
1000eae2:	e7e2      	b.n	1000eaaa <__eqdf2+0x36>
1000eae4:	000007ff 	.word	0x000007ff

1000eae8 <__gedf2>:
1000eae8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eaea:	4645      	mov	r5, r8
1000eaec:	46de      	mov	lr, fp
1000eaee:	4657      	mov	r7, sl
1000eaf0:	464e      	mov	r6, r9
1000eaf2:	b5e0      	push	{r5, r6, r7, lr}
1000eaf4:	031f      	lsls	r7, r3, #12
1000eaf6:	0b3d      	lsrs	r5, r7, #12
1000eaf8:	4f2c      	ldr	r7, [pc, #176]	; (1000ebac <__gedf2+0xc4>)
1000eafa:	030e      	lsls	r6, r1, #12
1000eafc:	004c      	lsls	r4, r1, #1
1000eafe:	46ab      	mov	fp, r5
1000eb00:	005d      	lsls	r5, r3, #1
1000eb02:	4684      	mov	ip, r0
1000eb04:	0b36      	lsrs	r6, r6, #12
1000eb06:	0d64      	lsrs	r4, r4, #21
1000eb08:	0fc9      	lsrs	r1, r1, #31
1000eb0a:	4690      	mov	r8, r2
1000eb0c:	0d6d      	lsrs	r5, r5, #21
1000eb0e:	0fdb      	lsrs	r3, r3, #31
1000eb10:	42bc      	cmp	r4, r7
1000eb12:	d02a      	beq.n	1000eb6a <__gedf2+0x82>
1000eb14:	4f25      	ldr	r7, [pc, #148]	; (1000ebac <__gedf2+0xc4>)
1000eb16:	42bd      	cmp	r5, r7
1000eb18:	d02d      	beq.n	1000eb76 <__gedf2+0x8e>
1000eb1a:	2c00      	cmp	r4, #0
1000eb1c:	d10f      	bne.n	1000eb3e <__gedf2+0x56>
1000eb1e:	4330      	orrs	r0, r6
1000eb20:	0007      	movs	r7, r0
1000eb22:	4681      	mov	r9, r0
1000eb24:	4278      	negs	r0, r7
1000eb26:	4178      	adcs	r0, r7
1000eb28:	b2c0      	uxtb	r0, r0
1000eb2a:	2d00      	cmp	r5, #0
1000eb2c:	d117      	bne.n	1000eb5e <__gedf2+0x76>
1000eb2e:	465f      	mov	r7, fp
1000eb30:	433a      	orrs	r2, r7
1000eb32:	d114      	bne.n	1000eb5e <__gedf2+0x76>
1000eb34:	464b      	mov	r3, r9
1000eb36:	2000      	movs	r0, #0
1000eb38:	2b00      	cmp	r3, #0
1000eb3a:	d00a      	beq.n	1000eb52 <__gedf2+0x6a>
1000eb3c:	e006      	b.n	1000eb4c <__gedf2+0x64>
1000eb3e:	2d00      	cmp	r5, #0
1000eb40:	d102      	bne.n	1000eb48 <__gedf2+0x60>
1000eb42:	4658      	mov	r0, fp
1000eb44:	4302      	orrs	r2, r0
1000eb46:	d001      	beq.n	1000eb4c <__gedf2+0x64>
1000eb48:	4299      	cmp	r1, r3
1000eb4a:	d018      	beq.n	1000eb7e <__gedf2+0x96>
1000eb4c:	4248      	negs	r0, r1
1000eb4e:	2101      	movs	r1, #1
1000eb50:	4308      	orrs	r0, r1
1000eb52:	bc3c      	pop	{r2, r3, r4, r5}
1000eb54:	4690      	mov	r8, r2
1000eb56:	4699      	mov	r9, r3
1000eb58:	46a2      	mov	sl, r4
1000eb5a:	46ab      	mov	fp, r5
1000eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eb5e:	2800      	cmp	r0, #0
1000eb60:	d0f2      	beq.n	1000eb48 <__gedf2+0x60>
1000eb62:	2001      	movs	r0, #1
1000eb64:	3b01      	subs	r3, #1
1000eb66:	4318      	orrs	r0, r3
1000eb68:	e7f3      	b.n	1000eb52 <__gedf2+0x6a>
1000eb6a:	0037      	movs	r7, r6
1000eb6c:	4307      	orrs	r7, r0
1000eb6e:	d0d1      	beq.n	1000eb14 <__gedf2+0x2c>
1000eb70:	2002      	movs	r0, #2
1000eb72:	4240      	negs	r0, r0
1000eb74:	e7ed      	b.n	1000eb52 <__gedf2+0x6a>
1000eb76:	465f      	mov	r7, fp
1000eb78:	4317      	orrs	r7, r2
1000eb7a:	d0ce      	beq.n	1000eb1a <__gedf2+0x32>
1000eb7c:	e7f8      	b.n	1000eb70 <__gedf2+0x88>
1000eb7e:	42ac      	cmp	r4, r5
1000eb80:	dce4      	bgt.n	1000eb4c <__gedf2+0x64>
1000eb82:	da03      	bge.n	1000eb8c <__gedf2+0xa4>
1000eb84:	1e48      	subs	r0, r1, #1
1000eb86:	2101      	movs	r1, #1
1000eb88:	4308      	orrs	r0, r1
1000eb8a:	e7e2      	b.n	1000eb52 <__gedf2+0x6a>
1000eb8c:	455e      	cmp	r6, fp
1000eb8e:	d8dd      	bhi.n	1000eb4c <__gedf2+0x64>
1000eb90:	d006      	beq.n	1000eba0 <__gedf2+0xb8>
1000eb92:	2000      	movs	r0, #0
1000eb94:	455e      	cmp	r6, fp
1000eb96:	d2dc      	bcs.n	1000eb52 <__gedf2+0x6a>
1000eb98:	2301      	movs	r3, #1
1000eb9a:	1e48      	subs	r0, r1, #1
1000eb9c:	4318      	orrs	r0, r3
1000eb9e:	e7d8      	b.n	1000eb52 <__gedf2+0x6a>
1000eba0:	45c4      	cmp	ip, r8
1000eba2:	d8d3      	bhi.n	1000eb4c <__gedf2+0x64>
1000eba4:	2000      	movs	r0, #0
1000eba6:	45c4      	cmp	ip, r8
1000eba8:	d3f6      	bcc.n	1000eb98 <__gedf2+0xb0>
1000ebaa:	e7d2      	b.n	1000eb52 <__gedf2+0x6a>
1000ebac:	000007ff 	.word	0x000007ff

1000ebb0 <__ledf2>:
1000ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebb2:	464e      	mov	r6, r9
1000ebb4:	4645      	mov	r5, r8
1000ebb6:	46de      	mov	lr, fp
1000ebb8:	4657      	mov	r7, sl
1000ebba:	005c      	lsls	r4, r3, #1
1000ebbc:	b5e0      	push	{r5, r6, r7, lr}
1000ebbe:	031f      	lsls	r7, r3, #12
1000ebc0:	0fdb      	lsrs	r3, r3, #31
1000ebc2:	4699      	mov	r9, r3
1000ebc4:	4b2a      	ldr	r3, [pc, #168]	; (1000ec70 <__ledf2+0xc0>)
1000ebc6:	030e      	lsls	r6, r1, #12
1000ebc8:	004d      	lsls	r5, r1, #1
1000ebca:	0fc9      	lsrs	r1, r1, #31
1000ebcc:	4684      	mov	ip, r0
1000ebce:	0b36      	lsrs	r6, r6, #12
1000ebd0:	0d6d      	lsrs	r5, r5, #21
1000ebd2:	468b      	mov	fp, r1
1000ebd4:	4690      	mov	r8, r2
1000ebd6:	0b3f      	lsrs	r7, r7, #12
1000ebd8:	0d64      	lsrs	r4, r4, #21
1000ebda:	429d      	cmp	r5, r3
1000ebdc:	d020      	beq.n	1000ec20 <__ledf2+0x70>
1000ebde:	4b24      	ldr	r3, [pc, #144]	; (1000ec70 <__ledf2+0xc0>)
1000ebe0:	429c      	cmp	r4, r3
1000ebe2:	d022      	beq.n	1000ec2a <__ledf2+0x7a>
1000ebe4:	2d00      	cmp	r5, #0
1000ebe6:	d112      	bne.n	1000ec0e <__ledf2+0x5e>
1000ebe8:	4330      	orrs	r0, r6
1000ebea:	4243      	negs	r3, r0
1000ebec:	4143      	adcs	r3, r0
1000ebee:	b2db      	uxtb	r3, r3
1000ebf0:	2c00      	cmp	r4, #0
1000ebf2:	d01f      	beq.n	1000ec34 <__ledf2+0x84>
1000ebf4:	2b00      	cmp	r3, #0
1000ebf6:	d00c      	beq.n	1000ec12 <__ledf2+0x62>
1000ebf8:	464b      	mov	r3, r9
1000ebfa:	2001      	movs	r0, #1
1000ebfc:	3b01      	subs	r3, #1
1000ebfe:	4303      	orrs	r3, r0
1000ec00:	0018      	movs	r0, r3
1000ec02:	bc3c      	pop	{r2, r3, r4, r5}
1000ec04:	4690      	mov	r8, r2
1000ec06:	4699      	mov	r9, r3
1000ec08:	46a2      	mov	sl, r4
1000ec0a:	46ab      	mov	fp, r5
1000ec0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec0e:	2c00      	cmp	r4, #0
1000ec10:	d016      	beq.n	1000ec40 <__ledf2+0x90>
1000ec12:	45cb      	cmp	fp, r9
1000ec14:	d017      	beq.n	1000ec46 <__ledf2+0x96>
1000ec16:	465b      	mov	r3, fp
1000ec18:	4259      	negs	r1, r3
1000ec1a:	2301      	movs	r3, #1
1000ec1c:	430b      	orrs	r3, r1
1000ec1e:	e7ef      	b.n	1000ec00 <__ledf2+0x50>
1000ec20:	0031      	movs	r1, r6
1000ec22:	2302      	movs	r3, #2
1000ec24:	4301      	orrs	r1, r0
1000ec26:	d1eb      	bne.n	1000ec00 <__ledf2+0x50>
1000ec28:	e7d9      	b.n	1000ebde <__ledf2+0x2e>
1000ec2a:	0039      	movs	r1, r7
1000ec2c:	2302      	movs	r3, #2
1000ec2e:	4311      	orrs	r1, r2
1000ec30:	d1e6      	bne.n	1000ec00 <__ledf2+0x50>
1000ec32:	e7d7      	b.n	1000ebe4 <__ledf2+0x34>
1000ec34:	433a      	orrs	r2, r7
1000ec36:	d1dd      	bne.n	1000ebf4 <__ledf2+0x44>
1000ec38:	2300      	movs	r3, #0
1000ec3a:	2800      	cmp	r0, #0
1000ec3c:	d0e0      	beq.n	1000ec00 <__ledf2+0x50>
1000ec3e:	e7ea      	b.n	1000ec16 <__ledf2+0x66>
1000ec40:	433a      	orrs	r2, r7
1000ec42:	d1e6      	bne.n	1000ec12 <__ledf2+0x62>
1000ec44:	e7e7      	b.n	1000ec16 <__ledf2+0x66>
1000ec46:	42a5      	cmp	r5, r4
1000ec48:	dce5      	bgt.n	1000ec16 <__ledf2+0x66>
1000ec4a:	db05      	blt.n	1000ec58 <__ledf2+0xa8>
1000ec4c:	42be      	cmp	r6, r7
1000ec4e:	d8e2      	bhi.n	1000ec16 <__ledf2+0x66>
1000ec50:	d007      	beq.n	1000ec62 <__ledf2+0xb2>
1000ec52:	2300      	movs	r3, #0
1000ec54:	42be      	cmp	r6, r7
1000ec56:	d2d3      	bcs.n	1000ec00 <__ledf2+0x50>
1000ec58:	4659      	mov	r1, fp
1000ec5a:	2301      	movs	r3, #1
1000ec5c:	3901      	subs	r1, #1
1000ec5e:	430b      	orrs	r3, r1
1000ec60:	e7ce      	b.n	1000ec00 <__ledf2+0x50>
1000ec62:	45c4      	cmp	ip, r8
1000ec64:	d8d7      	bhi.n	1000ec16 <__ledf2+0x66>
1000ec66:	2300      	movs	r3, #0
1000ec68:	45c4      	cmp	ip, r8
1000ec6a:	d3f5      	bcc.n	1000ec58 <__ledf2+0xa8>
1000ec6c:	e7c8      	b.n	1000ec00 <__ledf2+0x50>
1000ec6e:	46c0      	nop			; (mov r8, r8)
1000ec70:	000007ff 	.word	0x000007ff

1000ec74 <__aeabi_i2d>:
1000ec74:	b570      	push	{r4, r5, r6, lr}
1000ec76:	2800      	cmp	r0, #0
1000ec78:	d030      	beq.n	1000ecdc <__aeabi_i2d+0x68>
1000ec7a:	17c3      	asrs	r3, r0, #31
1000ec7c:	18c4      	adds	r4, r0, r3
1000ec7e:	405c      	eors	r4, r3
1000ec80:	0fc5      	lsrs	r5, r0, #31
1000ec82:	0020      	movs	r0, r4
1000ec84:	f000 f914 	bl	1000eeb0 <__clzsi2>
1000ec88:	4b17      	ldr	r3, [pc, #92]	; (1000ece8 <__aeabi_i2d+0x74>)
1000ec8a:	4a18      	ldr	r2, [pc, #96]	; (1000ecec <__aeabi_i2d+0x78>)
1000ec8c:	1a1b      	subs	r3, r3, r0
1000ec8e:	1ad2      	subs	r2, r2, r3
1000ec90:	2a1f      	cmp	r2, #31
1000ec92:	dd18      	ble.n	1000ecc6 <__aeabi_i2d+0x52>
1000ec94:	4a16      	ldr	r2, [pc, #88]	; (1000ecf0 <__aeabi_i2d+0x7c>)
1000ec96:	1ad2      	subs	r2, r2, r3
1000ec98:	4094      	lsls	r4, r2
1000ec9a:	2200      	movs	r2, #0
1000ec9c:	0324      	lsls	r4, r4, #12
1000ec9e:	055b      	lsls	r3, r3, #21
1000eca0:	0b24      	lsrs	r4, r4, #12
1000eca2:	0d5b      	lsrs	r3, r3, #21
1000eca4:	2100      	movs	r1, #0
1000eca6:	0010      	movs	r0, r2
1000eca8:	0324      	lsls	r4, r4, #12
1000ecaa:	0d0a      	lsrs	r2, r1, #20
1000ecac:	0b24      	lsrs	r4, r4, #12
1000ecae:	0512      	lsls	r2, r2, #20
1000ecb0:	4322      	orrs	r2, r4
1000ecb2:	4c10      	ldr	r4, [pc, #64]	; (1000ecf4 <__aeabi_i2d+0x80>)
1000ecb4:	051b      	lsls	r3, r3, #20
1000ecb6:	4022      	ands	r2, r4
1000ecb8:	4313      	orrs	r3, r2
1000ecba:	005b      	lsls	r3, r3, #1
1000ecbc:	07ed      	lsls	r5, r5, #31
1000ecbe:	085b      	lsrs	r3, r3, #1
1000ecc0:	432b      	orrs	r3, r5
1000ecc2:	0019      	movs	r1, r3
1000ecc4:	bd70      	pop	{r4, r5, r6, pc}
1000ecc6:	0021      	movs	r1, r4
1000ecc8:	4091      	lsls	r1, r2
1000ecca:	000a      	movs	r2, r1
1000eccc:	210b      	movs	r1, #11
1000ecce:	1a08      	subs	r0, r1, r0
1000ecd0:	40c4      	lsrs	r4, r0
1000ecd2:	055b      	lsls	r3, r3, #21
1000ecd4:	0324      	lsls	r4, r4, #12
1000ecd6:	0b24      	lsrs	r4, r4, #12
1000ecd8:	0d5b      	lsrs	r3, r3, #21
1000ecda:	e7e3      	b.n	1000eca4 <__aeabi_i2d+0x30>
1000ecdc:	2500      	movs	r5, #0
1000ecde:	2300      	movs	r3, #0
1000ece0:	2400      	movs	r4, #0
1000ece2:	2200      	movs	r2, #0
1000ece4:	e7de      	b.n	1000eca4 <__aeabi_i2d+0x30>
1000ece6:	46c0      	nop			; (mov r8, r8)
1000ece8:	0000041e 	.word	0x0000041e
1000ecec:	00000433 	.word	0x00000433
1000ecf0:	00000413 	.word	0x00000413
1000ecf4:	800fffff 	.word	0x800fffff

1000ecf8 <__aeabi_f2d>:
1000ecf8:	0041      	lsls	r1, r0, #1
1000ecfa:	0e09      	lsrs	r1, r1, #24
1000ecfc:	1c4b      	adds	r3, r1, #1
1000ecfe:	b570      	push	{r4, r5, r6, lr}
1000ed00:	b2db      	uxtb	r3, r3
1000ed02:	0246      	lsls	r6, r0, #9
1000ed04:	0a75      	lsrs	r5, r6, #9
1000ed06:	0fc4      	lsrs	r4, r0, #31
1000ed08:	2b01      	cmp	r3, #1
1000ed0a:	dd14      	ble.n	1000ed36 <__aeabi_f2d+0x3e>
1000ed0c:	23e0      	movs	r3, #224	; 0xe0
1000ed0e:	009b      	lsls	r3, r3, #2
1000ed10:	076d      	lsls	r5, r5, #29
1000ed12:	0b36      	lsrs	r6, r6, #12
1000ed14:	18cb      	adds	r3, r1, r3
1000ed16:	2100      	movs	r1, #0
1000ed18:	0d0a      	lsrs	r2, r1, #20
1000ed1a:	0028      	movs	r0, r5
1000ed1c:	0512      	lsls	r2, r2, #20
1000ed1e:	4d1c      	ldr	r5, [pc, #112]	; (1000ed90 <__aeabi_f2d+0x98>)
1000ed20:	4332      	orrs	r2, r6
1000ed22:	055b      	lsls	r3, r3, #21
1000ed24:	402a      	ands	r2, r5
1000ed26:	085b      	lsrs	r3, r3, #1
1000ed28:	4313      	orrs	r3, r2
1000ed2a:	005b      	lsls	r3, r3, #1
1000ed2c:	07e4      	lsls	r4, r4, #31
1000ed2e:	085b      	lsrs	r3, r3, #1
1000ed30:	4323      	orrs	r3, r4
1000ed32:	0019      	movs	r1, r3
1000ed34:	bd70      	pop	{r4, r5, r6, pc}
1000ed36:	2900      	cmp	r1, #0
1000ed38:	d114      	bne.n	1000ed64 <__aeabi_f2d+0x6c>
1000ed3a:	2d00      	cmp	r5, #0
1000ed3c:	d01e      	beq.n	1000ed7c <__aeabi_f2d+0x84>
1000ed3e:	0028      	movs	r0, r5
1000ed40:	f000 f8b6 	bl	1000eeb0 <__clzsi2>
1000ed44:	280a      	cmp	r0, #10
1000ed46:	dc1c      	bgt.n	1000ed82 <__aeabi_f2d+0x8a>
1000ed48:	230b      	movs	r3, #11
1000ed4a:	002a      	movs	r2, r5
1000ed4c:	1a1b      	subs	r3, r3, r0
1000ed4e:	40da      	lsrs	r2, r3
1000ed50:	0003      	movs	r3, r0
1000ed52:	3315      	adds	r3, #21
1000ed54:	409d      	lsls	r5, r3
1000ed56:	4b0f      	ldr	r3, [pc, #60]	; (1000ed94 <__aeabi_f2d+0x9c>)
1000ed58:	0312      	lsls	r2, r2, #12
1000ed5a:	1a1b      	subs	r3, r3, r0
1000ed5c:	055b      	lsls	r3, r3, #21
1000ed5e:	0b16      	lsrs	r6, r2, #12
1000ed60:	0d5b      	lsrs	r3, r3, #21
1000ed62:	e7d8      	b.n	1000ed16 <__aeabi_f2d+0x1e>
1000ed64:	2d00      	cmp	r5, #0
1000ed66:	d006      	beq.n	1000ed76 <__aeabi_f2d+0x7e>
1000ed68:	0b32      	lsrs	r2, r6, #12
1000ed6a:	2680      	movs	r6, #128	; 0x80
1000ed6c:	0336      	lsls	r6, r6, #12
1000ed6e:	076d      	lsls	r5, r5, #29
1000ed70:	4316      	orrs	r6, r2
1000ed72:	4b09      	ldr	r3, [pc, #36]	; (1000ed98 <__aeabi_f2d+0xa0>)
1000ed74:	e7cf      	b.n	1000ed16 <__aeabi_f2d+0x1e>
1000ed76:	4b08      	ldr	r3, [pc, #32]	; (1000ed98 <__aeabi_f2d+0xa0>)
1000ed78:	2600      	movs	r6, #0
1000ed7a:	e7cc      	b.n	1000ed16 <__aeabi_f2d+0x1e>
1000ed7c:	2300      	movs	r3, #0
1000ed7e:	2600      	movs	r6, #0
1000ed80:	e7c9      	b.n	1000ed16 <__aeabi_f2d+0x1e>
1000ed82:	0003      	movs	r3, r0
1000ed84:	002a      	movs	r2, r5
1000ed86:	3b0b      	subs	r3, #11
1000ed88:	409a      	lsls	r2, r3
1000ed8a:	2500      	movs	r5, #0
1000ed8c:	e7e3      	b.n	1000ed56 <__aeabi_f2d+0x5e>
1000ed8e:	46c0      	nop			; (mov r8, r8)
1000ed90:	800fffff 	.word	0x800fffff
1000ed94:	00000389 	.word	0x00000389
1000ed98:	000007ff 	.word	0x000007ff

1000ed9c <__aeabi_d2f>:
1000ed9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed9e:	004c      	lsls	r4, r1, #1
1000eda0:	0d64      	lsrs	r4, r4, #21
1000eda2:	030b      	lsls	r3, r1, #12
1000eda4:	1c62      	adds	r2, r4, #1
1000eda6:	0f45      	lsrs	r5, r0, #29
1000eda8:	0a5b      	lsrs	r3, r3, #9
1000edaa:	0552      	lsls	r2, r2, #21
1000edac:	432b      	orrs	r3, r5
1000edae:	0fc9      	lsrs	r1, r1, #31
1000edb0:	00c5      	lsls	r5, r0, #3
1000edb2:	0d52      	lsrs	r2, r2, #21
1000edb4:	2a01      	cmp	r2, #1
1000edb6:	dd28      	ble.n	1000ee0a <__aeabi_d2f+0x6e>
1000edb8:	4a3a      	ldr	r2, [pc, #232]	; (1000eea4 <__aeabi_d2f+0x108>)
1000edba:	18a6      	adds	r6, r4, r2
1000edbc:	2efe      	cmp	r6, #254	; 0xfe
1000edbe:	dc1b      	bgt.n	1000edf8 <__aeabi_d2f+0x5c>
1000edc0:	2e00      	cmp	r6, #0
1000edc2:	dd3e      	ble.n	1000ee42 <__aeabi_d2f+0xa6>
1000edc4:	0180      	lsls	r0, r0, #6
1000edc6:	0002      	movs	r2, r0
1000edc8:	1e50      	subs	r0, r2, #1
1000edca:	4182      	sbcs	r2, r0
1000edcc:	0f6d      	lsrs	r5, r5, #29
1000edce:	432a      	orrs	r2, r5
1000edd0:	00db      	lsls	r3, r3, #3
1000edd2:	4313      	orrs	r3, r2
1000edd4:	075a      	lsls	r2, r3, #29
1000edd6:	d004      	beq.n	1000ede2 <__aeabi_d2f+0x46>
1000edd8:	220f      	movs	r2, #15
1000edda:	401a      	ands	r2, r3
1000eddc:	2a04      	cmp	r2, #4
1000edde:	d000      	beq.n	1000ede2 <__aeabi_d2f+0x46>
1000ede0:	3304      	adds	r3, #4
1000ede2:	2280      	movs	r2, #128	; 0x80
1000ede4:	04d2      	lsls	r2, r2, #19
1000ede6:	401a      	ands	r2, r3
1000ede8:	d05a      	beq.n	1000eea0 <__aeabi_d2f+0x104>
1000edea:	3601      	adds	r6, #1
1000edec:	2eff      	cmp	r6, #255	; 0xff
1000edee:	d003      	beq.n	1000edf8 <__aeabi_d2f+0x5c>
1000edf0:	019b      	lsls	r3, r3, #6
1000edf2:	0a5b      	lsrs	r3, r3, #9
1000edf4:	b2f4      	uxtb	r4, r6
1000edf6:	e001      	b.n	1000edfc <__aeabi_d2f+0x60>
1000edf8:	24ff      	movs	r4, #255	; 0xff
1000edfa:	2300      	movs	r3, #0
1000edfc:	0258      	lsls	r0, r3, #9
1000edfe:	05e4      	lsls	r4, r4, #23
1000ee00:	0a40      	lsrs	r0, r0, #9
1000ee02:	07c9      	lsls	r1, r1, #31
1000ee04:	4320      	orrs	r0, r4
1000ee06:	4308      	orrs	r0, r1
1000ee08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee0a:	2c00      	cmp	r4, #0
1000ee0c:	d007      	beq.n	1000ee1e <__aeabi_d2f+0x82>
1000ee0e:	431d      	orrs	r5, r3
1000ee10:	d0f2      	beq.n	1000edf8 <__aeabi_d2f+0x5c>
1000ee12:	2080      	movs	r0, #128	; 0x80
1000ee14:	00db      	lsls	r3, r3, #3
1000ee16:	0480      	lsls	r0, r0, #18
1000ee18:	4303      	orrs	r3, r0
1000ee1a:	26ff      	movs	r6, #255	; 0xff
1000ee1c:	e7da      	b.n	1000edd4 <__aeabi_d2f+0x38>
1000ee1e:	432b      	orrs	r3, r5
1000ee20:	d003      	beq.n	1000ee2a <__aeabi_d2f+0x8e>
1000ee22:	2305      	movs	r3, #5
1000ee24:	08db      	lsrs	r3, r3, #3
1000ee26:	2cff      	cmp	r4, #255	; 0xff
1000ee28:	d003      	beq.n	1000ee32 <__aeabi_d2f+0x96>
1000ee2a:	025b      	lsls	r3, r3, #9
1000ee2c:	0a5b      	lsrs	r3, r3, #9
1000ee2e:	b2e4      	uxtb	r4, r4
1000ee30:	e7e4      	b.n	1000edfc <__aeabi_d2f+0x60>
1000ee32:	2b00      	cmp	r3, #0
1000ee34:	d032      	beq.n	1000ee9c <__aeabi_d2f+0x100>
1000ee36:	2080      	movs	r0, #128	; 0x80
1000ee38:	03c0      	lsls	r0, r0, #15
1000ee3a:	4303      	orrs	r3, r0
1000ee3c:	025b      	lsls	r3, r3, #9
1000ee3e:	0a5b      	lsrs	r3, r3, #9
1000ee40:	e7dc      	b.n	1000edfc <__aeabi_d2f+0x60>
1000ee42:	0032      	movs	r2, r6
1000ee44:	3217      	adds	r2, #23
1000ee46:	db14      	blt.n	1000ee72 <__aeabi_d2f+0xd6>
1000ee48:	2280      	movs	r2, #128	; 0x80
1000ee4a:	271e      	movs	r7, #30
1000ee4c:	0412      	lsls	r2, r2, #16
1000ee4e:	4313      	orrs	r3, r2
1000ee50:	1bbf      	subs	r7, r7, r6
1000ee52:	2f1f      	cmp	r7, #31
1000ee54:	dc0f      	bgt.n	1000ee76 <__aeabi_d2f+0xda>
1000ee56:	4a14      	ldr	r2, [pc, #80]	; (1000eea8 <__aeabi_d2f+0x10c>)
1000ee58:	4694      	mov	ip, r2
1000ee5a:	4464      	add	r4, ip
1000ee5c:	002a      	movs	r2, r5
1000ee5e:	40a5      	lsls	r5, r4
1000ee60:	002e      	movs	r6, r5
1000ee62:	40a3      	lsls	r3, r4
1000ee64:	1e75      	subs	r5, r6, #1
1000ee66:	41ae      	sbcs	r6, r5
1000ee68:	40fa      	lsrs	r2, r7
1000ee6a:	4333      	orrs	r3, r6
1000ee6c:	4313      	orrs	r3, r2
1000ee6e:	2600      	movs	r6, #0
1000ee70:	e7b0      	b.n	1000edd4 <__aeabi_d2f+0x38>
1000ee72:	2400      	movs	r4, #0
1000ee74:	e7d5      	b.n	1000ee22 <__aeabi_d2f+0x86>
1000ee76:	2202      	movs	r2, #2
1000ee78:	4252      	negs	r2, r2
1000ee7a:	1b96      	subs	r6, r2, r6
1000ee7c:	001a      	movs	r2, r3
1000ee7e:	40f2      	lsrs	r2, r6
1000ee80:	2f20      	cmp	r7, #32
1000ee82:	d009      	beq.n	1000ee98 <__aeabi_d2f+0xfc>
1000ee84:	4809      	ldr	r0, [pc, #36]	; (1000eeac <__aeabi_d2f+0x110>)
1000ee86:	4684      	mov	ip, r0
1000ee88:	4464      	add	r4, ip
1000ee8a:	40a3      	lsls	r3, r4
1000ee8c:	432b      	orrs	r3, r5
1000ee8e:	1e5d      	subs	r5, r3, #1
1000ee90:	41ab      	sbcs	r3, r5
1000ee92:	2600      	movs	r6, #0
1000ee94:	4313      	orrs	r3, r2
1000ee96:	e79d      	b.n	1000edd4 <__aeabi_d2f+0x38>
1000ee98:	2300      	movs	r3, #0
1000ee9a:	e7f7      	b.n	1000ee8c <__aeabi_d2f+0xf0>
1000ee9c:	2300      	movs	r3, #0
1000ee9e:	e7ad      	b.n	1000edfc <__aeabi_d2f+0x60>
1000eea0:	0034      	movs	r4, r6
1000eea2:	e7bf      	b.n	1000ee24 <__aeabi_d2f+0x88>
1000eea4:	fffffc80 	.word	0xfffffc80
1000eea8:	fffffc82 	.word	0xfffffc82
1000eeac:	fffffca2 	.word	0xfffffca2

1000eeb0 <__clzsi2>:
1000eeb0:	211c      	movs	r1, #28
1000eeb2:	2301      	movs	r3, #1
1000eeb4:	041b      	lsls	r3, r3, #16
1000eeb6:	4298      	cmp	r0, r3
1000eeb8:	d301      	bcc.n	1000eebe <__clzsi2+0xe>
1000eeba:	0c00      	lsrs	r0, r0, #16
1000eebc:	3910      	subs	r1, #16
1000eebe:	0a1b      	lsrs	r3, r3, #8
1000eec0:	4298      	cmp	r0, r3
1000eec2:	d301      	bcc.n	1000eec8 <__clzsi2+0x18>
1000eec4:	0a00      	lsrs	r0, r0, #8
1000eec6:	3908      	subs	r1, #8
1000eec8:	091b      	lsrs	r3, r3, #4
1000eeca:	4298      	cmp	r0, r3
1000eecc:	d301      	bcc.n	1000eed2 <__clzsi2+0x22>
1000eece:	0900      	lsrs	r0, r0, #4
1000eed0:	3904      	subs	r1, #4
1000eed2:	a202      	add	r2, pc, #8	; (adr r2, 1000eedc <__clzsi2+0x2c>)
1000eed4:	5c10      	ldrb	r0, [r2, r0]
1000eed6:	1840      	adds	r0, r0, r1
1000eed8:	4770      	bx	lr
1000eeda:	46c0      	nop			; (mov r8, r8)
1000eedc:	02020304 	.word	0x02020304
1000eee0:	01010101 	.word	0x01010101
	...

1000eeec <__clzdi2>:
1000eeec:	b510      	push	{r4, lr}
1000eeee:	2900      	cmp	r1, #0
1000eef0:	d103      	bne.n	1000eefa <__clzdi2+0xe>
1000eef2:	f7ff ffdd 	bl	1000eeb0 <__clzsi2>
1000eef6:	3020      	adds	r0, #32
1000eef8:	e002      	b.n	1000ef00 <__clzdi2+0x14>
1000eefa:	1c08      	adds	r0, r1, #0
1000eefc:	f7ff ffd8 	bl	1000eeb0 <__clzsi2>
1000ef00:	bd10      	pop	{r4, pc}
1000ef02:	46c0      	nop			; (mov r8, r8)

1000ef04 <__libc_init_array>:
1000ef04:	b570      	push	{r4, r5, r6, lr}
1000ef06:	2600      	movs	r6, #0
1000ef08:	4d0c      	ldr	r5, [pc, #48]	; (1000ef3c <__libc_init_array+0x38>)
1000ef0a:	4c0d      	ldr	r4, [pc, #52]	; (1000ef40 <__libc_init_array+0x3c>)
1000ef0c:	1b64      	subs	r4, r4, r5
1000ef0e:	10a4      	asrs	r4, r4, #2
1000ef10:	42a6      	cmp	r6, r4
1000ef12:	d109      	bne.n	1000ef28 <__libc_init_array+0x24>
1000ef14:	2600      	movs	r6, #0
1000ef16:	f001 fe59 	bl	10010bcc <_init>
1000ef1a:	4d0a      	ldr	r5, [pc, #40]	; (1000ef44 <__libc_init_array+0x40>)
1000ef1c:	4c0a      	ldr	r4, [pc, #40]	; (1000ef48 <__libc_init_array+0x44>)
1000ef1e:	1b64      	subs	r4, r4, r5
1000ef20:	10a4      	asrs	r4, r4, #2
1000ef22:	42a6      	cmp	r6, r4
1000ef24:	d105      	bne.n	1000ef32 <__libc_init_array+0x2e>
1000ef26:	bd70      	pop	{r4, r5, r6, pc}
1000ef28:	00b3      	lsls	r3, r6, #2
1000ef2a:	58eb      	ldr	r3, [r5, r3]
1000ef2c:	4798      	blx	r3
1000ef2e:	3601      	adds	r6, #1
1000ef30:	e7ee      	b.n	1000ef10 <__libc_init_array+0xc>
1000ef32:	00b3      	lsls	r3, r6, #2
1000ef34:	58eb      	ldr	r3, [r5, r3]
1000ef36:	4798      	blx	r3
1000ef38:	3601      	adds	r6, #1
1000ef3a:	e7f2      	b.n	1000ef22 <__libc_init_array+0x1e>
1000ef3c:	10010bd8 	.word	0x10010bd8
1000ef40:	10010bd8 	.word	0x10010bd8
1000ef44:	10010bd8 	.word	0x10010bd8
1000ef48:	10010bdc 	.word	0x10010bdc

1000ef4c <malloc>:
1000ef4c:	b510      	push	{r4, lr}
1000ef4e:	4b03      	ldr	r3, [pc, #12]	; (1000ef5c <malloc+0x10>)
1000ef50:	0001      	movs	r1, r0
1000ef52:	6818      	ldr	r0, [r3, #0]
1000ef54:	f000 f860 	bl	1000f018 <_malloc_r>
1000ef58:	bd10      	pop	{r4, pc}
1000ef5a:	46c0      	nop			; (mov r8, r8)
1000ef5c:	10010bf0 	.word	0x10010bf0

1000ef60 <free>:
1000ef60:	b510      	push	{r4, lr}
1000ef62:	4b03      	ldr	r3, [pc, #12]	; (1000ef70 <free+0x10>)
1000ef64:	0001      	movs	r1, r0
1000ef66:	6818      	ldr	r0, [r3, #0]
1000ef68:	f000 f80c 	bl	1000ef84 <_free_r>
1000ef6c:	bd10      	pop	{r4, pc}
1000ef6e:	46c0      	nop			; (mov r8, r8)
1000ef70:	10010bf0 	.word	0x10010bf0

1000ef74 <memset>:
1000ef74:	0003      	movs	r3, r0
1000ef76:	1882      	adds	r2, r0, r2
1000ef78:	4293      	cmp	r3, r2
1000ef7a:	d100      	bne.n	1000ef7e <memset+0xa>
1000ef7c:	4770      	bx	lr
1000ef7e:	7019      	strb	r1, [r3, #0]
1000ef80:	3301      	adds	r3, #1
1000ef82:	e7f9      	b.n	1000ef78 <memset+0x4>

1000ef84 <_free_r>:
1000ef84:	b570      	push	{r4, r5, r6, lr}
1000ef86:	0005      	movs	r5, r0
1000ef88:	2900      	cmp	r1, #0
1000ef8a:	d010      	beq.n	1000efae <_free_r+0x2a>
1000ef8c:	1f0c      	subs	r4, r1, #4
1000ef8e:	6823      	ldr	r3, [r4, #0]
1000ef90:	2b00      	cmp	r3, #0
1000ef92:	da00      	bge.n	1000ef96 <_free_r+0x12>
1000ef94:	18e4      	adds	r4, r4, r3
1000ef96:	0028      	movs	r0, r5
1000ef98:	f000 f8d0 	bl	1000f13c <__malloc_lock>
1000ef9c:	4a1d      	ldr	r2, [pc, #116]	; (1000f014 <_free_r+0x90>)
1000ef9e:	6813      	ldr	r3, [r2, #0]
1000efa0:	2b00      	cmp	r3, #0
1000efa2:	d105      	bne.n	1000efb0 <_free_r+0x2c>
1000efa4:	6063      	str	r3, [r4, #4]
1000efa6:	6014      	str	r4, [r2, #0]
1000efa8:	0028      	movs	r0, r5
1000efaa:	f000 f8c8 	bl	1000f13e <__malloc_unlock>
1000efae:	bd70      	pop	{r4, r5, r6, pc}
1000efb0:	42a3      	cmp	r3, r4
1000efb2:	d909      	bls.n	1000efc8 <_free_r+0x44>
1000efb4:	6821      	ldr	r1, [r4, #0]
1000efb6:	1860      	adds	r0, r4, r1
1000efb8:	4283      	cmp	r3, r0
1000efba:	d1f3      	bne.n	1000efa4 <_free_r+0x20>
1000efbc:	6818      	ldr	r0, [r3, #0]
1000efbe:	685b      	ldr	r3, [r3, #4]
1000efc0:	1841      	adds	r1, r0, r1
1000efc2:	6021      	str	r1, [r4, #0]
1000efc4:	e7ee      	b.n	1000efa4 <_free_r+0x20>
1000efc6:	0013      	movs	r3, r2
1000efc8:	685a      	ldr	r2, [r3, #4]
1000efca:	2a00      	cmp	r2, #0
1000efcc:	d001      	beq.n	1000efd2 <_free_r+0x4e>
1000efce:	42a2      	cmp	r2, r4
1000efd0:	d9f9      	bls.n	1000efc6 <_free_r+0x42>
1000efd2:	6819      	ldr	r1, [r3, #0]
1000efd4:	1858      	adds	r0, r3, r1
1000efd6:	42a0      	cmp	r0, r4
1000efd8:	d10b      	bne.n	1000eff2 <_free_r+0x6e>
1000efda:	6820      	ldr	r0, [r4, #0]
1000efdc:	1809      	adds	r1, r1, r0
1000efde:	1858      	adds	r0, r3, r1
1000efe0:	6019      	str	r1, [r3, #0]
1000efe2:	4282      	cmp	r2, r0
1000efe4:	d1e0      	bne.n	1000efa8 <_free_r+0x24>
1000efe6:	6810      	ldr	r0, [r2, #0]
1000efe8:	6852      	ldr	r2, [r2, #4]
1000efea:	1841      	adds	r1, r0, r1
1000efec:	6019      	str	r1, [r3, #0]
1000efee:	605a      	str	r2, [r3, #4]
1000eff0:	e7da      	b.n	1000efa8 <_free_r+0x24>
1000eff2:	42a0      	cmp	r0, r4
1000eff4:	d902      	bls.n	1000effc <_free_r+0x78>
1000eff6:	230c      	movs	r3, #12
1000eff8:	602b      	str	r3, [r5, #0]
1000effa:	e7d5      	b.n	1000efa8 <_free_r+0x24>
1000effc:	6821      	ldr	r1, [r4, #0]
1000effe:	1860      	adds	r0, r4, r1
1000f000:	4282      	cmp	r2, r0
1000f002:	d103      	bne.n	1000f00c <_free_r+0x88>
1000f004:	6810      	ldr	r0, [r2, #0]
1000f006:	6852      	ldr	r2, [r2, #4]
1000f008:	1841      	adds	r1, r0, r1
1000f00a:	6021      	str	r1, [r4, #0]
1000f00c:	6062      	str	r2, [r4, #4]
1000f00e:	605c      	str	r4, [r3, #4]
1000f010:	e7ca      	b.n	1000efa8 <_free_r+0x24>
1000f012:	46c0      	nop			; (mov r8, r8)
1000f014:	10011134 	.word	0x10011134

1000f018 <_malloc_r>:
1000f018:	2303      	movs	r3, #3
1000f01a:	b570      	push	{r4, r5, r6, lr}
1000f01c:	1ccd      	adds	r5, r1, #3
1000f01e:	439d      	bics	r5, r3
1000f020:	3508      	adds	r5, #8
1000f022:	0006      	movs	r6, r0
1000f024:	2d0c      	cmp	r5, #12
1000f026:	d21e      	bcs.n	1000f066 <_malloc_r+0x4e>
1000f028:	250c      	movs	r5, #12
1000f02a:	42a9      	cmp	r1, r5
1000f02c:	d81d      	bhi.n	1000f06a <_malloc_r+0x52>
1000f02e:	0030      	movs	r0, r6
1000f030:	f000 f884 	bl	1000f13c <__malloc_lock>
1000f034:	4a25      	ldr	r2, [pc, #148]	; (1000f0cc <_malloc_r+0xb4>)
1000f036:	6814      	ldr	r4, [r2, #0]
1000f038:	0021      	movs	r1, r4
1000f03a:	2900      	cmp	r1, #0
1000f03c:	d119      	bne.n	1000f072 <_malloc_r+0x5a>
1000f03e:	4c24      	ldr	r4, [pc, #144]	; (1000f0d0 <_malloc_r+0xb8>)
1000f040:	6823      	ldr	r3, [r4, #0]
1000f042:	2b00      	cmp	r3, #0
1000f044:	d103      	bne.n	1000f04e <_malloc_r+0x36>
1000f046:	0030      	movs	r0, r6
1000f048:	f000 f844 	bl	1000f0d4 <_sbrk_r>
1000f04c:	6020      	str	r0, [r4, #0]
1000f04e:	0029      	movs	r1, r5
1000f050:	0030      	movs	r0, r6
1000f052:	f000 f83f 	bl	1000f0d4 <_sbrk_r>
1000f056:	1c43      	adds	r3, r0, #1
1000f058:	d12c      	bne.n	1000f0b4 <_malloc_r+0x9c>
1000f05a:	230c      	movs	r3, #12
1000f05c:	0030      	movs	r0, r6
1000f05e:	6033      	str	r3, [r6, #0]
1000f060:	f000 f86d 	bl	1000f13e <__malloc_unlock>
1000f064:	e003      	b.n	1000f06e <_malloc_r+0x56>
1000f066:	2d00      	cmp	r5, #0
1000f068:	dadf      	bge.n	1000f02a <_malloc_r+0x12>
1000f06a:	230c      	movs	r3, #12
1000f06c:	6033      	str	r3, [r6, #0]
1000f06e:	2000      	movs	r0, #0
1000f070:	bd70      	pop	{r4, r5, r6, pc}
1000f072:	680b      	ldr	r3, [r1, #0]
1000f074:	1b5b      	subs	r3, r3, r5
1000f076:	d41a      	bmi.n	1000f0ae <_malloc_r+0x96>
1000f078:	2b0b      	cmp	r3, #11
1000f07a:	d903      	bls.n	1000f084 <_malloc_r+0x6c>
1000f07c:	600b      	str	r3, [r1, #0]
1000f07e:	18cc      	adds	r4, r1, r3
1000f080:	6025      	str	r5, [r4, #0]
1000f082:	e003      	b.n	1000f08c <_malloc_r+0x74>
1000f084:	428c      	cmp	r4, r1
1000f086:	d10e      	bne.n	1000f0a6 <_malloc_r+0x8e>
1000f088:	6863      	ldr	r3, [r4, #4]
1000f08a:	6013      	str	r3, [r2, #0]
1000f08c:	0030      	movs	r0, r6
1000f08e:	f000 f856 	bl	1000f13e <__malloc_unlock>
1000f092:	0020      	movs	r0, r4
1000f094:	2207      	movs	r2, #7
1000f096:	300b      	adds	r0, #11
1000f098:	1d23      	adds	r3, r4, #4
1000f09a:	4390      	bics	r0, r2
1000f09c:	1ac3      	subs	r3, r0, r3
1000f09e:	d0e7      	beq.n	1000f070 <_malloc_r+0x58>
1000f0a0:	425a      	negs	r2, r3
1000f0a2:	50e2      	str	r2, [r4, r3]
1000f0a4:	e7e4      	b.n	1000f070 <_malloc_r+0x58>
1000f0a6:	684b      	ldr	r3, [r1, #4]
1000f0a8:	6063      	str	r3, [r4, #4]
1000f0aa:	000c      	movs	r4, r1
1000f0ac:	e7ee      	b.n	1000f08c <_malloc_r+0x74>
1000f0ae:	000c      	movs	r4, r1
1000f0b0:	6849      	ldr	r1, [r1, #4]
1000f0b2:	e7c2      	b.n	1000f03a <_malloc_r+0x22>
1000f0b4:	2303      	movs	r3, #3
1000f0b6:	1cc4      	adds	r4, r0, #3
1000f0b8:	439c      	bics	r4, r3
1000f0ba:	42a0      	cmp	r0, r4
1000f0bc:	d0e0      	beq.n	1000f080 <_malloc_r+0x68>
1000f0be:	1a21      	subs	r1, r4, r0
1000f0c0:	0030      	movs	r0, r6
1000f0c2:	f000 f807 	bl	1000f0d4 <_sbrk_r>
1000f0c6:	1c43      	adds	r3, r0, #1
1000f0c8:	d1da      	bne.n	1000f080 <_malloc_r+0x68>
1000f0ca:	e7c6      	b.n	1000f05a <_malloc_r+0x42>
1000f0cc:	10011134 	.word	0x10011134
1000f0d0:	10011138 	.word	0x10011138

1000f0d4 <_sbrk_r>:
1000f0d4:	2300      	movs	r3, #0
1000f0d6:	b570      	push	{r4, r5, r6, lr}
1000f0d8:	4c06      	ldr	r4, [pc, #24]	; (1000f0f4 <_sbrk_r+0x20>)
1000f0da:	0005      	movs	r5, r0
1000f0dc:	0008      	movs	r0, r1
1000f0de:	6023      	str	r3, [r4, #0]
1000f0e0:	f7fb fb02 	bl	1000a6e8 <_sbrk>
1000f0e4:	1c43      	adds	r3, r0, #1
1000f0e6:	d103      	bne.n	1000f0f0 <_sbrk_r+0x1c>
1000f0e8:	6823      	ldr	r3, [r4, #0]
1000f0ea:	2b00      	cmp	r3, #0
1000f0ec:	d000      	beq.n	1000f0f0 <_sbrk_r+0x1c>
1000f0ee:	602b      	str	r3, [r5, #0]
1000f0f0:	bd70      	pop	{r4, r5, r6, pc}
1000f0f2:	46c0      	nop			; (mov r8, r8)
1000f0f4:	10018fd8 	.word	0x10018fd8

1000f0f8 <siprintf>:
1000f0f8:	b40e      	push	{r1, r2, r3}
1000f0fa:	b510      	push	{r4, lr}
1000f0fc:	b09d      	sub	sp, #116	; 0x74
1000f0fe:	a902      	add	r1, sp, #8
1000f100:	9002      	str	r0, [sp, #8]
1000f102:	6108      	str	r0, [r1, #16]
1000f104:	480b      	ldr	r0, [pc, #44]	; (1000f134 <siprintf+0x3c>)
1000f106:	2482      	movs	r4, #130	; 0x82
1000f108:	6088      	str	r0, [r1, #8]
1000f10a:	6148      	str	r0, [r1, #20]
1000f10c:	2001      	movs	r0, #1
1000f10e:	4240      	negs	r0, r0
1000f110:	ab1f      	add	r3, sp, #124	; 0x7c
1000f112:	81c8      	strh	r0, [r1, #14]
1000f114:	4808      	ldr	r0, [pc, #32]	; (1000f138 <siprintf+0x40>)
1000f116:	cb04      	ldmia	r3!, {r2}
1000f118:	00a4      	lsls	r4, r4, #2
1000f11a:	6800      	ldr	r0, [r0, #0]
1000f11c:	9301      	str	r3, [sp, #4]
1000f11e:	818c      	strh	r4, [r1, #12]
1000f120:	f000 f870 	bl	1000f204 <_svfiprintf_r>
1000f124:	2300      	movs	r3, #0
1000f126:	9a02      	ldr	r2, [sp, #8]
1000f128:	7013      	strb	r3, [r2, #0]
1000f12a:	b01d      	add	sp, #116	; 0x74
1000f12c:	bc10      	pop	{r4}
1000f12e:	bc08      	pop	{r3}
1000f130:	b003      	add	sp, #12
1000f132:	4718      	bx	r3
1000f134:	7fffffff 	.word	0x7fffffff
1000f138:	10010bf0 	.word	0x10010bf0

1000f13c <__malloc_lock>:
1000f13c:	4770      	bx	lr

1000f13e <__malloc_unlock>:
1000f13e:	4770      	bx	lr

1000f140 <__ssputs_r>:
1000f140:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f142:	688e      	ldr	r6, [r1, #8]
1000f144:	b085      	sub	sp, #20
1000f146:	0007      	movs	r7, r0
1000f148:	000c      	movs	r4, r1
1000f14a:	9203      	str	r2, [sp, #12]
1000f14c:	9301      	str	r3, [sp, #4]
1000f14e:	429e      	cmp	r6, r3
1000f150:	d839      	bhi.n	1000f1c6 <__ssputs_r+0x86>
1000f152:	2390      	movs	r3, #144	; 0x90
1000f154:	898a      	ldrh	r2, [r1, #12]
1000f156:	00db      	lsls	r3, r3, #3
1000f158:	421a      	tst	r2, r3
1000f15a:	d034      	beq.n	1000f1c6 <__ssputs_r+0x86>
1000f15c:	2503      	movs	r5, #3
1000f15e:	6909      	ldr	r1, [r1, #16]
1000f160:	6823      	ldr	r3, [r4, #0]
1000f162:	1a5b      	subs	r3, r3, r1
1000f164:	9302      	str	r3, [sp, #8]
1000f166:	6963      	ldr	r3, [r4, #20]
1000f168:	9802      	ldr	r0, [sp, #8]
1000f16a:	435d      	muls	r5, r3
1000f16c:	0feb      	lsrs	r3, r5, #31
1000f16e:	195d      	adds	r5, r3, r5
1000f170:	9b01      	ldr	r3, [sp, #4]
1000f172:	106d      	asrs	r5, r5, #1
1000f174:	3301      	adds	r3, #1
1000f176:	181b      	adds	r3, r3, r0
1000f178:	42ab      	cmp	r3, r5
1000f17a:	d900      	bls.n	1000f17e <__ssputs_r+0x3e>
1000f17c:	001d      	movs	r5, r3
1000f17e:	0553      	lsls	r3, r2, #21
1000f180:	d532      	bpl.n	1000f1e8 <__ssputs_r+0xa8>
1000f182:	0029      	movs	r1, r5
1000f184:	0038      	movs	r0, r7
1000f186:	f7ff ff47 	bl	1000f018 <_malloc_r>
1000f18a:	1e06      	subs	r6, r0, #0
1000f18c:	d109      	bne.n	1000f1a2 <__ssputs_r+0x62>
1000f18e:	230c      	movs	r3, #12
1000f190:	603b      	str	r3, [r7, #0]
1000f192:	2340      	movs	r3, #64	; 0x40
1000f194:	2001      	movs	r0, #1
1000f196:	89a2      	ldrh	r2, [r4, #12]
1000f198:	4240      	negs	r0, r0
1000f19a:	4313      	orrs	r3, r2
1000f19c:	81a3      	strh	r3, [r4, #12]
1000f19e:	b005      	add	sp, #20
1000f1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1a2:	9a02      	ldr	r2, [sp, #8]
1000f1a4:	6921      	ldr	r1, [r4, #16]
1000f1a6:	f000 fac4 	bl	1000f732 <memcpy>
1000f1aa:	89a3      	ldrh	r3, [r4, #12]
1000f1ac:	4a14      	ldr	r2, [pc, #80]	; (1000f200 <__ssputs_r+0xc0>)
1000f1ae:	401a      	ands	r2, r3
1000f1b0:	2380      	movs	r3, #128	; 0x80
1000f1b2:	4313      	orrs	r3, r2
1000f1b4:	81a3      	strh	r3, [r4, #12]
1000f1b6:	9b02      	ldr	r3, [sp, #8]
1000f1b8:	6126      	str	r6, [r4, #16]
1000f1ba:	18f6      	adds	r6, r6, r3
1000f1bc:	6026      	str	r6, [r4, #0]
1000f1be:	6165      	str	r5, [r4, #20]
1000f1c0:	9e01      	ldr	r6, [sp, #4]
1000f1c2:	1aed      	subs	r5, r5, r3
1000f1c4:	60a5      	str	r5, [r4, #8]
1000f1c6:	9b01      	ldr	r3, [sp, #4]
1000f1c8:	42b3      	cmp	r3, r6
1000f1ca:	d200      	bcs.n	1000f1ce <__ssputs_r+0x8e>
1000f1cc:	001e      	movs	r6, r3
1000f1ce:	0032      	movs	r2, r6
1000f1d0:	9903      	ldr	r1, [sp, #12]
1000f1d2:	6820      	ldr	r0, [r4, #0]
1000f1d4:	f000 fab6 	bl	1000f744 <memmove>
1000f1d8:	68a3      	ldr	r3, [r4, #8]
1000f1da:	2000      	movs	r0, #0
1000f1dc:	1b9b      	subs	r3, r3, r6
1000f1de:	60a3      	str	r3, [r4, #8]
1000f1e0:	6823      	ldr	r3, [r4, #0]
1000f1e2:	199e      	adds	r6, r3, r6
1000f1e4:	6026      	str	r6, [r4, #0]
1000f1e6:	e7da      	b.n	1000f19e <__ssputs_r+0x5e>
1000f1e8:	002a      	movs	r2, r5
1000f1ea:	0038      	movs	r0, r7
1000f1ec:	f000 fabc 	bl	1000f768 <_realloc_r>
1000f1f0:	1e06      	subs	r6, r0, #0
1000f1f2:	d1e0      	bne.n	1000f1b6 <__ssputs_r+0x76>
1000f1f4:	6921      	ldr	r1, [r4, #16]
1000f1f6:	0038      	movs	r0, r7
1000f1f8:	f7ff fec4 	bl	1000ef84 <_free_r>
1000f1fc:	e7c7      	b.n	1000f18e <__ssputs_r+0x4e>
1000f1fe:	46c0      	nop			; (mov r8, r8)
1000f200:	fffffb7f 	.word	0xfffffb7f

1000f204 <_svfiprintf_r>:
1000f204:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f206:	b09f      	sub	sp, #124	; 0x7c
1000f208:	9002      	str	r0, [sp, #8]
1000f20a:	9305      	str	r3, [sp, #20]
1000f20c:	898b      	ldrh	r3, [r1, #12]
1000f20e:	000f      	movs	r7, r1
1000f210:	0016      	movs	r6, r2
1000f212:	061b      	lsls	r3, r3, #24
1000f214:	d511      	bpl.n	1000f23a <_svfiprintf_r+0x36>
1000f216:	690b      	ldr	r3, [r1, #16]
1000f218:	2b00      	cmp	r3, #0
1000f21a:	d10e      	bne.n	1000f23a <_svfiprintf_r+0x36>
1000f21c:	2140      	movs	r1, #64	; 0x40
1000f21e:	f7ff fefb 	bl	1000f018 <_malloc_r>
1000f222:	6038      	str	r0, [r7, #0]
1000f224:	6138      	str	r0, [r7, #16]
1000f226:	2800      	cmp	r0, #0
1000f228:	d105      	bne.n	1000f236 <_svfiprintf_r+0x32>
1000f22a:	230c      	movs	r3, #12
1000f22c:	9a02      	ldr	r2, [sp, #8]
1000f22e:	3801      	subs	r0, #1
1000f230:	6013      	str	r3, [r2, #0]
1000f232:	b01f      	add	sp, #124	; 0x7c
1000f234:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f236:	2340      	movs	r3, #64	; 0x40
1000f238:	617b      	str	r3, [r7, #20]
1000f23a:	2300      	movs	r3, #0
1000f23c:	ad06      	add	r5, sp, #24
1000f23e:	616b      	str	r3, [r5, #20]
1000f240:	3320      	adds	r3, #32
1000f242:	766b      	strb	r3, [r5, #25]
1000f244:	3310      	adds	r3, #16
1000f246:	76ab      	strb	r3, [r5, #26]
1000f248:	0034      	movs	r4, r6
1000f24a:	7823      	ldrb	r3, [r4, #0]
1000f24c:	2b00      	cmp	r3, #0
1000f24e:	d147      	bne.n	1000f2e0 <_svfiprintf_r+0xdc>
1000f250:	1ba3      	subs	r3, r4, r6
1000f252:	9304      	str	r3, [sp, #16]
1000f254:	d00d      	beq.n	1000f272 <_svfiprintf_r+0x6e>
1000f256:	1ba3      	subs	r3, r4, r6
1000f258:	0032      	movs	r2, r6
1000f25a:	0039      	movs	r1, r7
1000f25c:	9802      	ldr	r0, [sp, #8]
1000f25e:	f7ff ff6f 	bl	1000f140 <__ssputs_r>
1000f262:	1c43      	adds	r3, r0, #1
1000f264:	d100      	bne.n	1000f268 <_svfiprintf_r+0x64>
1000f266:	e0b5      	b.n	1000f3d4 <_svfiprintf_r+0x1d0>
1000f268:	696a      	ldr	r2, [r5, #20]
1000f26a:	9b04      	ldr	r3, [sp, #16]
1000f26c:	4694      	mov	ip, r2
1000f26e:	4463      	add	r3, ip
1000f270:	616b      	str	r3, [r5, #20]
1000f272:	7823      	ldrb	r3, [r4, #0]
1000f274:	2b00      	cmp	r3, #0
1000f276:	d100      	bne.n	1000f27a <_svfiprintf_r+0x76>
1000f278:	e0ac      	b.n	1000f3d4 <_svfiprintf_r+0x1d0>
1000f27a:	2201      	movs	r2, #1
1000f27c:	2300      	movs	r3, #0
1000f27e:	4252      	negs	r2, r2
1000f280:	606a      	str	r2, [r5, #4]
1000f282:	a902      	add	r1, sp, #8
1000f284:	3254      	adds	r2, #84	; 0x54
1000f286:	1852      	adds	r2, r2, r1
1000f288:	3401      	adds	r4, #1
1000f28a:	602b      	str	r3, [r5, #0]
1000f28c:	60eb      	str	r3, [r5, #12]
1000f28e:	60ab      	str	r3, [r5, #8]
1000f290:	7013      	strb	r3, [r2, #0]
1000f292:	65ab      	str	r3, [r5, #88]	; 0x58
1000f294:	4e58      	ldr	r6, [pc, #352]	; (1000f3f8 <_svfiprintf_r+0x1f4>)
1000f296:	2205      	movs	r2, #5
1000f298:	7821      	ldrb	r1, [r4, #0]
1000f29a:	0030      	movs	r0, r6
1000f29c:	f000 fa3e 	bl	1000f71c <memchr>
1000f2a0:	1c62      	adds	r2, r4, #1
1000f2a2:	2800      	cmp	r0, #0
1000f2a4:	d120      	bne.n	1000f2e8 <_svfiprintf_r+0xe4>
1000f2a6:	6829      	ldr	r1, [r5, #0]
1000f2a8:	06cb      	lsls	r3, r1, #27
1000f2aa:	d504      	bpl.n	1000f2b6 <_svfiprintf_r+0xb2>
1000f2ac:	2353      	movs	r3, #83	; 0x53
1000f2ae:	ae02      	add	r6, sp, #8
1000f2b0:	3020      	adds	r0, #32
1000f2b2:	199b      	adds	r3, r3, r6
1000f2b4:	7018      	strb	r0, [r3, #0]
1000f2b6:	070b      	lsls	r3, r1, #28
1000f2b8:	d504      	bpl.n	1000f2c4 <_svfiprintf_r+0xc0>
1000f2ba:	2353      	movs	r3, #83	; 0x53
1000f2bc:	202b      	movs	r0, #43	; 0x2b
1000f2be:	ae02      	add	r6, sp, #8
1000f2c0:	199b      	adds	r3, r3, r6
1000f2c2:	7018      	strb	r0, [r3, #0]
1000f2c4:	7823      	ldrb	r3, [r4, #0]
1000f2c6:	2b2a      	cmp	r3, #42	; 0x2a
1000f2c8:	d016      	beq.n	1000f2f8 <_svfiprintf_r+0xf4>
1000f2ca:	2000      	movs	r0, #0
1000f2cc:	210a      	movs	r1, #10
1000f2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000f2d0:	7822      	ldrb	r2, [r4, #0]
1000f2d2:	3a30      	subs	r2, #48	; 0x30
1000f2d4:	2a09      	cmp	r2, #9
1000f2d6:	d955      	bls.n	1000f384 <_svfiprintf_r+0x180>
1000f2d8:	2800      	cmp	r0, #0
1000f2da:	d015      	beq.n	1000f308 <_svfiprintf_r+0x104>
1000f2dc:	9309      	str	r3, [sp, #36]	; 0x24
1000f2de:	e013      	b.n	1000f308 <_svfiprintf_r+0x104>
1000f2e0:	2b25      	cmp	r3, #37	; 0x25
1000f2e2:	d0b5      	beq.n	1000f250 <_svfiprintf_r+0x4c>
1000f2e4:	3401      	adds	r4, #1
1000f2e6:	e7b0      	b.n	1000f24a <_svfiprintf_r+0x46>
1000f2e8:	2301      	movs	r3, #1
1000f2ea:	1b80      	subs	r0, r0, r6
1000f2ec:	4083      	lsls	r3, r0
1000f2ee:	6829      	ldr	r1, [r5, #0]
1000f2f0:	0014      	movs	r4, r2
1000f2f2:	430b      	orrs	r3, r1
1000f2f4:	602b      	str	r3, [r5, #0]
1000f2f6:	e7cd      	b.n	1000f294 <_svfiprintf_r+0x90>
1000f2f8:	9b05      	ldr	r3, [sp, #20]
1000f2fa:	1d18      	adds	r0, r3, #4
1000f2fc:	681b      	ldr	r3, [r3, #0]
1000f2fe:	9005      	str	r0, [sp, #20]
1000f300:	2b00      	cmp	r3, #0
1000f302:	db39      	blt.n	1000f378 <_svfiprintf_r+0x174>
1000f304:	9309      	str	r3, [sp, #36]	; 0x24
1000f306:	0014      	movs	r4, r2
1000f308:	7823      	ldrb	r3, [r4, #0]
1000f30a:	2b2e      	cmp	r3, #46	; 0x2e
1000f30c:	d10b      	bne.n	1000f326 <_svfiprintf_r+0x122>
1000f30e:	7863      	ldrb	r3, [r4, #1]
1000f310:	1c62      	adds	r2, r4, #1
1000f312:	2b2a      	cmp	r3, #42	; 0x2a
1000f314:	d13e      	bne.n	1000f394 <_svfiprintf_r+0x190>
1000f316:	9b05      	ldr	r3, [sp, #20]
1000f318:	3402      	adds	r4, #2
1000f31a:	1d1a      	adds	r2, r3, #4
1000f31c:	681b      	ldr	r3, [r3, #0]
1000f31e:	9205      	str	r2, [sp, #20]
1000f320:	2b00      	cmp	r3, #0
1000f322:	db34      	blt.n	1000f38e <_svfiprintf_r+0x18a>
1000f324:	9307      	str	r3, [sp, #28]
1000f326:	4e35      	ldr	r6, [pc, #212]	; (1000f3fc <_svfiprintf_r+0x1f8>)
1000f328:	7821      	ldrb	r1, [r4, #0]
1000f32a:	2203      	movs	r2, #3
1000f32c:	0030      	movs	r0, r6
1000f32e:	f000 f9f5 	bl	1000f71c <memchr>
1000f332:	2800      	cmp	r0, #0
1000f334:	d006      	beq.n	1000f344 <_svfiprintf_r+0x140>
1000f336:	2340      	movs	r3, #64	; 0x40
1000f338:	1b80      	subs	r0, r0, r6
1000f33a:	4083      	lsls	r3, r0
1000f33c:	682a      	ldr	r2, [r5, #0]
1000f33e:	3401      	adds	r4, #1
1000f340:	4313      	orrs	r3, r2
1000f342:	602b      	str	r3, [r5, #0]
1000f344:	7821      	ldrb	r1, [r4, #0]
1000f346:	2206      	movs	r2, #6
1000f348:	482d      	ldr	r0, [pc, #180]	; (1000f400 <_svfiprintf_r+0x1fc>)
1000f34a:	1c66      	adds	r6, r4, #1
1000f34c:	7629      	strb	r1, [r5, #24]
1000f34e:	f000 f9e5 	bl	1000f71c <memchr>
1000f352:	2800      	cmp	r0, #0
1000f354:	d046      	beq.n	1000f3e4 <_svfiprintf_r+0x1e0>
1000f356:	4b2b      	ldr	r3, [pc, #172]	; (1000f404 <_svfiprintf_r+0x200>)
1000f358:	2b00      	cmp	r3, #0
1000f35a:	d12f      	bne.n	1000f3bc <_svfiprintf_r+0x1b8>
1000f35c:	6829      	ldr	r1, [r5, #0]
1000f35e:	9b05      	ldr	r3, [sp, #20]
1000f360:	2207      	movs	r2, #7
1000f362:	05c9      	lsls	r1, r1, #23
1000f364:	d528      	bpl.n	1000f3b8 <_svfiprintf_r+0x1b4>
1000f366:	189b      	adds	r3, r3, r2
1000f368:	4393      	bics	r3, r2
1000f36a:	3308      	adds	r3, #8
1000f36c:	9305      	str	r3, [sp, #20]
1000f36e:	696b      	ldr	r3, [r5, #20]
1000f370:	9a03      	ldr	r2, [sp, #12]
1000f372:	189b      	adds	r3, r3, r2
1000f374:	616b      	str	r3, [r5, #20]
1000f376:	e767      	b.n	1000f248 <_svfiprintf_r+0x44>
1000f378:	425b      	negs	r3, r3
1000f37a:	60eb      	str	r3, [r5, #12]
1000f37c:	2302      	movs	r3, #2
1000f37e:	430b      	orrs	r3, r1
1000f380:	602b      	str	r3, [r5, #0]
1000f382:	e7c0      	b.n	1000f306 <_svfiprintf_r+0x102>
1000f384:	434b      	muls	r3, r1
1000f386:	3401      	adds	r4, #1
1000f388:	189b      	adds	r3, r3, r2
1000f38a:	2001      	movs	r0, #1
1000f38c:	e7a0      	b.n	1000f2d0 <_svfiprintf_r+0xcc>
1000f38e:	2301      	movs	r3, #1
1000f390:	425b      	negs	r3, r3
1000f392:	e7c7      	b.n	1000f324 <_svfiprintf_r+0x120>
1000f394:	2300      	movs	r3, #0
1000f396:	0014      	movs	r4, r2
1000f398:	200a      	movs	r0, #10
1000f39a:	001a      	movs	r2, r3
1000f39c:	606b      	str	r3, [r5, #4]
1000f39e:	7821      	ldrb	r1, [r4, #0]
1000f3a0:	3930      	subs	r1, #48	; 0x30
1000f3a2:	2909      	cmp	r1, #9
1000f3a4:	d903      	bls.n	1000f3ae <_svfiprintf_r+0x1aa>
1000f3a6:	2b00      	cmp	r3, #0
1000f3a8:	d0bd      	beq.n	1000f326 <_svfiprintf_r+0x122>
1000f3aa:	9207      	str	r2, [sp, #28]
1000f3ac:	e7bb      	b.n	1000f326 <_svfiprintf_r+0x122>
1000f3ae:	4342      	muls	r2, r0
1000f3b0:	3401      	adds	r4, #1
1000f3b2:	1852      	adds	r2, r2, r1
1000f3b4:	2301      	movs	r3, #1
1000f3b6:	e7f2      	b.n	1000f39e <_svfiprintf_r+0x19a>
1000f3b8:	3307      	adds	r3, #7
1000f3ba:	e7d5      	b.n	1000f368 <_svfiprintf_r+0x164>
1000f3bc:	ab05      	add	r3, sp, #20
1000f3be:	9300      	str	r3, [sp, #0]
1000f3c0:	003a      	movs	r2, r7
1000f3c2:	4b11      	ldr	r3, [pc, #68]	; (1000f408 <_svfiprintf_r+0x204>)
1000f3c4:	0029      	movs	r1, r5
1000f3c6:	9802      	ldr	r0, [sp, #8]
1000f3c8:	e000      	b.n	1000f3cc <_svfiprintf_r+0x1c8>
1000f3ca:	bf00      	nop
1000f3cc:	9003      	str	r0, [sp, #12]
1000f3ce:	9b03      	ldr	r3, [sp, #12]
1000f3d0:	3301      	adds	r3, #1
1000f3d2:	d1cc      	bne.n	1000f36e <_svfiprintf_r+0x16a>
1000f3d4:	89bb      	ldrh	r3, [r7, #12]
1000f3d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000f3d8:	065b      	lsls	r3, r3, #25
1000f3da:	d400      	bmi.n	1000f3de <_svfiprintf_r+0x1da>
1000f3dc:	e729      	b.n	1000f232 <_svfiprintf_r+0x2e>
1000f3de:	2001      	movs	r0, #1
1000f3e0:	4240      	negs	r0, r0
1000f3e2:	e726      	b.n	1000f232 <_svfiprintf_r+0x2e>
1000f3e4:	ab05      	add	r3, sp, #20
1000f3e6:	9300      	str	r3, [sp, #0]
1000f3e8:	003a      	movs	r2, r7
1000f3ea:	4b07      	ldr	r3, [pc, #28]	; (1000f408 <_svfiprintf_r+0x204>)
1000f3ec:	0029      	movs	r1, r5
1000f3ee:	9802      	ldr	r0, [sp, #8]
1000f3f0:	f000 f87a 	bl	1000f4e8 <_printf_i>
1000f3f4:	e7ea      	b.n	1000f3cc <_svfiprintf_r+0x1c8>
1000f3f6:	46c0      	nop			; (mov r8, r8)
1000f3f8:	10010b98 	.word	0x10010b98
1000f3fc:	10010b9e 	.word	0x10010b9e
1000f400:	10010ba2 	.word	0x10010ba2
1000f404:	00000000 	.word	0x00000000
1000f408:	1000f141 	.word	0x1000f141

1000f40c <_printf_common>:
1000f40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f40e:	0015      	movs	r5, r2
1000f410:	9301      	str	r3, [sp, #4]
1000f412:	688a      	ldr	r2, [r1, #8]
1000f414:	690b      	ldr	r3, [r1, #16]
1000f416:	9000      	str	r0, [sp, #0]
1000f418:	000c      	movs	r4, r1
1000f41a:	4293      	cmp	r3, r2
1000f41c:	da00      	bge.n	1000f420 <_printf_common+0x14>
1000f41e:	0013      	movs	r3, r2
1000f420:	0022      	movs	r2, r4
1000f422:	602b      	str	r3, [r5, #0]
1000f424:	3243      	adds	r2, #67	; 0x43
1000f426:	7812      	ldrb	r2, [r2, #0]
1000f428:	2a00      	cmp	r2, #0
1000f42a:	d001      	beq.n	1000f430 <_printf_common+0x24>
1000f42c:	3301      	adds	r3, #1
1000f42e:	602b      	str	r3, [r5, #0]
1000f430:	6823      	ldr	r3, [r4, #0]
1000f432:	069b      	lsls	r3, r3, #26
1000f434:	d502      	bpl.n	1000f43c <_printf_common+0x30>
1000f436:	682b      	ldr	r3, [r5, #0]
1000f438:	3302      	adds	r3, #2
1000f43a:	602b      	str	r3, [r5, #0]
1000f43c:	2706      	movs	r7, #6
1000f43e:	6823      	ldr	r3, [r4, #0]
1000f440:	401f      	ands	r7, r3
1000f442:	d027      	beq.n	1000f494 <_printf_common+0x88>
1000f444:	0023      	movs	r3, r4
1000f446:	3343      	adds	r3, #67	; 0x43
1000f448:	781b      	ldrb	r3, [r3, #0]
1000f44a:	1e5a      	subs	r2, r3, #1
1000f44c:	4193      	sbcs	r3, r2
1000f44e:	6822      	ldr	r2, [r4, #0]
1000f450:	0692      	lsls	r2, r2, #26
1000f452:	d430      	bmi.n	1000f4b6 <_printf_common+0xaa>
1000f454:	0022      	movs	r2, r4
1000f456:	9901      	ldr	r1, [sp, #4]
1000f458:	3243      	adds	r2, #67	; 0x43
1000f45a:	9800      	ldr	r0, [sp, #0]
1000f45c:	9e08      	ldr	r6, [sp, #32]
1000f45e:	47b0      	blx	r6
1000f460:	1c43      	adds	r3, r0, #1
1000f462:	d025      	beq.n	1000f4b0 <_printf_common+0xa4>
1000f464:	2306      	movs	r3, #6
1000f466:	6820      	ldr	r0, [r4, #0]
1000f468:	682a      	ldr	r2, [r5, #0]
1000f46a:	68e1      	ldr	r1, [r4, #12]
1000f46c:	4003      	ands	r3, r0
1000f46e:	2500      	movs	r5, #0
1000f470:	2b04      	cmp	r3, #4
1000f472:	d103      	bne.n	1000f47c <_printf_common+0x70>
1000f474:	1a8d      	subs	r5, r1, r2
1000f476:	43eb      	mvns	r3, r5
1000f478:	17db      	asrs	r3, r3, #31
1000f47a:	401d      	ands	r5, r3
1000f47c:	68a3      	ldr	r3, [r4, #8]
1000f47e:	6922      	ldr	r2, [r4, #16]
1000f480:	4293      	cmp	r3, r2
1000f482:	dd01      	ble.n	1000f488 <_printf_common+0x7c>
1000f484:	1a9b      	subs	r3, r3, r2
1000f486:	18ed      	adds	r5, r5, r3
1000f488:	2700      	movs	r7, #0
1000f48a:	42bd      	cmp	r5, r7
1000f48c:	d120      	bne.n	1000f4d0 <_printf_common+0xc4>
1000f48e:	2000      	movs	r0, #0
1000f490:	e010      	b.n	1000f4b4 <_printf_common+0xa8>
1000f492:	3701      	adds	r7, #1
1000f494:	68e3      	ldr	r3, [r4, #12]
1000f496:	682a      	ldr	r2, [r5, #0]
1000f498:	1a9b      	subs	r3, r3, r2
1000f49a:	429f      	cmp	r7, r3
1000f49c:	dad2      	bge.n	1000f444 <_printf_common+0x38>
1000f49e:	0022      	movs	r2, r4
1000f4a0:	2301      	movs	r3, #1
1000f4a2:	3219      	adds	r2, #25
1000f4a4:	9901      	ldr	r1, [sp, #4]
1000f4a6:	9800      	ldr	r0, [sp, #0]
1000f4a8:	9e08      	ldr	r6, [sp, #32]
1000f4aa:	47b0      	blx	r6
1000f4ac:	1c43      	adds	r3, r0, #1
1000f4ae:	d1f0      	bne.n	1000f492 <_printf_common+0x86>
1000f4b0:	2001      	movs	r0, #1
1000f4b2:	4240      	negs	r0, r0
1000f4b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f4b6:	2030      	movs	r0, #48	; 0x30
1000f4b8:	18e1      	adds	r1, r4, r3
1000f4ba:	3143      	adds	r1, #67	; 0x43
1000f4bc:	7008      	strb	r0, [r1, #0]
1000f4be:	0021      	movs	r1, r4
1000f4c0:	1c5a      	adds	r2, r3, #1
1000f4c2:	3145      	adds	r1, #69	; 0x45
1000f4c4:	7809      	ldrb	r1, [r1, #0]
1000f4c6:	18a2      	adds	r2, r4, r2
1000f4c8:	3243      	adds	r2, #67	; 0x43
1000f4ca:	3302      	adds	r3, #2
1000f4cc:	7011      	strb	r1, [r2, #0]
1000f4ce:	e7c1      	b.n	1000f454 <_printf_common+0x48>
1000f4d0:	0022      	movs	r2, r4
1000f4d2:	2301      	movs	r3, #1
1000f4d4:	321a      	adds	r2, #26
1000f4d6:	9901      	ldr	r1, [sp, #4]
1000f4d8:	9800      	ldr	r0, [sp, #0]
1000f4da:	9e08      	ldr	r6, [sp, #32]
1000f4dc:	47b0      	blx	r6
1000f4de:	1c43      	adds	r3, r0, #1
1000f4e0:	d0e6      	beq.n	1000f4b0 <_printf_common+0xa4>
1000f4e2:	3701      	adds	r7, #1
1000f4e4:	e7d1      	b.n	1000f48a <_printf_common+0x7e>
	...

1000f4e8 <_printf_i>:
1000f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4ea:	b08b      	sub	sp, #44	; 0x2c
1000f4ec:	9206      	str	r2, [sp, #24]
1000f4ee:	000a      	movs	r2, r1
1000f4f0:	3243      	adds	r2, #67	; 0x43
1000f4f2:	9307      	str	r3, [sp, #28]
1000f4f4:	9005      	str	r0, [sp, #20]
1000f4f6:	9204      	str	r2, [sp, #16]
1000f4f8:	7e0a      	ldrb	r2, [r1, #24]
1000f4fa:	000c      	movs	r4, r1
1000f4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1000f4fe:	2a6e      	cmp	r2, #110	; 0x6e
1000f500:	d100      	bne.n	1000f504 <_printf_i+0x1c>
1000f502:	e08f      	b.n	1000f624 <_printf_i+0x13c>
1000f504:	d817      	bhi.n	1000f536 <_printf_i+0x4e>
1000f506:	2a63      	cmp	r2, #99	; 0x63
1000f508:	d02c      	beq.n	1000f564 <_printf_i+0x7c>
1000f50a:	d808      	bhi.n	1000f51e <_printf_i+0x36>
1000f50c:	2a00      	cmp	r2, #0
1000f50e:	d100      	bne.n	1000f512 <_printf_i+0x2a>
1000f510:	e099      	b.n	1000f646 <_printf_i+0x15e>
1000f512:	2a58      	cmp	r2, #88	; 0x58
1000f514:	d054      	beq.n	1000f5c0 <_printf_i+0xd8>
1000f516:	0026      	movs	r6, r4
1000f518:	3642      	adds	r6, #66	; 0x42
1000f51a:	7032      	strb	r2, [r6, #0]
1000f51c:	e029      	b.n	1000f572 <_printf_i+0x8a>
1000f51e:	2a64      	cmp	r2, #100	; 0x64
1000f520:	d001      	beq.n	1000f526 <_printf_i+0x3e>
1000f522:	2a69      	cmp	r2, #105	; 0x69
1000f524:	d1f7      	bne.n	1000f516 <_printf_i+0x2e>
1000f526:	6821      	ldr	r1, [r4, #0]
1000f528:	681a      	ldr	r2, [r3, #0]
1000f52a:	0608      	lsls	r0, r1, #24
1000f52c:	d523      	bpl.n	1000f576 <_printf_i+0x8e>
1000f52e:	1d11      	adds	r1, r2, #4
1000f530:	6019      	str	r1, [r3, #0]
1000f532:	6815      	ldr	r5, [r2, #0]
1000f534:	e025      	b.n	1000f582 <_printf_i+0x9a>
1000f536:	2a73      	cmp	r2, #115	; 0x73
1000f538:	d100      	bne.n	1000f53c <_printf_i+0x54>
1000f53a:	e088      	b.n	1000f64e <_printf_i+0x166>
1000f53c:	d808      	bhi.n	1000f550 <_printf_i+0x68>
1000f53e:	2a6f      	cmp	r2, #111	; 0x6f
1000f540:	d029      	beq.n	1000f596 <_printf_i+0xae>
1000f542:	2a70      	cmp	r2, #112	; 0x70
1000f544:	d1e7      	bne.n	1000f516 <_printf_i+0x2e>
1000f546:	2220      	movs	r2, #32
1000f548:	6809      	ldr	r1, [r1, #0]
1000f54a:	430a      	orrs	r2, r1
1000f54c:	6022      	str	r2, [r4, #0]
1000f54e:	e003      	b.n	1000f558 <_printf_i+0x70>
1000f550:	2a75      	cmp	r2, #117	; 0x75
1000f552:	d020      	beq.n	1000f596 <_printf_i+0xae>
1000f554:	2a78      	cmp	r2, #120	; 0x78
1000f556:	d1de      	bne.n	1000f516 <_printf_i+0x2e>
1000f558:	0022      	movs	r2, r4
1000f55a:	2178      	movs	r1, #120	; 0x78
1000f55c:	3245      	adds	r2, #69	; 0x45
1000f55e:	7011      	strb	r1, [r2, #0]
1000f560:	4a6c      	ldr	r2, [pc, #432]	; (1000f714 <_printf_i+0x22c>)
1000f562:	e030      	b.n	1000f5c6 <_printf_i+0xde>
1000f564:	000e      	movs	r6, r1
1000f566:	681a      	ldr	r2, [r3, #0]
1000f568:	3642      	adds	r6, #66	; 0x42
1000f56a:	1d11      	adds	r1, r2, #4
1000f56c:	6019      	str	r1, [r3, #0]
1000f56e:	6813      	ldr	r3, [r2, #0]
1000f570:	7033      	strb	r3, [r6, #0]
1000f572:	2301      	movs	r3, #1
1000f574:	e079      	b.n	1000f66a <_printf_i+0x182>
1000f576:	0649      	lsls	r1, r1, #25
1000f578:	d5d9      	bpl.n	1000f52e <_printf_i+0x46>
1000f57a:	1d11      	adds	r1, r2, #4
1000f57c:	6019      	str	r1, [r3, #0]
1000f57e:	2300      	movs	r3, #0
1000f580:	5ed5      	ldrsh	r5, [r2, r3]
1000f582:	2d00      	cmp	r5, #0
1000f584:	da03      	bge.n	1000f58e <_printf_i+0xa6>
1000f586:	232d      	movs	r3, #45	; 0x2d
1000f588:	9a04      	ldr	r2, [sp, #16]
1000f58a:	426d      	negs	r5, r5
1000f58c:	7013      	strb	r3, [r2, #0]
1000f58e:	4b62      	ldr	r3, [pc, #392]	; (1000f718 <_printf_i+0x230>)
1000f590:	270a      	movs	r7, #10
1000f592:	9303      	str	r3, [sp, #12]
1000f594:	e02f      	b.n	1000f5f6 <_printf_i+0x10e>
1000f596:	6820      	ldr	r0, [r4, #0]
1000f598:	6819      	ldr	r1, [r3, #0]
1000f59a:	0605      	lsls	r5, r0, #24
1000f59c:	d503      	bpl.n	1000f5a6 <_printf_i+0xbe>
1000f59e:	1d08      	adds	r0, r1, #4
1000f5a0:	6018      	str	r0, [r3, #0]
1000f5a2:	680d      	ldr	r5, [r1, #0]
1000f5a4:	e005      	b.n	1000f5b2 <_printf_i+0xca>
1000f5a6:	0640      	lsls	r0, r0, #25
1000f5a8:	d5f9      	bpl.n	1000f59e <_printf_i+0xb6>
1000f5aa:	680d      	ldr	r5, [r1, #0]
1000f5ac:	1d08      	adds	r0, r1, #4
1000f5ae:	6018      	str	r0, [r3, #0]
1000f5b0:	b2ad      	uxth	r5, r5
1000f5b2:	4b59      	ldr	r3, [pc, #356]	; (1000f718 <_printf_i+0x230>)
1000f5b4:	2708      	movs	r7, #8
1000f5b6:	9303      	str	r3, [sp, #12]
1000f5b8:	2a6f      	cmp	r2, #111	; 0x6f
1000f5ba:	d018      	beq.n	1000f5ee <_printf_i+0x106>
1000f5bc:	270a      	movs	r7, #10
1000f5be:	e016      	b.n	1000f5ee <_printf_i+0x106>
1000f5c0:	3145      	adds	r1, #69	; 0x45
1000f5c2:	700a      	strb	r2, [r1, #0]
1000f5c4:	4a54      	ldr	r2, [pc, #336]	; (1000f718 <_printf_i+0x230>)
1000f5c6:	9203      	str	r2, [sp, #12]
1000f5c8:	681a      	ldr	r2, [r3, #0]
1000f5ca:	6821      	ldr	r1, [r4, #0]
1000f5cc:	1d10      	adds	r0, r2, #4
1000f5ce:	6018      	str	r0, [r3, #0]
1000f5d0:	6815      	ldr	r5, [r2, #0]
1000f5d2:	0608      	lsls	r0, r1, #24
1000f5d4:	d522      	bpl.n	1000f61c <_printf_i+0x134>
1000f5d6:	07cb      	lsls	r3, r1, #31
1000f5d8:	d502      	bpl.n	1000f5e0 <_printf_i+0xf8>
1000f5da:	2320      	movs	r3, #32
1000f5dc:	4319      	orrs	r1, r3
1000f5de:	6021      	str	r1, [r4, #0]
1000f5e0:	2710      	movs	r7, #16
1000f5e2:	2d00      	cmp	r5, #0
1000f5e4:	d103      	bne.n	1000f5ee <_printf_i+0x106>
1000f5e6:	2320      	movs	r3, #32
1000f5e8:	6822      	ldr	r2, [r4, #0]
1000f5ea:	439a      	bics	r2, r3
1000f5ec:	6022      	str	r2, [r4, #0]
1000f5ee:	0023      	movs	r3, r4
1000f5f0:	2200      	movs	r2, #0
1000f5f2:	3343      	adds	r3, #67	; 0x43
1000f5f4:	701a      	strb	r2, [r3, #0]
1000f5f6:	6863      	ldr	r3, [r4, #4]
1000f5f8:	60a3      	str	r3, [r4, #8]
1000f5fa:	2b00      	cmp	r3, #0
1000f5fc:	db5c      	blt.n	1000f6b8 <_printf_i+0x1d0>
1000f5fe:	2204      	movs	r2, #4
1000f600:	6821      	ldr	r1, [r4, #0]
1000f602:	4391      	bics	r1, r2
1000f604:	6021      	str	r1, [r4, #0]
1000f606:	2d00      	cmp	r5, #0
1000f608:	d158      	bne.n	1000f6bc <_printf_i+0x1d4>
1000f60a:	9e04      	ldr	r6, [sp, #16]
1000f60c:	2b00      	cmp	r3, #0
1000f60e:	d064      	beq.n	1000f6da <_printf_i+0x1f2>
1000f610:	0026      	movs	r6, r4
1000f612:	9b03      	ldr	r3, [sp, #12]
1000f614:	3642      	adds	r6, #66	; 0x42
1000f616:	781b      	ldrb	r3, [r3, #0]
1000f618:	7033      	strb	r3, [r6, #0]
1000f61a:	e05e      	b.n	1000f6da <_printf_i+0x1f2>
1000f61c:	0648      	lsls	r0, r1, #25
1000f61e:	d5da      	bpl.n	1000f5d6 <_printf_i+0xee>
1000f620:	b2ad      	uxth	r5, r5
1000f622:	e7d8      	b.n	1000f5d6 <_printf_i+0xee>
1000f624:	6809      	ldr	r1, [r1, #0]
1000f626:	681a      	ldr	r2, [r3, #0]
1000f628:	0608      	lsls	r0, r1, #24
1000f62a:	d505      	bpl.n	1000f638 <_printf_i+0x150>
1000f62c:	1d11      	adds	r1, r2, #4
1000f62e:	6019      	str	r1, [r3, #0]
1000f630:	6813      	ldr	r3, [r2, #0]
1000f632:	6962      	ldr	r2, [r4, #20]
1000f634:	601a      	str	r2, [r3, #0]
1000f636:	e006      	b.n	1000f646 <_printf_i+0x15e>
1000f638:	0649      	lsls	r1, r1, #25
1000f63a:	d5f7      	bpl.n	1000f62c <_printf_i+0x144>
1000f63c:	1d11      	adds	r1, r2, #4
1000f63e:	6019      	str	r1, [r3, #0]
1000f640:	6813      	ldr	r3, [r2, #0]
1000f642:	8aa2      	ldrh	r2, [r4, #20]
1000f644:	801a      	strh	r2, [r3, #0]
1000f646:	2300      	movs	r3, #0
1000f648:	9e04      	ldr	r6, [sp, #16]
1000f64a:	6123      	str	r3, [r4, #16]
1000f64c:	e054      	b.n	1000f6f8 <_printf_i+0x210>
1000f64e:	681a      	ldr	r2, [r3, #0]
1000f650:	1d11      	adds	r1, r2, #4
1000f652:	6019      	str	r1, [r3, #0]
1000f654:	6816      	ldr	r6, [r2, #0]
1000f656:	2100      	movs	r1, #0
1000f658:	6862      	ldr	r2, [r4, #4]
1000f65a:	0030      	movs	r0, r6
1000f65c:	f000 f85e 	bl	1000f71c <memchr>
1000f660:	2800      	cmp	r0, #0
1000f662:	d001      	beq.n	1000f668 <_printf_i+0x180>
1000f664:	1b80      	subs	r0, r0, r6
1000f666:	6060      	str	r0, [r4, #4]
1000f668:	6863      	ldr	r3, [r4, #4]
1000f66a:	6123      	str	r3, [r4, #16]
1000f66c:	2300      	movs	r3, #0
1000f66e:	9a04      	ldr	r2, [sp, #16]
1000f670:	7013      	strb	r3, [r2, #0]
1000f672:	e041      	b.n	1000f6f8 <_printf_i+0x210>
1000f674:	6923      	ldr	r3, [r4, #16]
1000f676:	0032      	movs	r2, r6
1000f678:	9906      	ldr	r1, [sp, #24]
1000f67a:	9805      	ldr	r0, [sp, #20]
1000f67c:	9d07      	ldr	r5, [sp, #28]
1000f67e:	47a8      	blx	r5
1000f680:	1c43      	adds	r3, r0, #1
1000f682:	d043      	beq.n	1000f70c <_printf_i+0x224>
1000f684:	6823      	ldr	r3, [r4, #0]
1000f686:	2500      	movs	r5, #0
1000f688:	079b      	lsls	r3, r3, #30
1000f68a:	d40f      	bmi.n	1000f6ac <_printf_i+0x1c4>
1000f68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000f68e:	68e0      	ldr	r0, [r4, #12]
1000f690:	4298      	cmp	r0, r3
1000f692:	da3d      	bge.n	1000f710 <_printf_i+0x228>
1000f694:	0018      	movs	r0, r3
1000f696:	e03b      	b.n	1000f710 <_printf_i+0x228>
1000f698:	0022      	movs	r2, r4
1000f69a:	2301      	movs	r3, #1
1000f69c:	3219      	adds	r2, #25
1000f69e:	9906      	ldr	r1, [sp, #24]
1000f6a0:	9805      	ldr	r0, [sp, #20]
1000f6a2:	9e07      	ldr	r6, [sp, #28]
1000f6a4:	47b0      	blx	r6
1000f6a6:	1c43      	adds	r3, r0, #1
1000f6a8:	d030      	beq.n	1000f70c <_printf_i+0x224>
1000f6aa:	3501      	adds	r5, #1
1000f6ac:	68e3      	ldr	r3, [r4, #12]
1000f6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000f6b0:	1a9b      	subs	r3, r3, r2
1000f6b2:	429d      	cmp	r5, r3
1000f6b4:	dbf0      	blt.n	1000f698 <_printf_i+0x1b0>
1000f6b6:	e7e9      	b.n	1000f68c <_printf_i+0x1a4>
1000f6b8:	2d00      	cmp	r5, #0
1000f6ba:	d0a9      	beq.n	1000f610 <_printf_i+0x128>
1000f6bc:	9e04      	ldr	r6, [sp, #16]
1000f6be:	0028      	movs	r0, r5
1000f6c0:	0039      	movs	r1, r7
1000f6c2:	f7fe f85d 	bl	1000d780 <__aeabi_uidivmod>
1000f6c6:	9b03      	ldr	r3, [sp, #12]
1000f6c8:	3e01      	subs	r6, #1
1000f6ca:	5c5b      	ldrb	r3, [r3, r1]
1000f6cc:	0028      	movs	r0, r5
1000f6ce:	7033      	strb	r3, [r6, #0]
1000f6d0:	0039      	movs	r1, r7
1000f6d2:	f7fd ffcf 	bl	1000d674 <__udivsi3>
1000f6d6:	1e05      	subs	r5, r0, #0
1000f6d8:	d1f1      	bne.n	1000f6be <_printf_i+0x1d6>
1000f6da:	2f08      	cmp	r7, #8
1000f6dc:	d109      	bne.n	1000f6f2 <_printf_i+0x20a>
1000f6de:	6823      	ldr	r3, [r4, #0]
1000f6e0:	07db      	lsls	r3, r3, #31
1000f6e2:	d506      	bpl.n	1000f6f2 <_printf_i+0x20a>
1000f6e4:	6863      	ldr	r3, [r4, #4]
1000f6e6:	6922      	ldr	r2, [r4, #16]
1000f6e8:	4293      	cmp	r3, r2
1000f6ea:	dc02      	bgt.n	1000f6f2 <_printf_i+0x20a>
1000f6ec:	2330      	movs	r3, #48	; 0x30
1000f6ee:	3e01      	subs	r6, #1
1000f6f0:	7033      	strb	r3, [r6, #0]
1000f6f2:	9b04      	ldr	r3, [sp, #16]
1000f6f4:	1b9b      	subs	r3, r3, r6
1000f6f6:	6123      	str	r3, [r4, #16]
1000f6f8:	9b07      	ldr	r3, [sp, #28]
1000f6fa:	aa09      	add	r2, sp, #36	; 0x24
1000f6fc:	9300      	str	r3, [sp, #0]
1000f6fe:	0021      	movs	r1, r4
1000f700:	9b06      	ldr	r3, [sp, #24]
1000f702:	9805      	ldr	r0, [sp, #20]
1000f704:	f7ff fe82 	bl	1000f40c <_printf_common>
1000f708:	1c43      	adds	r3, r0, #1
1000f70a:	d1b3      	bne.n	1000f674 <_printf_i+0x18c>
1000f70c:	2001      	movs	r0, #1
1000f70e:	4240      	negs	r0, r0
1000f710:	b00b      	add	sp, #44	; 0x2c
1000f712:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f714:	10010bba 	.word	0x10010bba
1000f718:	10010ba9 	.word	0x10010ba9

1000f71c <memchr>:
1000f71c:	b2c9      	uxtb	r1, r1
1000f71e:	1882      	adds	r2, r0, r2
1000f720:	4290      	cmp	r0, r2
1000f722:	d101      	bne.n	1000f728 <memchr+0xc>
1000f724:	2000      	movs	r0, #0
1000f726:	4770      	bx	lr
1000f728:	7803      	ldrb	r3, [r0, #0]
1000f72a:	428b      	cmp	r3, r1
1000f72c:	d0fb      	beq.n	1000f726 <memchr+0xa>
1000f72e:	3001      	adds	r0, #1
1000f730:	e7f6      	b.n	1000f720 <memchr+0x4>

1000f732 <memcpy>:
1000f732:	2300      	movs	r3, #0
1000f734:	b510      	push	{r4, lr}
1000f736:	429a      	cmp	r2, r3
1000f738:	d100      	bne.n	1000f73c <memcpy+0xa>
1000f73a:	bd10      	pop	{r4, pc}
1000f73c:	5ccc      	ldrb	r4, [r1, r3]
1000f73e:	54c4      	strb	r4, [r0, r3]
1000f740:	3301      	adds	r3, #1
1000f742:	e7f8      	b.n	1000f736 <memcpy+0x4>

1000f744 <memmove>:
1000f744:	b510      	push	{r4, lr}
1000f746:	4288      	cmp	r0, r1
1000f748:	d902      	bls.n	1000f750 <memmove+0xc>
1000f74a:	188b      	adds	r3, r1, r2
1000f74c:	4298      	cmp	r0, r3
1000f74e:	d308      	bcc.n	1000f762 <memmove+0x1e>
1000f750:	2300      	movs	r3, #0
1000f752:	429a      	cmp	r2, r3
1000f754:	d007      	beq.n	1000f766 <memmove+0x22>
1000f756:	5ccc      	ldrb	r4, [r1, r3]
1000f758:	54c4      	strb	r4, [r0, r3]
1000f75a:	3301      	adds	r3, #1
1000f75c:	e7f9      	b.n	1000f752 <memmove+0xe>
1000f75e:	5c8b      	ldrb	r3, [r1, r2]
1000f760:	5483      	strb	r3, [r0, r2]
1000f762:	3a01      	subs	r2, #1
1000f764:	d2fb      	bcs.n	1000f75e <memmove+0x1a>
1000f766:	bd10      	pop	{r4, pc}

1000f768 <_realloc_r>:
1000f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f76a:	0007      	movs	r7, r0
1000f76c:	000d      	movs	r5, r1
1000f76e:	0016      	movs	r6, r2
1000f770:	2900      	cmp	r1, #0
1000f772:	d105      	bne.n	1000f780 <_realloc_r+0x18>
1000f774:	0011      	movs	r1, r2
1000f776:	f7ff fc4f 	bl	1000f018 <_malloc_r>
1000f77a:	0004      	movs	r4, r0
1000f77c:	0020      	movs	r0, r4
1000f77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f780:	2a00      	cmp	r2, #0
1000f782:	d103      	bne.n	1000f78c <_realloc_r+0x24>
1000f784:	f7ff fbfe 	bl	1000ef84 <_free_r>
1000f788:	0034      	movs	r4, r6
1000f78a:	e7f7      	b.n	1000f77c <_realloc_r+0x14>
1000f78c:	f000 f812 	bl	1000f7b4 <_malloc_usable_size_r>
1000f790:	002c      	movs	r4, r5
1000f792:	4286      	cmp	r6, r0
1000f794:	d9f2      	bls.n	1000f77c <_realloc_r+0x14>
1000f796:	0031      	movs	r1, r6
1000f798:	0038      	movs	r0, r7
1000f79a:	f7ff fc3d 	bl	1000f018 <_malloc_r>
1000f79e:	1e04      	subs	r4, r0, #0
1000f7a0:	d0ec      	beq.n	1000f77c <_realloc_r+0x14>
1000f7a2:	0029      	movs	r1, r5
1000f7a4:	0032      	movs	r2, r6
1000f7a6:	f7ff ffc4 	bl	1000f732 <memcpy>
1000f7aa:	0029      	movs	r1, r5
1000f7ac:	0038      	movs	r0, r7
1000f7ae:	f7ff fbe9 	bl	1000ef84 <_free_r>
1000f7b2:	e7e3      	b.n	1000f77c <_realloc_r+0x14>

1000f7b4 <_malloc_usable_size_r>:
1000f7b4:	1f0b      	subs	r3, r1, #4
1000f7b6:	681b      	ldr	r3, [r3, #0]
1000f7b8:	1f18      	subs	r0, r3, #4
1000f7ba:	2b00      	cmp	r3, #0
1000f7bc:	da01      	bge.n	1000f7c2 <_malloc_usable_size_r+0xe>
1000f7be:	580b      	ldr	r3, [r1, r0]
1000f7c0:	18c0      	adds	r0, r0, r3
1000f7c2:	4770      	bx	lr

1000f7c4 <reset_cmd>:
1000f7c4:	401e                                             .

1000f7c5 <convert_cmd>:
1000f7c5:	0040                                             @

1000f7c6 <read_adc_cmd>:
1000f7c6:	0000 002d 0000 0000 0000 2044 7325 6425     ..-.......D %s%d
1000f7d6:	252e 3130 6d64 0a20 0000 3025 6432 253a     .%01dm ...%02d:%
1000f7e6:	3230 0a64 0000 534d 3835 3733 0a20 3a54     02d...MS5837 .T:
1000f7f6:	6425 6420 6765 0a43 3a50 6425 2e20 6d31     %d degC.P:%d .1m
1000f806:	6162 0a72 0000 6964 6576 203a 6425 000a     bar...dive: %d..
	...

1000f818 <font>:
1000f818:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
1000f828:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
1000f838:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
1000f848:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
1000f858:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
1000f868:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
1000f878:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
1000f888:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
1000f898:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
1000f8a8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
1000f8b8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
1000f8c8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
1000f8d8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
1000f8e8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
1000f8f8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
1000f908:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
1000f918:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
1000f928:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
1000f938:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
1000f948:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
1000f958:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
1000f968:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
1000f978:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
1000f988:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
1000f998:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
1000f9a8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
1000f9b8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
1000f9c8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
1000f9d8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
1000f9e8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
1000f9f8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
1000fa08:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
1000fa18:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
1000fa28:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
1000fa38:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
1000fa48:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
1000fa58:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
1000fa68:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
1000fa78:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
1000fa88:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
1000fa98:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
1000faa8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
1000fab8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
1000fac8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
1000fad8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
1000fae8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
1000faf8:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
1000fb08:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
1000fb18:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
1000fb28:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
1000fb38:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
1000fb48:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
1000fb58:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
1000fb68:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
1000fb78:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
1000fb88:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
1000fb98:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
1000fba8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
1000fbb8:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
1000fbc8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
1000fbd8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
1000fbe8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
1000fbf8:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
1000fc08:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
1000fc18:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
1000fc28:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
1000fc38:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
1000fc48:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
1000fc58:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
1000fc68:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
1000fc78:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
1000fc88:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
1000fc98:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
1000fca8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
1000fcb8:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
1000fcc8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
1000fcd8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
1000fce8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
1000fcf8:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
1000fd08:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

1000fd18 <Bcmd>:
1000fd18:	0112 3280 8011 3aff 0581 b10a 0083 0306     ...2...:........
1000fd28:	360a 0801 02b6 0215 01b4 c000 0282 0a70     .6............p.
1000fd38:	01c1 c205 0102 c502 3c82 0a38 02fc 1511     .........<8.....
1000fd48:	10e0 1609 2009 1b21 1913 1517 2b1e 0504     ..... !......+..
1000fd58:	0e02 90e1 140b 1e08 1d22 1e18 1a1b 2b24     ........".....$+
1000fd68:	0606 0f02 2a0a 0004 0002 2b81 0004 0002     .....*.....+....
1000fd78:	1381 0a80 8029 00ff                         ....)...

1000fd80 <Rcmd1>:
1000fd80:	010f 9680 8011 b1ff 0103 2d2c 03b2 2c01     ..........,-...,
1000fd90:	b32d 0106 2d2c 2c01 b42d 0701 03c0 02a2     -...,-.,-.......
1000fda0:	c184 c501 02c2 000a 02c3 2a8a 02c4 ee8a     ...........*....
1000fdb0:	01c5 200e 3600 c801 013a 0005               ... .6..:...

1000fdbc <Rcmd2green>:
1000fdbc:	2a02 0004 0002 2b81 0004 0001 00a0 0000     .*.....+........

1000fdcc <Rcmd2red>:
1000fdcc:	2a02 0004 0000 2b7f 0004 0000 009f 0000     .*.....+........

1000fddc <Rcmd2green144>:
1000fddc:	2a02 0004 0000 2b7f 0004 0000 007f 0000     .*.....+........

1000fdec <Rcmd2green160x80>:
1000fdec:	2a02 0004 0000 2b7f 0004 0000 009f 0000     .*.....+........

1000fdfc <Rcmd3>:
1000fdfc:	e004 0210 071c 3712 2932 292d 2b25 0039     .......72)-)%+9.
1000fe0c:	0301 e110 0310 071d 2e06 292c 2e2d 372e     ..........,)-..7
1000fe1c:	003f 0200 1310 0a80 8029 0064 2e2e 682f     ?.......).d.../h
1000fe2c:	6c70 672f 6970 2f6f 7068 5f6c 7067 6f69     pl/gpio/hpl_gpio
1000fe3c:	625f 7361 2e65 0068 2e2e 682f 6c61 692f     _base.h.../hal/i
1000fe4c:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
1000fe5c:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
1000fe6c:	6c61 695f 6332 6d5f 735f 6e79 2e63 0063     al_i2c_m_sync.c.
1000fe7c:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
1000fe8c:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
1000fe9c:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
1000feac:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
1000febc:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
1000fecc:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
1000fedc:	7369 2e74 0063 0000 2e2e 682f 6c70 612f     ist.c...../hpl/a
1000feec:	6e6f 735f 656c 7065 745f 6d69 7265 682f     on_sleep_timer/h
1000fefc:	6c70 615f 6e6f 735f 656c 7065 745f 6d69     pl_aon_sleep_tim
1000ff0c:	7265 632e 0000 0000                         er.c....

1000ff14 <_i2cms>:
1000ff14:	0000 0081 ba80 018c 2e2e 682f 6c70 692f     ........../hpl/i
1000ff24:	6332 682f 6c70 695f 6332 632e 0000 0000     2c/hpl_i2c.c....

1000ff34 <_i2css>:
1000ff34:	0000 0000                                   ....

1000ff38 <spi_regs>:
1000ff38:	0100 0000 0000 0000 0000 0000 2e2e 682f     ............../h
1000ff48:	6c70 732f 6970 682f 6c70 735f 6970 632e     pl/spi/hpl_spi.c
1000ff58:	0000 0000 bcd8 1000 bce6 1000 bcf4 1000     ................
1000ff68:	bd02 1000 bd10 1000 bd1e 1000 bd2c 1000     ............,...
1000ff78:	bd3c 1000 bd4c 1000 bd5c 1000 bd6c 1000     <...L...\...l...
1000ff88:	bd7c 1000 bd8c 1000 bd9c 1000 bdac 1000     |...............
1000ff98:	bdbc 1000 bdcc 1000 bddc 1000 bdec 1000     ................
1000ffa8:	bdfc 1000 be0c 1000 be1c 1000 be2c 1000     ............,...
1000ffb8:	be3c 1000 be4c 1000 be5c 1000 be6c 1000     <...L...\...l...
1000ffc8:	be7c 1000 be8a 1000 be98 1000 bea6 1000     |...............
1000ffd8:	beb4 1000 bec2 1000 bed0 1000 bede 1000     ................
1000ffe8:	beec 1000 befc 1000 bf0c 1000 bf1c 1000     ................
1000fff8:	bf2c 1000 bf3c 1000 bf4c 1000 bf5c 1000     ,...<...L...\...
10010008:	bf6c 1000 bf7c 1000 bf8c 1000 bf9c 1000     l...|...........
10010018:	bfac 1000 bfbc 1000 bfcc 1000 bfdc 1000     ................
10010028:	bfec 1000 bffe 1000 c010 1000 c058 1000     ............X...
10010038:	c066 1000 c074 1000 c082 1000 c090 1000     f...t...........
10010048:	c09e 1000 c0ac 1000 c0ba 1000 c0c8 1000     ................
10010058:	c0d6 1000 c0e4 1000 c0f2 1000 c100 1000     ................
10010068:	c10e 1000 c11c 1000 c12a 1000 c138 1000     ........*...8...
10010078:	c146 1000 c154 1000 c162 1000 c170 1000     F...T...b...p...
10010088:	c17e 1000 c18c 1000 c19a 1000 c1a8 1000     ~...............
10010098:	c1b6 1000 c1c4 1000 c1d2 1000 c1e0 1000     ................
100100a8:	c1ee 1000 c1fc 1000 c20a 1000 c218 1000     ................
100100b8:	c226 1000 c234 1000 c242 1000 c250 1000     &...4...B...P...
100100c8:	c25e 1000 c26c 1000 c27a 1000 c288 1000     ^...l...z.......
100100d8:	c296 1000 c2a4 1000 c2b2 1000 c2c0 1000     ................
100100e8:	c2ce 1000 c2dc 1000 c2ea 1000 c2f8 1000     ................
100100f8:	c306 1000 c314 1000 c322 1000 c334 1000     ........"...4...
10010108:	c346 1000 c3f2 1000 c60a 1000 c60a 1000     F...............
10010118:	c60a 1000 c454 1000 c60a 1000 c60a 1000     ....T...........
10010128:	c60a 1000 c60a 1000 c60a 1000 c60a 1000     ................
10010138:	c60a 1000 c60a 1000 c60a 1000 c60a 1000     ................
10010148:	c60a 1000 c60a 1000 c60a 1000 c60a 1000     ................
10010158:	c60a 1000 c60a 1000 c60a 1000 c550 1000     ............P...
10010168:	c58e 1000 c5cc 1000 c60a 1000 c60a 1000     ................
10010178:	c60a 1000 c60a 1000 c60a 1000 c60a 1000     ................
10010188:	c60a 1000 c60a 1000 c478 1000 c4ae 1000     ........x.......
10010198:	c4e4 1000 c51a 1000 c662 1000 c696 1000     ........b.......
100101a8:	c6ca 1000 c6fe 1000 c99e 1000 c736 1000     ............6...
100101b8:	c752 1000 c7de 1000 c7fa 1000 c76e 1000     R...........n...
100101c8:	c78a 1000 c7a6 1000 c7c2 1000 c816 1000     ................
100101d8:	cba4 1000 cba4 1000 cba4 1000 cba4 1000     ................
100101e8:	cba4 1000 cba4 1000 cba4 1000 cba4 1000     ................
100101f8:	c8da 1000 c8f6 1000 c912 1000 c9c0 1000     ................
10010208:	c84e 1000 cba4 1000 cba4 1000 cba4 1000     N...............
10010218:	cba4 1000 cba4 1000 cba4 1000 c92e 1000     ................
10010228:	c94a 1000 c966 1000 c982 1000 cba4 1000     J...f...........
10010238:	cb38 1000 cb5c 1000 cba4 1000 cba4 1000     8...\...........
10010248:	ca6a 1000 ca8c 1000 caae 1000 cad0 1000     j...............
10010258:	cba4 1000 cba4 1000 cba4 1000 cba4 1000     ................
10010268:	cba4 1000 cba4 1000 cba4 1000 cba4 1000     ................
10010278:	c648 1000 c67c 1000 c6b0 1000 c6e4 1000     H...|...........
10010288:	c71a 1000 c832 1000 c86a 1000 c886 1000     ....2...j.......
10010298:	c8a2 1000 c8be 1000 ca48 1000 caf2 1000     ........H.......
100102a8:	cb14 1000 cb80 1000                         ........

100102b0 <reset_cmd>:
100102b0:	401e                                             .

100102b1 <convert_cmd>:
100102b1:	0040                                             @

100102b2 <read_adc_cmd>:
	...

100102b4 <splashscreen>:
	...
100102d8:	00f8 0000 0000 0000 0000 0000 0000 0100     ................
100102e8:	00fc 0000 0000 0000 0000 0000 0000 0700     ................
100102f8:	00fe 0000 0000 0000 0000 0000 0000 0f00     ................
10010308:	00fe 0000 0000 0000 0000 0000 0000 0f00     ................
10010318:	00ff 0000 0000 0000 0000 0000 0000 0f00     ................
10010328:	00ff 0000 0000 0000 0000 0000 0000 0f00     ................
10010338:	00ff 0000 0000 0000 0000 0000 0000 0f00     ................
10010348:	00ff 0000 0000 0000 0000 0000 0000 0f00     ................
10010358:	00ff 0000 0000 0000 0000 0000 0000 0f00     ................
10010368:	00ff 0000 0000 0000 0000 0000 0000 0700     ................
10010378:	00fe 0000 0000 0000 0000 0000 0000 0700     ................
10010388:	00fc 0000 0000 0000 0000 0000 0000 0300     ................
10010398:	00f8 0000 0000 0000 0000 0000 0000 0300     ................
100103a8:	00ff 0000 0000 0000 0000 0000 0000 0f00     ................
100103b8:	c0ff 0000 0000 0000 0000 0000 0000 3f00     ...............?
100103c8:	f8ff 0000 0000 0000 0000 0000 0000 ff00     ................
100103d8:	ffff 0000 0000 0000 0000 0000 0000 ff03     ................
100103e8:	ffff 0080 0000 0000 0000 0000 0000 ff03     ................
100103f8:	ffff 0080 0000 0000 0000 0000 0000 ff03     ................
10010408:	ffff 00c0 0000 0000 0000 0000 0000 ff03     ................
10010418:	ffff 00c0 0000 0000 0000 0000 0000 ff07     ................
10010428:	ffff 00c0 0000 0000 0000 0000 0000 ff07     ................
10010438:	ffff 00c0 0000 0000 0000 0000 0000 ff07     ................
10010448:	ffff 00c0 0000 0000 0000 0000 0000 ff07     ................
10010458:	ffff 00c0 0000 0000 0000 0000 0000 ff07     ................
10010468:	ffff 00c0 0000 0000 0000 0000 0000 ff07     ................
10010478:	f7ff 00c0 0000 0000 0000 0000 0000 df07     ................
10010488:	f7ff 00c0 0000 0000 0000 0000 0000 df07     ................
10010498:	f7ff 00c0 0000 0000 0000 0000 0000 9f07     ................
100104a8:	f7ff 00c0 0000 0000 0000 0000 0000 9f07     ................
100104b8:	f3ff 00c0 0000 0000 0000 0000 0000 8f07     ................
100104c8:	f3ff 00c0 0000 0000 0000 0000 0000 8f07     ................
100104d8:	f3ff 00c0 0000 0000 0000 0000 0000 8f07     ................
100104e8:	f3ff 00c0 0000 0000 0000 0000 0000 8f07     ................
100104f8:	f3ff 00c0 0000 0000 0000 0000 0000 8f07     ................
10010508:	e3ff 00e0 0000 0000 0000 0000 0000 8f07     ................
10010518:	e1ff 00e0 0000 0000 0000 0000 0000 8707     ................
10010528:	e1ff 00e0 0000 0000 0000 0000 0000 8707     ................
10010538:	e1ff 00e0 0000 0000 0000 0000 0000 0707     ................
10010548:	e1ff 00e0 0000 0000 0000 0000 0000 0707     ................
10010558:	e0ff 00f0 0000 0000 0000 0000 0000 0707     ................
10010568:	e0ff 00f0 0000 0000 0000 0000 0000 0707     ................
10010578:	e0ff 00f0 c0ff e3ff 8fff 00fe 0000 8707     ................
10010588:	f0ff 0170 e1ff e7ff 9fff 00fe 0000 8707     ..p.............
10010598:	f8ff 0170 f1e3 07e0 1c80 001f 0000 8f07     ..p.............
100105a8:	f8ff 0170 f9c0 07c0 1c00 0007 0000 8f07     ..p.............
100105b8:	f8ff 0170 79c0 07c0 1c00 0007 0000 8f07     ..p..y..........
100105c8:	f8ff 0170 39c0 07c0 1c00 0007 0000 9f03     ..p..9..........
100105d8:	fcff 0160 39c0 07c0 1c00 0007 0000 9f03     ..`..9..........
100105e8:	fcff 01e0 39c0 07c0 1c00 001f 0000 df03     .....9..........
100105f8:	fcff 01f0 39c0 c7ff 1fff 00fe 0000 df03     .....9..........
10010608:	fcff 01f0 39c0 c7ff 1fff 00fc 0000 df01     .....9..........
10010618:	fcff 01f0 39c0 07c0 1c00 0000 0000 df01     .....9..........
10010628:	fcff 0170 39c0 07c0 1c00 0000 0000 df00     ..p..9..........
10010638:	fef7 0160 39c0 07c0 1c00 0000 0000 df00     ..`..9..........
10010648:	fef7 0140 79c0 07c0 1c00 0000 0000 5f00     ..@..y........._
10010658:	fef7 0140 f9c0 07c0 1c00 0000 0000 1f00     ..@.............
10010668:	fef3 0100 f1c3 07c0 1c00 0000 0000 1f00     ................
10010678:	fef3 0100 e1ff e7ff 9cff 0000 0000 1f00     ................
10010688:	fff3 0000 c0ff e3ff 9cff 0000 0000 1f00     ................
10010698:	ffe1 0000 0000 0000 0000 0000 0000 1f00     ................
100106a8:	ffe1 0000 0000 0000 0000 0000 0000 0f00     ................
100106b8:	ffe1 0000 0000 0000 0000 0000 0000 0f00     ................
100106c8:	ffe0 0080 0000 0000 0000 0000 0000 0f00     ................
100106d8:	ffe0 0080 e3ff 1c80 8f03 00fe 0000 0f00     ................
100106e8:	7fe0 0180 e3ff 1c80 9f03 00fe 0000 0f00     ................
100106f8:	7fe0 0180 f3c0 1c80 9e03 0000 0000 0700     ................
10010708:	3fe0 0180 73c0 1c80 9c03 0000 0000 0700     .?...s..........
10010718:	1fe0 0180 73c0 1c80 9c03 0000 0000 0700     .....s..........
10010728:	1fe0 0180 73c0 1c80 9c03 0000 0000 0700     .....s..........
10010738:	1fe0 0180 f3c0 1c80 9c03 0000 0000 0700     ................
10010748:	0fc0 01c0 f3c3 1c80 9c03 0000 0000 0700     ................
10010758:	0fc0 01c0 e3ff 1c80 9f03 00fc 0000 0700     ................
10010768:	0fc0 01c0 f3ff 1c80 9f03 00fc 0000 0700     ................
10010778:	0f80 01c0 f3c0 1c80 9c03 0000 0000 0f00     ................
10010788:	0f80 01c0 7bc0 1c80 9c03 0000 0000 0f00     .....{..........
10010798:	0f80 01c0 7bc0 1c80 9c03 0000 0000 0f00     .....{..........
100107a8:	0f80 0180 7bc0 1e80 9c07 0000 0000 0f00     .....{..........
100107b8:	0f80 0180 7bc0 0e80 9c07 0000 0000 0f00     .....{..........
100107c8:	0f80 0100 f3c0 0fc0 1c9f 0000 0000 0f00     ................
100107d8:	0f80 0100 f3ff c7ff 1fff 00fe 0000 0f00     ................
100107e8:	0f80 0000 e1ff c3ff 0ffe 00fe 0000 0700     ................
100107f8:	0f80 0000 0000 0000 0000 0000 0000 0700     ................
10010808:	0e80 0000 0000 0000 0000 0000 0000 0700     ................
10010818:	1e80 0000 0000 0000 0000 0000 0000 0700     ................
10010828:	1e80 0000 0000 0000 0000 0000 0000 0700     ................
10010838:	3c00 0000 0000 0000 0000 0000 0000 0700     .<..............
10010848:	3e00 0000 0000 0000 0000 0000 0000 0700     .>..............
10010858:	3e00 0000 0000 0000 0000 0000 0000 0f00     .>..............
10010868:	3e00 0000 0000 0000 0000 0000 0000 0f00     .>..............
10010878:	3e80 0000 0000 0000 0000 0000 0000 1f00     .>..............
10010888:	1f80 0000 0000 0000 0000 0000 0000 1f00     ................
10010898:	1f80 0000 0000 0000 0000 0000 0000 1f00     ................
100108a8:	1f00 0080 0000 0000 0000 0000 0000 1f00     ................
100108b8:	1f00 0080 0000 0000 0000 0000 0000 3f00     ...............?
100108c8:	1f00 0080 0000 0000 0000 0000 0000 3f00     ...............?
100108d8:	1f00 00c0 0000 0000 0000 0000 0000 3f00     ...............?
100108e8:	1f00 00c0 0000 0000 0000 0000 0000 3f00     ...............?
100108f8:	1f00 00c0 0000 0000 0000 0000 0000 3f00     ...............?
10010908:	1f00 00c0 0000 0000 0000 0000 0000 7e00     ...............~
10010918:	1f00 00c0 0000 0000 0000 0000 0000 7e00     ...............~
10010928:	1f00 00c0 0000 0000 0000 0000 0000 7e00     ...............~
10010938:	3f00 00c0 0000 0000 0000 0000 0000 7e00     .?.............~
10010948:	3f00 00c0 0000 0000 0000 0000 0000 7e00     .?.............~
10010958:	3f00 00c0 0000 0000 0000 0000 0000 fe00     .?..............
10010968:	3f00 00c0 0000 0000 0000 0000 0000 fe00     .?..............
10010978:	3f00 00c0 0000 0000 0000 0000 0000 fe00     .?..............
10010988:	3f00 0080 0000 0000 0000 0000 0000 ff00     .?..............
10010998:	3f00 0080 0000 0000 0000 0000 0000 ff00     .?..............
100109a8:	3f00 0080 0000 0000 0000 0000 0000 ff00     .?..............
100109b8:	7f00 0080 0000 0000 0000 0000 0000 ff00     ................
100109c8:	7f00 0080 0000 0000 0000 0000 0000 ff00     ................
100109d8:	7f00 0080 0000 0000 0000 0000 0000 ff00     ................
100109e8:	7f00 0080 0000 0000 0000 0000 0000 ff00     ................
100109f8:	7f00 0080 0000 0000 0000 0000 0000 ff00     ................
10010a08:	7f00 0080 0000 0000 0000 0000 0000 ff00     ................
10010a18:	ff00 0080 0000 0000 0000 0000 0000 ff00     ................
10010a28:	ff80 0080 0000 0000 0000 0000 0000 ff00     ................
10010a38:	f380 0080 0000 0000 0000 0000 0000 ff00     ................
10010a48:	c180 0080 0000 0000 0000 0000 0000 e300     ................
10010a58:	8080 0080 0000 0000 0000 0000 0000 c100     ................
10010a68:	0080 0000 0000 0000 0000 0000 0000 8000     ................
10010a78:	0080 0000 0000 0000 0000 0000 0000 0000     ................
	...

10010ab4 <reset_cmd>:
10010ab4:	401e                                             .

10010ab5 <convert_cmd>:
10010ab5:	0040                                             @

10010ab6 <read_adc_cmd>:
10010ab6:	0000 dee0 1000 de30 1000 de30 1000 de2e     ......0...0.....
10010ac6:	1000 ded2 1000 ded2 1000 dec8 1000 de2e     ................
10010ad6:	1000 ded2 1000 dec8 1000 ded2 1000 de2e     ................
10010ae6:	1000 ded8 1000 ded8 1000 ded8 1000 df68     ..............h.
10010af6:	1000 e604 1000 e5e6 1000 e5a0 1000 e4be     ................
10010b06:	1000 e5a0 1000 e5d8 1000 e5a0 1000 e4be     ................
10010b16:	1000 e5e6 1000 e5e6 1000 e5d8 1000 e4be     ................
10010b26:	1000 e4b6 1000 e4b6 1000 e4b6 1000 e81c     ................
10010b36:	1000                                        ..

10010b38 <__sf_fake_stderr>:
	...

10010b58 <__sf_fake_stdin>:
	...

10010b78 <__sf_fake_stdout>:
	...
10010b98:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
10010ba8:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
10010bb8:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
10010bc8:	6665 0000                                   ef..

10010bcc <_init>:
10010bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010bce:	46c0      	nop			; (mov r8, r8)
10010bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
10010bd2:	bc08      	pop	{r3}
10010bd4:	469e      	mov	lr, r3
10010bd6:	4770      	bx	lr

10010bd8 <__init_array_start>:
10010bd8:	1000809d 	.word	0x1000809d

10010bdc <_fini>:
10010bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010bde:	46c0      	nop			; (mov r8, r8)
10010be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
10010be2:	bc08      	pop	{r3}
10010be4:	469e      	mov	lr, r3
10010be6:	4770      	bx	lr

10010be8 <__fini_array_start>:
10010be8:	10008075 	.word	0x10008075
